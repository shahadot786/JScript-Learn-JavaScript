package com.javascript.jscript.Learn;

import com.javascript.jscript.Model.LearnDetailsModel;

import java.util.ArrayList;
import java.util.List;

public class LearnDetailsContent {
    //Fundamentals
    //introductions
    private static List<LearnDetailsModel> Introduction() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel("Hello, world!",
                "Anne wants to learn JavaScript. Before Anne started to learn JavaScript she needs to learn JavaScript fundamentals first. So, Anne started to learn JavaScript fundamentals." +
                        "\n\nDo you know about the script tag?" +
                        "\n\nJavaScript programs can be inserted almost anywhere into an HTML document using the <script> tag.\n" +
                        "You can place the <script> tags, containing your JavaScript, anywhere within your web page, but it is normally recommended that you should keep it within the <head> tags."
                , "<html>\n" +
                "   <body>   \n" +
                "      <script language = \"javascript\" type = \"text/javascript\">\n" +
                "            document.write(\"Hello World!\")\n" +
                "      </script>      \n" +
                "   </body>\n" +
                "</html>",
                "Hello World!");

        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Whitespace and Line Breaks",
                "Can I use white space or line breaks in JavaScript?\n\n" +
                        "JavaScript ignores spaces, tabs, and newlines that appear in JavaScript programs. You can use spaces, tabs, and newlines freely in your program and you are free to format and indent your programs in a neat and consistent way that makes the code easy to read and understand.",
                "",
                ""
        );

        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Case Sensitivity",
                "Did JavaScript case sensitive?\n\n" +
                        "JavaScript is a case-sensitive language. This means that the language keywords, variables, function names, and any other identifiers must always be typed with a consistent capitalization of letters.\n" +
                        "\n" +
                        "So the identifiers Time and TIME will convey different meanings in JavaScript.",
                "",
                ""
        );

        final LearnDetailsModel l4 = new LearnDetailsModel(
                "External scripts",
                "How do you use an external script?\n\n" +
                        "If we have a lot of JavaScript code, we can put it into a separate file.\n" +
                        "\n" +
                        "Script files are attached to HTML with the src attribute and To attach several scripts, use multiple tags:",
                "<script src=\"/js/script1.js\"></script>\n" +
                        "<script src=\"/js/script2.js\"></script>\n" +
                        "…",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Summary",
                "We can use a <script> tag to add JavaScript code to a page.\n" +
                        "The type and language attributes are not required.\n" +
                        "A script in an external file can be inserted with <script src=\"path/to/script.js\"></script>.",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);

        return list;
    }

    //CodeStructure
    private static List<LearnDetailsModel> CodeStructure() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Statements",
                "What are the statements?\n\n" +
                        "Statements are syntax constructs and commands that perform actions. We can have as many statements in our code as we want. Statements can be separated with a semicolon.",
                "document.write(\"Hello Anne!\");\n" +
                        "document.write(\"Hello Anne!\");",
                "Hello Anne!\nHello Anne!"
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Without Semicolons",
                "Can I write a code without a semicolon?\n\n" +
                        "Yes!, A semicolon may be omitted in most cases when a line break exists. This would also work but best practice is always use semicolon.",
                "document.write(\"Hello Anne!\")\n" +
                        "document.write(\"Hello Anne!\")",
                "Hello Anne!\nHello Anne!"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Single Line Comment",
                "How I use comments in my code?\n\n" +
                        "As time goes on, programs become more and more complex. It becomes necessary to add comments which describe what the code does and why. " +
                        "\nOne-line comments start with two forward slash characters //.",
                "// This comment occupies a line of its own\n" +
                        "document.write(\"Hello Anne!\");\n" +
                        "\n" +
                        "document.write(\"Hello Anne!\"); // This comment follows the statement",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Multiline Comments",
                "Multiline comments start with a forward slash and an asterisk /* and end with an asterisk and a forward slash */. Like this:",
                "/* An example with two messages.\n" +
                        "This is a multiline comment.\n" +
                        "*/\n" +
                        "document.write(\"Hello Anne!\");\n" +
                        "document.write(\"Hello Anne!\");",
                ""
        );

        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Summery",
                "Did comments are compulsory for JavaScript?\n\n" +
                        "No, but best practice are always use comments and don't hesitate.\n\n" +
                        "Comments increase the overall code footprint, but that’s not a problem at all. " +
                        "There are many tools which minify code before publishing to a production server. " +
                        "They remove comments, so they don’t appear in the working scripts. Therefore, " +
                        "comments do not have negative effects on production at all.",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);

        return list;
    }

    //useStrict
    private static List<LearnDetailsModel> useStrict() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "“use strict”",
                "What is “use strict”?\n\n" +
                        "For a long time, JavaScript didn't have to worry about backward compatibility. Why? Because feature releases never overlapped — until it did.\n" +
                        "In 2009, ECMAScript 5 (ES5) was released and new features modified some of the existing ones. By default, modifications are not applied unless you enable it using \"use strict\"" +
                        "\n\"use strict\" must be placed at the top of your JavaScript code or else it won’t get applied.\n" +
                        "Nowadays, always \"use strict\" because we don’t want to use the older implementations of JavaScript.",
                "\"use strict\";\n" +
                        "\n" +
                        "// this code works the modern way\n" +
                        "...",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Browser console",
                "When you use a developer console to run code, please note that it doesn't use strict by default." +
                        "So, how to actually use strict in the console?\n" +
                        "\n" +
                        "First, you can try to press Shift+Enter to input multiple lines, and put use strict on top, like this:",
                "'use strict'; <Shift+Enter for a newline>\n" +
                        "//  ...your code\n" +
                        "<Enter to run>",
                ""
        );

        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Should we use “use strict”?",
                "The question may sound obvious, but it’s not so.\n" +
                        "\n" +
                        "One could recommend to start scripts with \"use strict\"… But you know what’s cool?\n" +
                        "\n" +
                        "Modern JavaScript supports “classes” and “modules” – advanced language structures (we’ll surely get to them), that enable use strict automatically. So we don’t need to add the \"use strict\" directive, if we use them.\n" +
                        "\n" +
                        "So, for now \"use strict\"; is a welcome guest at the top of your scripts. Later, when your code is all in classes and modules, you may omit it.\n" +
                        "\n" +
                        "As of now, we’ve got to know about use strict in general.",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);

        return list;
    }

    //Variables
    private static List<LearnDetailsModel> Variables() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Variables",
                "Why variables are more important?\n\n" +
                        "Variables are placeholders for information. Think of it is a memory container that holds your data. It's the most important part of programming." +
                        "\nThere are 3 ways to declare a JavaScript variable:\n" +
                        "\n" +
                        "Using var\n" +
                        "Using let\n" +
                        "Using const\n" +
                        "This chapter uses let.\n" +
                        "\n" +
                        "The var and const keywords are explained in the next chapters.",
                "let user = 'John';\n" +
                        "let age = 25;\n" +
                        "let message = 'Hello';",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "A real-life analogy",
                "Variable has a cycle.\n\n" +
                        "We can easily grasp the concept of a “variable” if we imagine it as a “box” for data, with a uniquely-named sticker on it.\n" +
                        "\n" +
                        "For instance, the variable message can be imagined as a box labeled \"message\" with the value \"Hello!\" in it and\n" +
                        "We can put any value in the box. We can also change it as many times as we want and remember \n" +
                        "When the value is changed, the old data is removed from the variable.",
                "let message;" +
                        "\n" +
                        "message = 'Hello!';" +
                        "\n" +
                        "message = 'Anne!';" +
                        "\n\n" +
                        "document.write(message);" +
                        "\n\n" +
                        "let hello = 'Hello Anne!';" +
                        "\n" +
                        "let message;" +
                        "\n" +
                        "message = hello;" +
                        "\n\n" +
                        "document.write(hello);\n" +
                        "document.write(message);",
                "Anne!\n" +
                        "Hello Anne!" +
                        "\nHello Anne!"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Variable naming",
                "There are two limitations on variable names in JavaScript:\n" +
                        "\n" +
                        "The name must contain only letters, digits, or the symbols $ and _.\n" +
                        "The first character must not be a digit.\n" +
                        "Examples of valid names:",
                "let userName;\n" +
                        "let test123;",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Constants",
                "To declare a constant (unchanging) variable, use const instead of let:",
                "const myBirthday = '18.04.1982';",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Uppercase constants",
                "What is an uppercase constants?\n\n" +
                        "There is a widespread practice to use constants as aliases for difficult-to-remember values that are known prior to execution.\n" +
                        "\n" +
                        "Such constants are named using capital letters and underscores.\n" +
                        "\n" +
                        "For instance, let’s make constants for colors in so-called “web” (hexadecimal) format:",
                "const COLOR_RED = \"#F00\";\n" +
                        "const COLOR_GREEN = \"#0F0\";\n" +
                        "const COLOR_BLUE = \"#00F\";\n" +
                        "const COLOR_ORANGE = \"#FF7F00\";\n" +
                        "\n" +
                        "let color = COLOR_ORANGE;\n" +
                        "alert(color);",
                "#FF7F00"
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Summery",
                "Name things right.\n\n" +
                        "Talking about variables, there’s one more extremely important thing.\n" +
                        "\n" +
                        "A variable name should have a clean, obvious meaning, describing the data that it stores.\n" +
                        "\n" +
                        "Variable naming is one of the most important and complex skills in programming. A quick glance at variable " +
                        "names can reveal which code was written by a beginner versus an experienced developer." +
                        "Some good-to-follow rules are:\n\n" +
                        "1. Use human-readable names like userName or shoppingCart.\n\n" +
                        "2. Stay away from abbreviations or short names like a, b, c, unless you really know what you’re doing.\n\n" +
                        "3. Make names maximally descriptive and concise. Examples of bad names are data and value. Such names say nothing. " +
                        "It’s only okay to use them if the context of the code makes it exceptionally obvious which data or " +
                        "value the variable is referencing.\n\n" +
                        "4. Agree on terms within your team and in your own mind. If a site visitor is called a “user” then we " +
                        "should name related variables currentUser or newUser instead of currentVisitor or newManInCity.",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);

        return list;
    }

    //Data types
    private static List<LearnDetailsModel> DataTypes() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Data types",
                "What are data types?\n\n" +
                        "A data type, in programming, is a classification that specifies which type of value a " +
                        "variable has and what type of mathematical, relational, or logical operations can be applied to it without causing an error.\n\n" +
                        "\nThere are eight basic data types in JavaScript. Here, we’ll cover them in general and in the next " +
                        "chapters we’ll talk about each of them in detail." +
                        "\nWe can put any type in a variable. For example, a variable can at one moment be a string and then store a number:" +
                        "" +
                        "",

                "let message = \"hello\";\n" +
                        "message = 123456;",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Number",
                "No “quote marks” for numbers.The number type represents both integer and floating point numbers.\n" +
                        "\n" +
                        "There are many operations for numbers, e.g. multiplication *, division /, addition +, subtraction -, and so on." +
                        "\nThere’s also a special infinity number available. You just need to do 1/0 — so, one divided zero. This value is deemed to be the biggest number of all time and can not be viewed as the smaller outcome." +
                        "\nIf you get NaN — it means that you’ve hit a computational error. It also means that you’re trying to do a mathematical operation on something that doesn't make sense like dividing a string text with a number.",

                "let n = 123;\n" +
                        "n = 12.345;\n" +
                        "\n" +
                        "document.write(1/0);\n" +
                        "\n" +
                        "document.write(\"not a number\"/4);",
                "Infinity" +
                        "\nNaN"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "BigInt",
                "In JavaScript, the “number” type cannot represent integer values larger than 16 digits or (253-1) (that’s 9007199254740991), " +
                        "or less than -(253-1) for negatives. It’s a technical limitation caused by their internal representation." +
                        "\nFor most purposes that’s quite enough, but sometimes we need really big numbers, e.g. for cryptography or microsecond-precision timestamps." +
                        "BigInt type was recently added to the language to represent integers of arbitrary length.\n" +
                        "\n" +
                        "A BigInt value is created by appending n to the end of an integer:" +
                        "",
                "// the \"n\" at the end means it's a BigInt\n" +
                        "const bigInt = 1234567890123456789012345678901234567890n;",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "String",
                "A string in JavaScript must be surrounded by quotes." +
                        "In JavaScript, there are 3 types of quotes.\n" +
                        "\n" +
                        "Double quotes: \"Hello\".\n" +
                        "Single quotes: 'Hello'.\n" +
                        "Backticks: `Hello`.\n" +
                        "\n" +
                        "Double and single quotes are “simple” quotes. There’s practically no difference between them in JavaScript.\n" +
                        "\n" +
                        "Backticks are “extended functionality” quotes. They allow us to embed variables and expressions " +
                        "into a string by wrapping them in ${…}, for example:\n" +
                        "\n",
                "let str = \"Hello\";\n" +
                        "let str2 = 'Single quotes are ok too';\n" +
                        "// embed a variable\n" +
                        "let phrase = `can embed another ${str}`;",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Boolean",
                "The boolean type has only two values: true and false.\n" +
                        "\n" +
                        "This type is commonly used to store yes/no values: true means “yes, correct”, and false means “no, incorrect”." +
                        "We’ll cover booleans more deeply in the chapter Logical operators.",
                "let emailFieldCheck = true; // yes, email field is checked\n" +
                        "let passwordFieldChecked = false; // no, password field is not checked",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "null value",
                "The special null(nothing) value does not belong to any of the types described above.\n" +
                        "\n" +
                        "It forms a separate type of its own which contains only the null(nothing) value." +
                        "In JavaScript, null is not a “reference to a non-existing object” or a “null pointer” like in some other languages." +
                        "It’s just a special value which represents “nothing”, “empty” or “value unknown”.",
                "let age = null;",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "undefined value",
                "The special value undefined also stands apart. It makes a type of its own, just like null.\n" +
                        "\n" +
                        "The meaning of undefined is “value is not assigned”.\n" +
                        "\n" +
                        "If a variable is declared, but not assigned, then its value is undefined:",
                "let age;\n" +
                        "\n" +
                        "document.write(age);",
                "undefined"
        );
        final LearnDetailsModel l8 = new LearnDetailsModel(
                "Objects and Symbols",
                "The object type is special.\n" +
                        "\n" +
                        "All other types are called “primitive” because their values can contain only a single thing " +
                        "(be it a string or a number or whatever). In contrast, objects are used to store collections of data and more complex entities.\n" +
                        "\n" +
                        "Being that important, objects deserve a special treatment. We’ll deal with them later in the chapter Objects, " +
                        "after we learn more about primitives.\n" +
                        "\n" +
                        "The symbol type is used to create unique identifiers for objects. We have to mention it here for the sake of completeness, " +
                        "but also postpone the details till we know objects.",
                "",
                ""
        );
        final LearnDetailsModel l9 = new LearnDetailsModel(
                "The typeof operator",
                "The typeof operator returns the type of the argument. It’s useful when we want to process values of different " +
                        "types differently or just want to do a quick check.\n" +
                        "\n" +
                        "A call to typeof x returns a string with the type name:",
                "typeof undefined // \"undefined\"\n" +
                        "\n" +
                        "typeof 0 // \"number\"\n" +
                        "\n" +
                        "typeof 10n // \"bigint\"\n" +
                        "\n" +
                        "typeof true // \"boolean\"\n" +
                        "\n" +
                        "typeof \"foo\" // \"string\"\n" +
                        "\n" +
                        "typeof Symbol(\"id\") // \"symbol\"\n" +
                        "\n" +
                        "typeof Math // \"object\"  (1)\n" +
                        "\n" +
                        "typeof null // \"object\"  (2)\n" +
                        "\n" +
                        "typeof alert // \"function\"  (3)",
                ""
        );
        final LearnDetailsModel l10 = new LearnDetailsModel(
                "Summary",
                "There are 8 basic data types in JavaScript.\n" +
                        "\n" +
                        "1.number: for numbers of any kind: integer or floating-point, integers are limited by ±(253-1).\n" +
                        "2.bigint: is for integer numbers of arbitrary length.\n" +
                        "3.string: for strings. A string may have zero or more characters, there’s no separate single-character type.\n" +
                        "4.boolean: for true/false.\n" +
                        "5.null: for unknown values – a standalone type that has a single value null.\n" +
                        "6.undefined: for unassigned values – a standalone type that has a single value undefined.\n" +
                        "7.object: for more complex data structures.\n" +
                        "8.symbol: for unique identifiers.\n" +
                        "The typeof operator allows us to see which type is stored in a variable.\n" +
                        "\n" +
                        "Usually used as typeof x, but typeof(x) is also possible.\n" +
                        "Returns a string with the name of the type, like \"string\".\n" +
                        "For null returns \"object\" – this is an error in the language, it’s not actually an object.",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        list.add(l8);
        list.add(l9);
        list.add(l10);

        return list;
    }

    //Interaction
    private static List<LearnDetailsModel> Interaction() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "alert",
                "What is JavaScript alert?\n\n" +
                        "It shows a message and waits for the user to press “OK”." +
                        "\nThe mini-window with the message is called a modal window. The word “modal” means that the visitor can’t" +
                        "interact with the rest of the page, press other buttons, etc, until they have dealt with the window. " +
                        "In this case – until they press “OK”.",
                "alert(\"Hello\");",
                "Hello"
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "prompt",
                "How I use prompt?\n\n" +
                        "The function prompt accepts two arguments." +
                        "\n" +
                        "The visitor can type something in the prompt input field and press OK. Then we get that text in the result. Or they can cancel the input by pressing Cancel or hitting the Esc key, then we get null as the result.\n" +
                        "\n" +
                        "The call to prompt returns the text from the input field or null if the input was canceled.\n" +
                        "\n" +
                        "For instance:",
                "let age = prompt('Anne, How old are you?', 21);\n" +
                        "\n" +
                        "document.write(`You are ${age} years old!`);",
                "You are 21 years old!"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "confirm",
                "The function confirm shows a modal window with a question and two buttons: OK and Cancel.\n" +
                        "\n" +
                        "The result is true if OK is pressed and false otherwise.\n" +
                        "\n" +
                        "For example:",
                "let isStudent = confirm(\"Are you a Student?\");\n" +
                        "\n" +
                        "document.write( isStudent ); // true if OK is pressed",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Summary",
                "We covered 3 browser-specific functions to interact with visitors:\n" +
                        "\n" +
                        "alert\n" +
                        "shows a message.\n" +
                        "prompt\n" +
                        "shows a message asking the user to input text. It returns the text or, if Cancel button or Esc is clicked, null.\n" +
                        "confirm\n" +
                        "shows a message and waits for the user to press “OK” or “Cancel”. It returns true for OK and false for Cancel/Esc.\n" +
                        "All these methods are modal: they pause script execution and don’t allow the visitor to interact with the rest of the page until the window has been dismissed.\n" +
                        "\n" +
                        "There are two limitations shared by all the methods above:\n" +
                        "\n" +
                        "The exact location of the modal window is determined by the browser. Usually, it’s in the center.\n" +
                        "The exact look of the window also depends on the browser. We can’t modify it.",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);

        return list;
    }

    //TypeConversion
    private static List<LearnDetailsModel> TypeConversion() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Type Conversions",
                "Why we need type conversion?\n\n" +
                        "Sometimes, you need to switch between the different types for whatever reason. There are many reason to convert one type to another type." +
                        "Please take note that converting random text into numbers doesn't work, and it doesn't make any sense, in general, to do so. You’ll end up with NaN",
                "let isBoxOpen = true;\n" +
                        "isBoxOpen = String(isBoxOpen);\n" +
                        "\n" +
                        "//using String() will convert your variable into a string\n" +
                        "let myIdNumber = \"181000602\";\n" +
                        "\n" +
                        "myIdNumber = Number(myIdNumber);\n" +
                        "//using Number() will convert your string into a number",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "String Conversion",
                "String conversion happens when we need the string form of a value. " +
                        "If you want to convert a number to a string use string conversion." +
                        "\nWe can also call the String(value) function to convert a value to a string:",
                "let value = true;\n" +
                        "document.write(typeof value);\n" +
                        "\n" +
                        "value = String(value);\n" +
                        "document.write(typeof value);",
                "boolean\nstring"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Numeric Conversion",
                "Numeric conversion happens in mathematical functions and expressions automatically." +
                        "\nWe can use the Number(value) function to explicitly convert a value to a number:" +
                        "",
                "let str = \"123\";\n" +
                        "document.write(typeof str);\n" +
                        "\n" +
                        "let num = Number(str);\n" +
                        "\n" +
                        "document.write(typeof num);",
                "string\nnumber"
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Boolean Conversion",
                "Boolean conversion is the simplest one.\n" +
                        "\n" +
                        "It happens in logical operations (later we’ll meet condition tests and other similar things) but can also be performed explicitly with a call to Boolean(value).\n" +
                        "\n" +
                        "The conversion rule:\n" +
                        "\n" +
                        "Values that are intuitively “empty”, like 0, an empty string, null, undefined, and NaN, become false.\n" +
                        "Other values become true.\n" +
                        "For instance:",
                "document.write( Boolean(1) );\n" +
                        "document.write( Boolean(0) );\n" +
                        "\n" +
                        "document.write( Boolean(\"hello\") );\n" +
                        "document.write( Boolean(\"\") );",
                "true\n" +
                        "false\n" +
                        "true\n" +
                        "false"
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Summary",
                "The three most widely used type conversions are to string, to number, and to boolean.\n" +
                        "\n" +
                        "String Conversion – Occurs when we output something. Can be performed with String(value). " +
                        "The conversion to string is usually obvious for primitive values.\n" +
                        "\n" +
                        "Numeric Conversion – Occurs in math operations. Can be performed with Number(value)." +
                        "\n" +
                        "Boolean Conversion – Occurs in logical operations. Can be performed with Boolean(value).",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);

        return list;
    }

    //Operators
    private static List<LearnDetailsModel> Operators() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Operators",
                "What are operators and how we use in JavaScript?\n\n" +
                        "We know many operators from school. They are things like addition +, multiplication *, subtraction -, division /, and so on." +
                        "\n" +
                        "In this chapter, we’ll start with simple operators, then concentrate on JavaScript-specific aspects, " +
                        "not covered by school arithmetic." +
                        "\n\nTerms: “unary”, “binary”, “operand”\n" +
                        "Before we move on, let’s grasp some common terminology." +
                        "\n" +
                        "An operand – is what operators are applied to. For instance, in the multiplication of 5 * 2 there are two operands: " +
                        "the left operand is 5 and the right operand is 2. Sometimes, people call these “arguments” instead of “operands”." +
                        "\n" +
                        "An operator is unary if it has a single operand. For example, the unary negation - reverses the sign of a number." +
                        "\n" +
                        "An operator is binary if it has two operands. The same minus exists in binary form as well" +
                        "\n" +
                        "Formally, in the examples we have two different operators that share the same symbol: the negation operator, " +
                        "a unary operator that reverses the sign, and the subtraction operator, a binary operator that subtracts one number from another.",
                "let x = 1;\n" +
                        "\n" +
                        "x = -x;\n" +
                        "document.write( x );" +
                        "\n" +
                        "let x = 1, y = 3;\n" +
                        "document.write( y - x );",
                "-1\n" +
                        "2"
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Maths",
                "The following math operations are supported:\n" +
                        "\n" +
                        "1. Addition +,\n" +
                        "2. Subtraction -,\n" +
                        "3. Multiplication *,\n" +
                        "4. Division /,\n" +
                        "5. Remainder %,\n" +
                        "6. Exponentiation **.\n" +
                        "\nThe first four are straightforward, while % and ** need a few words about them.\n" +
                        "\n" +
                        "Remainder %\n" +
                        "The remainder operator %, despite its appearance, is not related to percents.\n" +
                        "\n" +
                        "The result of a % b is the remainder of the integer division of a by b." +
                        "\n\n" +
                        "Exponentiation **\n" +
                        "The exponentiation operator a ** b raises a to the power of b.\n" +
                        "\n" +
                        "In school maths, we write that as a^b.",

                "document.write( 5 % 2 );\n" +
                        "document.write( 8 % 3 );\n" +
                        "document.write( 2 ** 2 );\n" +
                        "document.write( 2 ** 3 );\n" +
                        "document.write( 2 ** 4 );",

                "1\n" +
                        "2\n" +
                        "4\n" +
                        "8\n" +
                        "16"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Operator precedence",
                "What is operator precedence?\n\n" +
                        "If an expression has more than one operator, the execution order is defined by their precedence, or, " +
                        "in other words, the default priority order of operators." +
                        "\n\n" +
                        "From school, we all know that the multiplication in the expression 1 + 2 * 2 should be calculated before the addition. That’s exactly the precedence thing. The multiplication is said to have a higher precedence than the addition." +
                        "\n\n" +
                        "Parentheses override any precedence, so if we’re not satisfied with the default order, we can use them to change it. For example, write (1 + 2) * 2." +
                        "\n\n" +
                        "There are many operators in JavaScript. Every operator has a corresponding precedence number. The one with the larger number executes first. If the precedence is the same, the execution order is from left to right." +
                        "\n\n" +
                        "Here’s an extract from the precedence table (you don’t need to remember this, but note that unary operators are higher than corresponding binary ones):",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Bitwise operators",
                "Bitwise operators treat arguments as 32-bit integer numbers and work on the level of their binary representation.\n" +
                        "\n" +
                        "These operators are not JavaScript-specific. They are supported in most programming languages.\n" +
                        "\n" +
                        "The list of operators:\n" +
                        "\n" +
                        "AND ( & )\n" +
                        "OR ( | )\n" +
                        "XOR ( ^ )\n" +
                        "NOT ( ~ )\n" +
                        "LEFT SHIFT ( << )\n" +
                        "RIGHT SHIFT ( >> )\n" +
                        "ZERO-FILL RIGHT SHIFT ( >>> )\n\n" +
                        "These operators are used very rarely, when we need to fiddle with numbers on the very lowest (bitwise) level. We won’t need these operators any time soon, as web development has little use of them, but in some special areas, such as cryptography, they are useful. You can read the Bitwise Operators chapter on MDN when a need arises.",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Comma",
                "The comma operator , is one of the rarest and most unusual operators. Sometimes, it’s used to write shorter code, so we need to know it in order to understand what’s going on.\n" +
                        "\n" +
                        "The comma operator allows us to evaluate several expressions, dividing them with a comma ,. Each of them is evaluated but only the result of the last one is returned.\n" +
                        "\n" +
                        "For example:" +
                        "\n" +
                        "Here, the first expression 1 + 2 is evaluated and its result is thrown away. Then, 3 + 4 is evaluated and returned as the result.",
                "let a = (1 + 2, 3 + 4);\n" +
                        "\n" +
                        "document.write( a );",
                "7"
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);

        return list;
    }

    //Comparisons
    private static List<LearnDetailsModel> Comparisons() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Comparisons",
                "What are Comparisons?\n\n" +
                        "Comparison operators are used in logical statements to determine equality or difference between variables or values.\n" +
                        "We know many comparison operators from maths.\n" +
                        "\n" +
                        "In JavaScript they are written like this:\n" +
                        "\n" +
                        "Greater/less than: a > b, a < b.\n" +
                        "Greater/less than or equals: a >= b, a <= b.\n" +
                        "Equals: a == b, please note the double equality sign == means the equality test, while a single one a = b means an assignment.\n" +
                        "Not equals: In maths the notation is ≠, but in JavaScript it’s written as a != b.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Boolean",
                "All comparison operators return a boolean value. Boolean is the result:" +
                        "\n" +
                        "true – means “yes”, “correct” or “the truth”.\n" +
                        "false – means “no”, “wrong” or “not the truth”.",
                "document.write( 2 > 1 );\n" +
                        "document.write( 2 == 1 );\n" +
                        "document.write( 2 != 1 );",
                "true\nfalse\ntrue"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "String",
                "To see whether a string is greater than another, JavaScript uses the so-called “dictionary” or “lexicographical” order.\n" +
                        "\n" +
                        "In other words, strings are compared letter-by-letter." +
                        "\n" +
                        "The algorithm to compare two strings is simple:\n" +
                        "\n" +
                        "Compare the first character of both strings.\n" +
                        "If the first character from the first string is greater (or less) than the other string’s, then the first string is greater (or less) than the second. We’re done.\n" +
                        "Otherwise, if both strings’ first characters are the same, compare the second characters the same way.\n" +
                        "Repeat until the end of either string.\n" +
                        "If both strings end at the same length, then they are equal. Otherwise, the longer string is greater.\n" +
                        "In the first example bellow, the comparison 'Z' > 'A' gets to a result at the first step.\n" +
                        "\n" +
                        "The second comparison 'Glow' and 'Glee' needs more steps as strings are compared character-by-character:\n" +
                        "\n" +
                        "G is the same as G.\n" +
                        "l is the same as l.\n" +
                        "o is greater than e. Stop here. The first string is greater.",
                "document.write( 'Z' > 'A' );\n" +
                        "document.write( 'Glow' > 'Glee' );\n" +
                        "document.write( 'Bee' > 'Be' );",
                "true\ntrue\ntrue"
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Comparison with null and undefined",
                "There’s a non-intuitive behavior when null or undefined are compared to other values.\n" +
                        "\n" +
                        "For a strict equality check ===\n" +
                        "These values are different, because each of them is a different type." +
                        "\n\n" +
                        "For a non-strict check ==\n" +
                        "There’s a special rule. These two are a “sweet couple”: they equal each other (in the sense of ==), but not any other value." +
                        "\n\n" +
                        "For maths and other comparisons < > <= >=\n" +
                        "null/undefined are converted to numbers: null becomes 0, while undefined becomes NaN.",

                "document.write( null === undefined );" +
                        "\n" +
                        "document.write( null == undefined );",

                "false\n" +
                        "true"
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Avoid problems",
                "Why did we go over these examples? Should we remember these peculiarities all the time? Well, not really. Actually, these tricky things will gradually become familiar over time, but there’s a solid way to avoid problems with them:\n" +
                        "\n" +
                        "Treat any comparison with undefined/null except the strict equality === with exceptional care.\n" +
                        "Don’t use comparisons >= > < <= with a variable which may be null/undefined, unless you’re really sure of what you’re doing. If a variable can have these values, check for them separately.",
                "",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Summary",
                "Comparison operators return a boolean value.\n" +
                        "Strings are compared letter-by-letter in the “dictionary” order.\n" +
                        "When values of different types are compared, they get converted to numbers (with the exclusion of a strict equality check).\n" +
                        "The values null and undefined equal == each other and do not equal any other value.\n" +
                        "Be careful when using comparisons like > or < with variables that can occasionally be null/undefined. Checking for null/undefined separately is a good idea.",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);

        return list;
    }

    //Conditionals
    private static List<LearnDetailsModel> Conditionals() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Conditionals",
                "Conditional statements are used to perform different actions based on different conditions.\n" +
                        "The condition always returns a boolean as the final result. So you can have mathematical comparisons, checks and anything else you want in there, as long as it evaluates to a boolean." +
                        "\n" +
                        "Conditional Statements" +
                        "\n\n" +
                        "Very often when you write code, you want to perform different actions for different decisions.\n" +
                        "\n" +
                        "You can use conditional statements in your code to do this.\n" +
                        "\n" +
                        "In JavaScript we have the following conditional statements:\n" +
                        "\n" +
                        "Use if to specify a block of code to be executed, if a specified condition is true\n" +
                        "Use else to specify a block of code to be executed, if the same condition is false\n" +
                        "Use else if to specify a new condition to test, if the first condition is false\n" +
                        "Use switch to specify many alternative blocks of code to be executed",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "The “if” statement",
                "The if(...) statement evaluates a condition in parentheses and, if the result is true, executes a block of code." +
                        "\n" +
                        "If we want to execute more than one statement, we have to wrap our code block inside curly braces." +
                        "\n" +
                        "We recommend wrapping your code block with curly braces {} every time you use an if statement, even if there is only one statement to execute. Doing so improves readability.",
                "if (year == 2021) {\n" +
                        " document.write( \"That's correct! \" );\n" +
                        " document.write( \"You're so smart!\" );\n" +
                        "}",
                "That's correct! You're so smart!"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "The “else” clause",
                "The if statement may contain an optional “else” block. It executes when the condition is false.",
                "let year = prompt('Anne, In which year were you born?', '2000');\n" +
                        "\n" +
                        "if (year == 2000) {\n" +
                        "  document.write( 'You guessed it right!' );\n" +
                        "} else {\n" +
                        "  document.write( 'How can you be so wrong?' );\n" +
                        "}",
                "You guessed it right!"
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Several conditions: “else if”",
                "Sometimes, we’d like to test several variants of a condition. The else if clause lets us do that. If first condition is false execute 2nd and so on.",
                "let year = prompt('Anne, In which year were you born?', '1998');\n" +
                        "\n" +
                        "if (year < 2000) {\n" +
                        "  document.write( 'Too early...' );\n" +
                        "} else if (year > 2000) {\n" +
                        "  document.write( 'Too late' );\n" +
                        "} else {\n" +
                        "  document.write( 'Exactly!' );\n" +
                        "}",
                "Too early..."
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "“switch” Statement",
                "The switch statement is used to perform different actions based on different conditions." +
                        "\n" +
                        "Use the switch statement to select one of many code blocks to be executed." +
                        "\n" +
                        "This is how it works:\n" +
                        "\n" +
                        "The switch expression is evaluated once.\n" +
                        "The value of the expression is compared with the values of each case.\n" +
                        "If there is a match, the associated block of code is executed.\n" +
                        "If there is no match, the default code block is executed.",
                "let guessNumber = prompt('Anne, Please guess a number between 1-10?', '10');;\n" +
                        "switch(guessNumber) {\n" +
                        "  case 4:\n" +
                        "    document.write( 'You guess 4.' );\n" +
                        "    break;\n" +
                        "  case 10:\n" +
                        "    document.write( 'You guess 10.' );\n" +
                        "    break;\n" +
                        "  default:\n" +
                        "    document.write( 'You guess a wrong number.' );\n" +
                        "}",
                "You guess 10."
        );


        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);

        return list;
    }

    //Loops
    private static List<LearnDetailsModel> Loops() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Loops",
                "The JavaScript loops are used to iterate the piece of code using for, while, do while or for-in loops. " +
                        "It makes the code compact. It is mostly used in array.\n" +
                        "\n" +
                        "There are four types of loops in JavaScript.\n" +
                        "\n" +
                        "1. for loop\n" +
                        "2. while loop\n" +
                        "3. do-while loop\n" +
                        "4. for-in loop",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "For Loop",
                "Loops are handy, if you want to run the same code over and over again, each time with a different value." +
                        "The for loop is more complex, but it’s also the most commonly used loop." +
                        "\n" +
                        "Let’s learn the meaning of these parts by example. The loop below runs document.write(i) for i from 0 up to (but not including) 3:",
                "for (let i = 0; i < 3; i++) {\n" +
                        "   document.write(i);\n" +
                        "}",
                "012"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "While Loop",
                "Loops can execute a block of code as long as a specified condition is true." +
                        "The while loop loops through a block of code as long as a specified condition is true." +
                        "While the condition is truthy, the code from the loop body is executed.\n" +
                        "\n" +
                        "For instance, the loop below outputs i while i < 3:",
                "let i = 0;\n" +
                        "while (i < 3) {\n" +
                        "  document.write( i );\n" +
                        "  i++;\n" +
                        "}",
                "012"
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "The “do…while” loop",
                "The do while loop is a variant of the while loop. This loop will execute the code block once, " +
                        "before checking if the condition is true, then it will repeat the loop as long as the condition is true.",
                "let i = 0;\n" +
                        "do {\n" +
                        "  document.write( i );\n" +
                        "  i++;\n" +
                        "} while (i < 3);",
                "012"
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "The for in Loop",
                "The JavaScript for in statement loops through the properties of an Object.",
                "const person = {firstName:\"Anne\", lastName:\"Moore\", age:21}; \n" +
                        "let txt = \"\";\n" +
                        "for (let x in person) {\n" +
                        "  txt += person[x] + \" \";\n" +
                        "}" +
                        "\n" +
                        "document.write(txt);",
                "Anne Moore 21"
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }

    //Functions
    private static List<LearnDetailsModel> Functions() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Functions",
                "Quite often we need to perform a similar action in many places of the script.\n" +
                        "\n" +
                        "For example, we need to show a nice-looking message when a visitor logs in, logs out and maybe somewhere else.\n" +
                        "\n" +
                        "Functions are the main “building blocks” of the program. They allow the code to be called many times without repetition.\n" +
                        "\n" +
                        "We’ve already seen examples of built-in functions, like alert(message), prompt(message, default) and confirm(question). " +
                        "But we can create functions of our own as well." +
                        "\n\n" +
                        "To create a function we can use a function declaration.\n" +
                        "\n" +
                        "It looks like this:" +
                        "\n" +
                        "The function keyword goes first, then goes the name of the function, then a list of parameters between the parentheses " +
                        "(comma-separated, empty in the example above, we’ll see examples later) and finally the code of the function, also named " +
                        "“the function body”, between curly braces.\n" +
                        "\n",
                "function showMessage() {\n" +
                        "  document.write( 'Hello everyone!' );\n" +
                        "}\n" +
                        "\n" +
                        "showMessage();\n" +
                        "showMessage();",
                "Hello everyone!\n" +
                        "Hello everyone!"
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Naming a function",
                "Functions are actions. So their name is usually a verb. It should be brief, as accurate as possible and describe what the function does, so that someone reading the code gets an indication of what the function does.\n" +
                        "\n" +
                        "It is a widespread practice to start a function with a verbal prefix which vaguely describes the action. There must be an agreement within the team on the meaning of the prefixes.\n" +
                        "\n" +
                        "For instance, functions that start with \"show\" usually show something.\n" +
                        "\n" +
                        "Function starting with…\n" +
                        "\n" +
                        "\"get…\" – return a value,\n" +
                        "\"calc…\" – calculate something,\n" +
                        "\"create…\" – create something,\n" +
                        "\"check…\" – check something and return a boolean, etc.\n" +
                        "Examples of such names:\n" +
                        "\n",
                "showMessage(..)  // shows a message\n" +
                        "getAge(..)  // returns the age (gets it somehow)\n" +
                        "calcSum(..)  // calculates a sum and returns the result\n" +
                        "createForm(..)  // creates a form (and usually returns it)\n" +
                        "checkPermission(..)  // checks a permission, returns true/false",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Summary",
                "To make the code clean and easy to understand, it’s recommended to use mainly local variables and parameters in the function, not outer variables." +
                        "\n" +
                        "Values passed to a function as parameters are copied to its local variables.\n" +
                        "A function may access outer variables. But it works only from inside out. The code outside of the function doesn’t see its local variables.\n" +
                        "A function can return a value. If it doesn’t, then its result is undefined." +
                        "\n" +
                        "It is always easier to understand a function which gets parameters, works with them and returns a result than a function which gets no parameters, but modifies outer variables as a side-effect.\n" +
                        "\n" +
                        "Function naming:\n" +
                        "\n" +
                        "A name should clearly describe what the function does. When we see a function call in the code, a good name instantly gives us an understanding what it does and returns.\n" +
                        "A function is an action, so function names are usually verbal.\n" +
                        "There exist many well-known function prefixes like create…, show…, get…, check… and so on. Use them to hint what a function does.\n" +
                        "Functions are the main building blocks of scripts. Now we’ve covered the basics, so we actually can start creating and " +
                        "using them. But that’s only the beginning of the path. We are going to return to them many times, going more deeply " +
                        "into their advanced features.",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //Arrow functions
    private static List<LearnDetailsModel> ArrowFunctions() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Arrow functions, the basics",
                "There’s another very simple and concise syntax for creating functions, that’s often better than Function Expressions." +
                        "\n\n" +
                        "This creates a function func that accepts arguments arg1..argN, then evaluates the expression on the right " +
                        "side with their use and returns its result." +
                        "It’s called “arrow functions”, because it looks like this:",
                "let func = (arg1, arg2, ..., argN) => expression;",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Multiline arrow functions",
                "The examples previous took arguments from the left of => and evaluated the right-side expression with them.\n" +
                        "\n" +
                        "Sometimes we need something a little bit more complex, like multiple expressions or statements. " +
                        "It is also possible, but we should enclose them in curly braces. Then use a normal return within them.\n" +
                        "\n" +
                        "Like this:" +
                        "\n" +
                        "Note:  // if we use curly braces, then we need an explicit \"return\"",
                "let sum = (a, b) => {\n" +
                        "  let result = a + b;\n" +
                        "  return result;\n" +
                        "};\n" +
                        "\n" +
                        "document.write( sum(1, 2) );",
                "3"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Summary",
                "Anne, finished the fundamental and now she started to learn JavaScript Basic.\n\n" +
                        "Arrow functions are handy for one-liners. They come in two flavors:\n" +
                        "\n" +
                        "1. Without curly braces: (...args) => expression – the right side is an expression: the function evaluates it and returns the result.\n\n" +
                        "2. With curly braces: (...args) => { body } – brackets allow us to write multiple statements inside the function, but we need an explicit return to return something.",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //Basics
    //Introduction
    private static List<LearnDetailsModel> BasicIntroduction() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Learn JScript Tutorial",
                "Anne, started to learn basic of JavaScript.\n\n" +
                        "Our JScript tutorial is designed for beginners and professionals both." +
                        "JavaScript is used to create client-side dynamic pages." +
                        "JavaScript is an object-based scripting language which is lightweight and cross-platform." +
                        "JavaScript is not a compiled language, but it is a translated language. The JavaScript Translator (embedded in the browser) " +
                        "is responsible for translating the JavaScript code for the web browser.\n" +
                        "\n" +
                        "It is complimentary to and integrated with Java. JavaScript is very easy to implement because it is integrated with HTML." +
                        "\n" +
                        "It turns static HTML web pages into interactive web pages by dynamically updating content, validating form data, " +
                        "controlling multimedia, animate images, and almost everything else on the web pages." +
                        "\n\n" +
                        "These tutorials will help you learn JavaScript step by step starting from the basics to an advanced level. " +
                        "These tutorials are broken down into sections where each section contains a number of related topics that are packed with " +
                        "easy to understand explanations, real-world examples, tips, notes and useful references.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "What is JavaScript?",
                "JavaScript (js) is a lightweight object-oriented programming language that is used by several websites for scripting the webpages. " +
                        "It is an interpreted, full-fledged programming language that enables dynamic interactivity on websites when applied to an " +
                        "HTML document. It was introduced in the year 1995 for adding programs to the webpages in the Netscape Navigator browser. " +
                        "Since then, it has been adopted by all other graphical web browsers. With JavaScript, users can build modern web applications " +
                        "to interact directly without reloading the page every time. The traditional website uses js to provide several forms of " +
                        "interactivity and simplicity." +
                        "\n\n" +
                        "Although, JavaScript has no connectivity with the Java programming language. The name was suggested and provided in the times " +
                        "when Java was gaining popularity in the market. In addition to web browsers, databases such as CouchDB and MongoDB uses " +
                        "JavaScript as their scripting and query language." +
                        "\n\n" +
                        "JavaScript is the third most important web technology after HTML and CSS. JavaScript can be used to create " +
                        "web and mobile applications, build web servers, create games, etc." +
                        "\n\n" +
                        "JavaScript was first known as LiveScript, but Netscape changed its name to JavaScript, possibly because of " +
                        "the excitement being generated by Java. JavaScript made its first appearance in Netscape 2.0 in 1995 with the name LiveScript. " +
                        "The general-purpose core of the language has been embedded in Netscape, Internet Explorer, and other web browsers.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Why to Learn Javascript?",
                "Javascript is a MUST for students and working professionals to become a great Software Engineer specially when they are " +
                        "working in Web Development Domain. I will list down some of the key advantages of learning Javascript:" +
                        "\n\n" +
                        "1. Javascript is the most popular programming language in the world and that makes it a programmer’s great choice. Once you learnt Javascript, " +
                        "it helps you developing great front-end as well as back-end software using different Javascript based frameworks like jQuery, Node.JS etc." +
                        "\n\n" +
                        "2. Javascript is everywhere, it comes installed on every modern web browser and so to learn Javascript you really do not need any special environment setup. For example Chrome, Mozilla Firefox , Safari and every browser you know as of today, supports Javascript." +
                        "\n\n" +
                        "3. Javascript helps you create really beautiful and crazy fast websites. You can develop your website with a console like look and feel and give your users the best Graphical User Experience." +
                        "\n\n" +
                        "4. JavaScript usage has now extended to mobile app development, desktop app development, and game development. This opens many opportunities for you as Javascript Programmer." +
                        "\n\n" +
                        "5. Due to high demand, there is tons of job growth and high pay for those who know JavaScript. You can navigate over to different job sites to see what having JavaScript skills looks like in the job market." +
                        "\n\n" +
                        "6. Great thing about Javascript is that you will find tons of frameworks and Libraries already developed which can be used directly in your software development to reduce your time to market.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Applications of Javascript Programming",
                "As mentioned before, Javascript is one of the most widely used programming languages (Front-end as well as Back-end). " +
                        "It has it's presence in almost every area of software development. I'm going to list few of them here:" +
                        "\n\n" +
                        "1. Client side validation - This is really important to verify any user input before submitting it to the server and Javascript plays an important role in validating those inputs at front-end itself." +
                        "\n\n" +
                        "2. Manipulating HTML Pages - Javascript helps in manipulating HTML page on the fly. This helps in adding and deleting any HTML tag very easily using javascript and modify your HTML to change its look and feel based on different devices and requirements." +
                        "\n\n" +
                        "3. User Notifications - You can use Javascript to raise dynamic pop-ups on the webpages to give different types of notifications to your website visitors." +
                        "\n\n" +
                        "4. Back-end Data Loading - Javascript provides Ajax library which helps in loading back-end data while you are doing some other processing. This really gives an amazing experience to your website visitors." +
                        "\n\n" +
                        "5. Presentations - JavaScript also provides the facility of creating presentations which gives website look and feel. JavaScript provides RevealJS and BespokeJS libraries to build a web-based slide presentations." +
                        "\n\n" +
                        "6. Server Applications - Node JS is built on Chrome's Javascript runtime for building fast and scalable network applications. This is an event based library which helps in developing very sophisticated server applications including Web Servers." +
                        "\n\n" +
                        "This list goes on, there are various areas where millions of software developers are happily using Javascript to develop great websites and others software.",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Advantages of JavaScript",
                "The merits of using JavaScript are −" +
                        "\n\n" +
                        "1. Less server interaction − You can validate user input before sending the page off to the server. This saves server traffic, which means less load on your server." +
                        "\n\n" +
                        "2. Immediate feedback to the visitors − They don't have to wait for a page reload to see if they have forgotten to enter something." +
                        "\n\n" +
                        "3. Increased interactivity − You can create interfaces that react when the user hovers over them with a mouse or activates them via the keyboard." +
                        "\n\n" +
                        "4. Richer interfaces − You can use JavaScript to include such items as drag-and-drop components and sliders to give a Rich Interface to your site visitors." +
                        "\n\n" +
                        "Limitations of JavaScript" +
                        "\n\n" +
                        "We cannot treat JavaScript as a full-fledged programming language. It lacks the following important features −" +
                        "\n\n" +
                        "1. Client-side JavaScript does not allow the reading or writing of files. This has been kept for security reason." +
                        "\n\n" +
                        "2. JavaScript cannot be used for networking applications because there is no such support available." +
                        "\n\n" +
                        "3. JavaScript doesn't have any multi-threading or multiprocessor capabilities." +
                        "\n\n" +
                        "Once again, JavaScript is a lightweight, interpreted programming language that allows you to build interactivity into otherwise static HTML pages.",
                "",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Where is JavaScript Today ?",
                "The ECMAScript Edition 5 standard will be the first update to be released in over four years. JavaScript 2.0 conforms to Edition 5 of the ECMAScript standard, and the difference between the two is extremely minor.\n" +
                        "\n" +
                        "The specification for JavaScript 2.0 can be found on the following site: http://www.ecmascript.org/\n" +
                        "\n" +
                        "Today, Netscape's JavaScript and Microsoft's JScript conform to the ECMAScript standard, although both the languages still support the features that are not a part of the standard.",
                "",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Audience",
                "This tutorial has been prepared for JavaScript beginners and professionals to help them understand the basic and advanced functionality of JavaScript to build dynamic web pages and web applications.",
                "",
                ""
        );
        final LearnDetailsModel l8 = new LearnDetailsModel(
                "Prerequisites",
                "For this Javascript tutorial, it is assumed that the reader have a prior knowledge of HTML coding. It would help if the reader had some prior exposure to object-oriented programming concepts and a general idea on creating online applications.",
                "",
                ""
        );


        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        list.add(l8);
        return list;
    }

    //Syntax
    private static List<LearnDetailsModel> Syntax() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "JavaScript Syntax",
                "JavaScript syntax is the set of rules, how JavaScript programs are constructed." +
                        "\n\n" +
                        "JavaScript Values:" +
                        "\n\n" +
                        "The JavaScript syntax defines two types of values:\n" +
                        "\n" +
                        "Fixed values\n" +
                        "Variable values\n" +
                        "Fixed values are called Literals.\n" +
                        "\n" +
                        "Variable values are called Variables.",

                "var x;\n" +
                        "let y;\n" +
                        "\n" +
                        "x = 4;\n" +
                        "y = 6;\n\n" +
                        "let z = x + y;\n" +
                        "document.write(z);",
                "10"
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "JavaScript Literals",
                "The two most important syntax rules for fixed values are:\n" +
                        "\n" +
                        "1. Numbers are written with or without decimals" +
                        "\n" +
                        "2. Strings are text, written within double or single quotes",

                "\n" +
                        "var x = 10.5\n" +
                        "var y = 1024\n\n" +
                        "var firstName = \"Anne\"\n" +
                        "var lastName = 'Moore'\n\n" +
                        "document.write(x + y);\n" +
                        "document.write(lastName);",
                "1034.5\n" +
                        "Moore"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "JavaScript Variables",
                "In a programming language, variables are used to store data values.\n" +
                        "\n" +
                        "JavaScript uses the keywords var, let and const to declare variables.\n" +
                        "\n" +
                        "An equal sign is used to assign values to variables.\n" +
                        "\n" +
                        "In this example, x is defined as a variable. Then, x is assigned (given) the value 10",
                "var x;\n" +
                        "x = 10;\n\n" +
                        "document.write(x);",
                "10"
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);

        return list;
    }

    //Enabling
    private static List<LearnDetailsModel> Enabling() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Enabling JavaScript in Browsers",
                "All the modern browsers come with built-in support for JavaScript. Frequently, you may need to enable or disable " +
                        "this support manually. This chapter explains the procedure of enabling and disabling JavaScript support in your " +
                        "browsers: Internet Explorer, Firefox, chrome, and Opera.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "JavaScript in Internet Explorer",
                "Here are simple steps to turn on or turn off JavaScript in your Internet Explorer −\n" +
                        "\n" +
                        "Follow Tools → Internet Options from the menu.\n" +
                        "\n" +
                        "Select Security tab from the dialog box.\n" +
                        "\n" +
                        "Click the Custom Level button.\n" +
                        "\n" +
                        "Scroll down till you find Scripting option.\n" +
                        "\n" +
                        "Select Enable radio button under Active scripting.\n" +
                        "\n" +
                        "Finally click OK and come out\n" +
                        "\n" +
                        "To disable JavaScript support in your Internet Explorer, you need to select Disable radio button under Active scripting.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "JavaScript in Firefox",
                "Here are the steps to turn on or turn off JavaScript in Firefox −\n" +
                        "\n" +
                        "Open a new tab → type about: config in the address bar.\n" +
                        "\n" +
                        "Then you will find the warning dialog. Select I’ll be careful, I promise!\n" +
                        "\n" +
                        "Then you will find the list of configure options in the browser.\n" +
                        "\n" +
                        "In the search bar, type javascript.enabled.\n" +
                        "\n" +
                        "There you will find the option to enable or disable javascript by right-clicking on the value of that option → select toggle.\n" +
                        "\n" +
                        "If javascript.enabled is true; it converts to false upon clicking toogle. If javascript is disabled; it gets enabled upon clicking toggle.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "JavaScript in Chrome",
                "Here are the steps to turn on or turn off JavaScript in Chrome −\n" +
                        "\n" +
                        "Click the Chrome menu at the top right hand corner of your browser.\n" +
                        "\n" +
                        "Select Settings.\n" +
                        "\n" +
                        "Click Show advanced settings at the end of the page.\n" +
                        "\n" +
                        "Under the Privacy section, click the Content settings button.\n" +
                        "\n" +
                        "In the \"Javascript\" section, select \"Do not allow any site to run JavaScript\" or \"Allow all sites to run JavaScript (recommended)\".",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "JavaScript in Opera",
                "Here are the steps to turn on or turn off JavaScript in Opera −\n" +
                        "\n" +
                        "Follow Tools → Preferences from the menu.\n" +
                        "\n" +
                        "Select Advanced option from the dialog box.\n" +
                        "\n" +
                        "Select Content from the listed items.\n" +
                        "\n" +
                        "Select Enable JavaScript checkbox.\n" +
                        "\n" +
                        "Finally click OK and come out.\n" +
                        "\n" +
                        "To disable JavaScript support in your Opera, you should not select the Enable JavaScript checkbox.",
                "",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Warning for Non-JavaScript Browsers",
                "If you have to do something important using JavaScript, then you can display a warning message to the user using <noscript> tags.\n" +
                        "\n" +
                        "You can add a noscript block immediately after the script block as follows −" +
                        "\n\n" +
                        "Now, if the user's browser does not support JavaScript or JavaScript is not enabled, then the message from </noscript> will be displayed on the screen.",
                "<html>\n" +
                        "   <body>\n" +
                        "      <script language = \"javascript\" type = \"text/javascript\">\n" +
                        "         <!--\n" +
                        "            document.write(\"Hello World!\")\n" +
                        "         //-->\n" +
                        "      </script>\n" +
                        "      \n" +
                        "      <noscript>\n" +
                        "         Sorry...JavaScript is needed to go ahead.\n" +
                        "      </noscript>      \n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        return list;
    }

    //Placement
    private static List<LearnDetailsModel> Placement() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "JavaScript - Placement in HTML File",
                "There is a flexibility given to include JavaScript code anywhere in an HTML document. However the most preferred ways to include JavaScript in an HTML file are as follows −\n" +
                        "\n" +
                        "Script in <head>...</head> section.\n" +
                        "\n" +
                        "Script in <body>...</body> section.\n" +
                        "\n" +
                        "Script in <body>...</body> and <head>...</head> sections.\n" +
                        "\n" +
                        "Script in an external file and then include in <head>...</head> section.\n" +
                        "\n" +
                        "In the following section, we will see how we can place JavaScript in an HTML file in different ways.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "JavaScript in <head>...</head> section",
                "If you want to have a script run on some event, such as when a user clicks somewhere, then you will place that script in the head as follows −",
                "<html>\n" +
                        "   <head>      \n" +
                        "      <script type = \"text/javascript\">\n" +
                        "            function sayHello() {\n" +
                        "               document.write(\"Hello World!\")\n" +
                        "            }\n" +
                        "      </script>     \n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>\n" +
                        "      <input type = \"button\" onclick = \"sayHello()\" value = \"Say Hello\" />\n" +
                        "   </body>  \n" +
                        "</html>",
                "Hello World!"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "JavaScript in <body>...</body> section",
                "If you need a script to run as the page loads so that the script generates content in the page, then the script goes in the <body> portion of the document. In this case, you would not have any function defined using JavaScript. Take a look at the following code.",
                "<html>\n" +
                        "   <head>\n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "            document.write(\"Hello World\")\n" +
                        "      </script>\n" +
                        "      \n" +
                        "      <p>This is web page body </p>\n" +
                        "   </body>\n" +
                        "</html>",
                "Hello World\n" +
                        "This is web page body"
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "JavaScript in <body> and <head> Sections",
                "You can put your JavaScript code in <head> and <body> section altogether as follows −",
                "<html>\n" +
                        "   <head>\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "            function sayHello() {\n" +
                        "               alert(\"Hello World\")\n" +
                        "            }\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "            document.write(\"Hello World\")\n" +
                        "      </script>\n" +
                        "      \n" +
                        "      <input type = \"button\" onclick = \"sayHello()\" value = \"Say Hello\" />\n" +
                        "   </body>\n" +
                        "</html>",
                "Hello World\n" +
                        "Hello World"
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "JavaScript in External File",
                "As you begin to work more extensively with JavaScript, you will be likely to find that there are cases where you are reusing identical JavaScript code on multiple pages of a site.\n" +
                        "\n" +
                        "You are not restricted to be maintaining identical code in multiple HTML files. The script tag provides a mechanism to allow you to store JavaScript in an external file and then include it into your HTML files.\n" +
                        "\n" +
                        "Here is an example to show how you can include an external JavaScript file in your HTML code using script tag and its src attribute.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <script type = \"text/javascript\" src = \"filename.js\" ></script>\n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>\n" +
                        "      .......\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);

        return list;
    }

    //BasicVariables
    private static List<LearnDetailsModel> BasicVariables() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "JavaScript Variable",
                "A JavaScript variable is simply a name of storage location. Where stored the data." +
                        "\n\n" +
                        "Before you use a variable in a JavaScript program, you must declare it. Variables are declared with the var,let and const keyword as follows." +
                        "3 Ways to Declare a JavaScript Variable:" +
                        "\n\n" +
                        "1. Using var\n" +
                        "2. Using let\n" +
                        "3. Using const\n",
                "<script type = \"text/javascript\">\n" +
                        "   <!--\n" +
                        "      var x;\n" +
                        "      let y;\n" +
                        "      const RED_COLOR;" +
                        "   //-->\n" +
                        "</script>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "JavaScript Variable Scope",
                "The scope of a variable is the region of your program in which it is defined. JavaScript variables have only two scopes.\n" +
                        "\n" +
                        "Global Variables − A global variable has global scope which means it can be defined anywhere in your JavaScript code.\n" +
                        "\n" +
                        "Local Variables − A local variable will be visible only within a function where it is defined. Function parameters are always local to that function.\n" +
                        "\n" +
                        "Within the body of a function, a local variable takes precedence over a global variable with the same name. " +
                        "If you declare a local variable or function parameter with the same name as a global variable, you effectively hide the global variable. " +
                        "Take a look into the following example." +
                        "",
                "<html>\n" +
                        "   <body onload = checkScope();>   \n" +
                        "      <script type = \"text/javascript\">\n" +
                        "            var myVar = \"global\";\n" +
                        "            function checkScope( ) {\n" +
                        "               var myVar = \"local\";\n" +
                        "               document.write(myVar);\n" +
                        "            }\n" +
                        "      </script>     \n" +
                        "   </body>\n" +
                        "</html>",
                "local"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "JavaScript Variable Names",
                "While naming your variables in JavaScript, keep the following rules in mind.\n" +
                        "\n" +
                        "You should not use any of the JavaScript reserved keywords as a variable name. These keywords are mentioned in the next section. For example, break or boolean variable names are not valid.\n" +
                        "\n" +
                        "JavaScript variable names should not start with a numeral (0-9). They must begin with a letter or an underscore character. For example, 123test is an invalid variable name but _123test is a valid one.\n" +
                        "\n" +
                        "JavaScript variable names are case-sensitive. For example, Name and name are two different variables.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);

        return list;
    }

    //Basic Data Types
    private static List<LearnDetailsModel> BasicDataTypes() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Javascript Data Types",
                "JavaScript provides different data types to hold different types of values. There are two types of data types in JavaScript.\n" +
                        "\n" +
                        "Primitive data type\n" +
                        "Non-primitive (reference) data type\n" +
                        "JavaScript is a dynamic type language, means you don't need to specify type of the variable because it " +
                        "is dynamically used by JavaScript engine. You need to use var here to specify the data type. " +
                        "It can hold any type of values such as numbers, strings etc." +
                        "\n\n" +
                        "For example:",
                "var a=24;//holding number  \n" +
                        "var b=\"Anne\";//holding string  ",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "JavaScript primitive data types",
                "There are seven types of primitive data types in JavaScript. They are as follows:" +
                        "\n\n" +
                        "1. string " +
                        "\n//represents sequence of characters e.g. \"hello\"\n" +
                        "2. number " +
                        "\n//represents numeric values e.g. 1024\n" +
                        "3. boolean " +
                        "\n//represents boolean value either false or true\n" +
                        "4. bigint " +
                        "\n//represents a larger value e.g. 1254364594582312546987155n\n" +
                        "5. symbols " +
                        "\n//The symbol type is used to create unique identifiers for objects.\n" +
                        "6. null " +
                        "\n//represents null i.e. no value at all\n" +
                        "7. undefined " +
                        "\n//represents undefined value\n",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "JavaScript non-primitive data types",
                "The non-primitive data types are as follows:" +
                        "\n\n" +
                        "1. Objects" +
                        "\n" +
                        "2. Array" +
                        "\n" +
                        "3. RegExp" +
                        "\n\n" +
                        "We will have great discussion on each data type later.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //Basic Operators
    private static List<LearnDetailsModel> BasicOperators() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is an Operator?",
                "JavaScript operators are symbols that are used to perform operations on operands." +
                        "\n" +
                        "Let us take a simple expression 10 + 4 is equal to 14. Here 10 and 4 are called operands and ‘+’ is called the operator." +
                        "\n" +
                        "There are following types of operators in JavaScript.\n" +
                        "\n" +
                        "Arithmetic Operators\n" +
                        "Comparison (Relational) Operators\n" +
                        "Bitwise Operators\n" +
                        "Logical Operators\n" +
                        "Assignment Operators\n" +
                        "Special Operators",
                "var sum=10+4; ",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Arithmetic Operators",
                "Arithmetic operators are used to perform arithmetic operations on the operands. The following operators are known as JavaScript arithmetic operators." +
                        "Assume variable A holds 30 and variable B holds 10, then" +
                        "\n\n" +
                        "1. + (Addition)" +
                        "\n" +
                        "Adds two operands\n" +
                        "\n" +
                        "Ex: A + B will give 40" +
                        "\n\n" +
                        "2. - (Subtraction)" +
                        "\n" +
                        "Subtracts the second operand from the first\n" +
                        "\n" +
                        "Ex: A - B will give 20" +
                        "\n\n" +
                        "3. * (Multiplication)" +
                        "\n" +
                        "Multiply both operands\n" +
                        "\n" +
                        "Ex: A * B will give 300" +
                        "\n\n" +
                        "4. / (Division)" +
                        "\n" +
                        "Divide the numerator by the denominator\n" +
                        "\n" +
                        "Ex: A / B will give 3" +
                        "\n\n" +
                        "5. % (Modulus)" +
                        "\n" +
                        "Outputs the remainder of an integer division\n" +
                        "\n" +
                        "Ex: A % B will give 0" +
                        "\n\n" +
                        "6. ++ (Increment)" +
                        "\n" +
                        "Increases an integer value by one\n" +
                        "\n" +
                        "Ex: A++ will give 31" +
                        "\n\n" +
                        "7. -- (Decrement)" +
                        "\n" +
                        "Decreases an integer value by one\n" +
                        "\n" +
                        "Ex: B-- will give 9",
                "var a = 40;\n" +
                        "var b = 10;\n" +
                        "var c = \"Test\";\n" +
                        "var linebreak = \"<br />\";\n" +
                        "\n" +
                        "document.write(\"a + b = \");\n" +
                        "result = a + b;\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);\n" +
                        "\n" +
                        "document.write(\"a - b = \");\n" +
                        "result = a - b;\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);\n" +
                        "\n" +
                        "document.write(\"a / b = \");\n" +
                        "result = a / b;\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);\n" +
                        "\n" +
                        "document.write(\"a % b = \");\n" +
                        "result = a % b;\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);\n" +
                        "\n" +
                        "document.write(\"a + b + c = \");\n" +
                        "result = a + b + c;\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);\n" +
                        "\n" +
                        "a = ++a;\n" +
                        "document.write(\"++a = \");\n" +
                        "result = ++a;\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);\n" +
                        "\n" +
                        "b = --b;\n" +
                        "document.write(\"--b = \");\n" +
                        "result = --b;\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);",
                "a + b = 50\n" +
                        "a - b = 30\n" +
                        "a / b = 4\n" +
                        "a % b = 0\n" +
                        "a + b + c = 50Test\n" +
                        "++a = 42\n" +
                        "--b = 8"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Comparison Operators",
                "The JavaScript comparison operator compares the two operands. The comparison operators are as follows:" +
                        "\n" +
                        "Assume variable A holds 10 and variable B holds 20, then −" +
                        "\n\n" +
                        "1. = = (Equal)" +
                        "\n" +
                        "Checks if the value of two operands are equal or not, if yes, then the condition becomes true.\n" +
                        "\n" +
                        "Ex: (A == B) is not true." +
                        "\n\n" +
                        "2. != (Not Equal)" +
                        "\n" +
                        "Checks if the value of two operands are equal or not, if the values are not equal, then the condition becomes true.\n" +
                        "\n" +
                        "Ex: (A != B) is true." +
                        "\n\n" +
                        "3. > (Greater than)" +
                        "\n" +
                        "Checks if the value of the left operand is greater than the value of the right operand, if yes, then the condition becomes true.\n" +
                        "\n" +
                        "Ex: (A > B) is not true." +
                        "\n\n" +
                        "4. < (Less than)" +
                        "\n" +
                        "Checks if the value of the left operand is less than the value of the right operand, if yes, then the condition becomes true.\n" +
                        "\n" +
                        "Ex: (A < B) is true." +
                        "\n\n" +
                        "5. >= (Greater than or Equal to)" +
                        "\n" +
                        "Checks if the value of the left operand is greater than or equal to the value of the right operand, if yes, then the condition becomes true.\n" +
                        "\n" +
                        "Ex: (A >= B) is not true." +
                        "\n\n" +
                        "6. <= (Less than or Equal to)" +
                        "\n" +
                        "Checks if the value of the left operand is less than or equal to the value of the right operand, if yes, then the condition becomes true.\n" +
                        "\n" +
                        "Ex: (A <= B) is true.",
                "var a = 10;\n" +
                        "var b = 20;\n" +
                        "var linebreak = \"<br />\";\n" +
                        "\n" +
                        "document.write(\"(a == b) => \");\n" +
                        "result = (a == b);\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);\n" +
                        "\n" +
                        "document.write(\"(a < b) => \");\n" +
                        "result = (a < b);\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);\n" +
                        "\n" +
                        "document.write(\"(a > b) => \");\n" +
                        "result = (a > b);\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);\n" +
                        "\n" +
                        "document.write(\"(a != b) => \");\n" +
                        "result = (a != b);\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);\n" +
                        "\n" +
                        "document.write(\"(a >= b) => \");\n" +
                        "result = (a >= b);\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);\n" +
                        "\n" +
                        "document.write(\"(a <= b) => \");\n" +
                        "result = (a <= b);\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);",
                "(a == b) => false \n" +
                        "(a < b) => true \n" +
                        "(a > b) => false \n" +
                        "(a != b) => true \n" +
                        "(a >= b) => false \n" +
                        "a <= b) => true"
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Bitwise Operators",
                "The bitwise operators perform bitwise operations on operands. The bitwise operators are as follows:" +
                        "\n" +
                        "Assume variable A holds 2 and variable B holds 3, then −" +
                        "\n\n" +
                        "1. & (Bitwise AND)" +
                        "\n" +
                        "It performs a Boolean AND operation on each bit of its integer arguments.\n" +
                        "\n" +
                        "Ex: (A & B) is 2." +
                        "\n\n" +
                        "2. | (BitWise OR)" +
                        "\n" +
                        "It performs a Boolean OR operation on each bit of its integer arguments.\n" +
                        "\n" +
                        "Ex: (A | B) is 3." +
                        "\n\n" +
                        "3. ^ (Bitwise XOR)" +
                        "\n" +
                        "It performs a Boolean exclusive OR operation on each bit of its integer arguments. Exclusive OR means that either operand one is true or operand two is true, but not both.\n" +
                        "\n" +
                        "Ex: (A ^ B) is 1." +
                        "\n\n" +
                        "4. ~ (Bitwise Not)" +
                        "\n" +
                        "It is a unary operator and operates by reversing all the bits in the operand.\n" +
                        "\n" +
                        "Ex: (~B) is -4." +
                        "\n\n" +
                        "5. << (Left Shift)" +
                        "\n" +
                        "It moves all the bits in its first operand to the left by the number of places specified in the second operand. New bits are filled with zeros. Shifting a value left by one position is equivalent to multiplying it by 2, shifting two positions is equivalent to multiplying by 4, and so on.\n" +
                        "\n" +
                        "Ex: (A << 1) is 4." +
                        "\n\n" +
                        "6. >> (Right Shift)" +
                        "\n" +
                        "Binary Right Shift Operator. The left operand’s value is moved right by the number of bits specified by the right operand.\n" +
                        "\n" +
                        "Ex: (A >> 1) is 1." +
                        "\n\n" +
                        "7. >>> (Right shift with Zero)" +
                        "\n" +
                        "This operator is just like the >> operator, except that the bits shifted in on the left are always zero.\n" +
                        "\n" +
                        "Ex: (A >>> 1) is 1.",
                "var a = 2; // Bit presentation 10\n" +
                        "var b = 3; // Bit presentation 11\n" +
                        "var linebreak = \"<br />\";\n" +
                        "\n" +
                        "document.write(\"(a & b) => \");\n" +
                        "result = (a & b);\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);\n" +
                        "\n" +
                        "document.write(\"(a | b) => \");\n" +
                        "result = (a | b);\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);\n" +
                        "\n" +
                        "document.write(\"(a ^ b) => \");\n" +
                        "result = (a ^ b);\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);\n" +
                        "\n" +
                        "document.write(\"(~b) => \");\n" +
                        "result = (~b);\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);\n" +
                        "\n" +
                        "document.write(\"(a << b) => \");\n" +
                        "result = (a << b);\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);\n" +
                        "\n" +
                        "document.write(\"(a >> b) => \");\n" +
                        "result = (a >> b);\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);",
                "(a & b) => 2 \n" +
                        "(a | b) => 3 \n" +
                        "(a ^ b) => 1 \n" +
                        "(~b) => -4 \n" +
                        "(a << b) => 16 \n" +
                        "(a >> b) => 0"
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Logical Operators",
                "JavaScript supports the following logical operators −\n" +
                        "\n" +
                        "Assume variable A holds 10 and variable B holds 20, then −" +
                        "\n\n" +
                        "1. && (Logical AND)" +
                        "\n" +
                        "If both the operands are non-zero, then the condition becomes true.\n" +
                        "\n" +
                        "Ex: (A && B) is true." +
                        "\n\n" +
                        "2. || (Logical OR)" +
                        "\n" +
                        "If any of the two operands are non-zero, then the condition becomes true.\n" +
                        "\n" +
                        "Ex: (A || B) is true." +
                        "\n\n" +
                        "3. ! (Logical NOT)" +
                        "\n" +
                        "Reverses the logical state of its operand. If a condition is true, then the Logical NOT operator will make it false.\n" +
                        "\n" +
                        "Ex: ! (A && B) is false.",
                "var a = true;\n" +
                        "var b = false;\n" +
                        "var linebreak = \"<br />\";\n" +
                        "\n" +
                        "document.write(\"(a && b) => \");\n" +
                        "result = (a && b);\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);\n" +
                        "\n" +
                        "document.write(\"(a || b) => \");\n" +
                        "result = (a || b);\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);\n" +
                        "\n" +
                        "document.write(\"!(a && b) => \");\n" +
                        "result = (!(a && b));\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);",
                "(a && b) => false \n" +
                        "(a || b) => true \n" +
                        "!(a && b) => true"
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Assignment Operators",
                "JavaScript supports the following assignment operators:" +
                        "\n\n" +
                        "1. = (Simple Assignment )" +
                        "\n" +
                        "Assigns values from the right side operand to the left side operand\n" +
                        "\n" +
                        "Ex: C = A + B will assign the value of A + B into C" +
                        "\n\n" +
                        "2. += (Add and Assignment)" +
                        "\n" +
                        "It adds the right operand to the left operand and assigns the result to the left operand.\n" +
                        "\n" +
                        "Ex: C += A is equivalent to C = C + A" +
                        "\n\n" +
                        "3. −= (Subtract and Assignment)" +
                        "\n" +
                        "It subtracts the right operand from the left operand and assigns the result to the left operand.\n" +
                        "\n" +
                        "Ex: C -= A is equivalent to C = C - A" +
                        "\n\n" +
                        "4. *= (Multiply and Assignment)" +
                        "\n" +
                        "It multiplies the right operand with the left operand and assigns the result to the left operand.\n" +
                        "\n" +
                        "Ex: C *= A is equivalent to C = C * A" +
                        "\n\n" +
                        "5. /= (Divide and Assignment)" +
                        "\n" +
                        "It divides the left operand with the right operand and assigns the result to the left operand.\n" +
                        "\n" +
                        "Ex: C /= A is equivalent to C = C / A" +
                        "\n\n" +
                        "6. %= (Modules and Assignment)" +
                        "\n" +
                        "It takes modulus using two operands and assigns the result to the left operand.\n" +
                        "\n" +
                        "Ex: C %= A is equivalent to C = C % A",
                "var a = 33;\n" +
                        "var b = 10;\n" +
                        "var linebreak = \"<br />\";\n" +
                        "\n" +
                        "document.write(\"Value of a => (a = b) => \");\n" +
                        "result = (a = b);\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);\n" +
                        "\n" +
                        "document.write(\"Value of a => (a += b) => \");\n" +
                        "result = (a += b);\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);\n" +
                        "\n" +
                        "document.write(\"Value of a => (a -= b) => \");\n" +
                        "result = (a -= b);\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);\n" +
                        "\n" +
                        "document.write(\"Value of a => (a *= b) => \");\n" +
                        "result = (a *= b);\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);\n" +
                        "\n" +
                        "document.write(\"Value of a => (a /= b) => \");\n" +
                        "result = (a /= b);\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);\n" +
                        "\n" +
                        "document.write(\"Value of a => (a %= b) => \");\n" +
                        "result = (a %= b);\n" +
                        "document.write(result);\n" +
                        "document.write(linebreak);",
                "Value of a => (a = b) => 10\n" +
                        "Value of a => (a += b) => 20 \n" +
                        "Value of a => (a -= b) => 10 \n" +
                        "Value of a => (a *= b) => 100 \n" +
                        "Value of a => (a /= b) => 10\n" +
                        "Value of a => (a %= b) => 0"
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);

        return list;
    }

    //Basic Conditions
    private static List<LearnDetailsModel> BasicConditions() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Basic Conditions",
                "Conditional statements are used to perform different actions based on different conditions.\n" +
                        "The condition always returns a boolean as the final result. So you can have mathematical comparisons, checks and anything else you want in there, as long as it evaluates to a boolean." +
                        "\n" +
                        "Conditional Statements" +
                        "\n\n" +
                        "Very often when you write code, you want to perform different actions for different decisions.\n" +
                        "\n" +
                        "You can use conditional statements in your code to do this.\n" +
                        "\n" +
                        "In JavaScript we have the following conditional statements:\n" +
                        "\n" +
                        "Use if to specify a block of code to be executed, if a specified condition is true\n" +
                        "Use else to specify a block of code to be executed, if the same condition is false\n" +
                        "Use else if to specify a new condition to test, if the first condition is false",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "The “if” statement",
                "The if(...) statement evaluates a condition in parentheses and, if the result is true, executes a block of code." +
                        "\n" +
                        "If we want to execute more than one statement, we have to wrap our code block inside curly braces." +
                        "\n" +
                        "We recommend wrapping your code block with curly braces {} every time you use an if statement, even if there is only one statement to execute. Doing so improves readability.",
                "if (year == 2021) {\n" +
                        " document.write( \"That's correct! \" );\n" +
                        " document.write( \"You're so smart!\" );\n" +
                        "}",
                "That's correct! You're so smart!"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "The “else” clause",
                "The if statement may contain an optional “else” block. It executes when the condition is false.",
                "let year = prompt('Anne, In which year were you born?', '2000');\n" +
                        "\n" +
                        "if (year == 2000) {\n" +
                        "  document.write( 'You guessed it right!' );\n" +
                        "} else {\n" +
                        "  document.write( 'How can you be so wrong?' );\n" +
                        "}",
                "You guessed it right!"
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Several conditions: “else if”",
                "Sometimes, we’d like to test several variants of a condition. The else if clause lets us do that. If first condition is false execute 2nd and so on.",
                "let year = prompt('Anne, In which year were you born?', '1998');\n" +
                        "\n" +
                        "if (year < 2000) {\n" +
                        "  document.write( 'Too early...' );\n" +
                        "} else if (year > 2000) {\n" +
                        "  document.write( 'Too late' );\n" +
                        "} else {\n" +
                        "  document.write( 'Exactly!' );\n" +
                        "}",
                "Too early..."
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);

        return list;
    }

    //Switch
    private static List<LearnDetailsModel> Switch() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Switch Case",
                "You can use multiple if...else…if statements, as in the previous chapter, to perform a multiway branch. However, this is not always the best solution, especially when all of the branches depend on the value of a single variable.\n" +
                        "\n" +
                        "Starting with JavaScript 1.2, you can use a switch statement which handles exactly this situation, and it does so more efficiently than repeated if...else if statements." +
                        "\n\n" +
                        "Syntax:" +
                        "\n\n" +
                        "The objective of a switch statement is to give an expression to evaluate and several different statements to execute based on the value of the expression. The interpreter checks each case against the value of the expression until a match is found. If nothing matches, a default condition will be used." +
                        "\n\n" +
                        "switch (expression) {\n" +
                        "   case condition 1: statement(s)\n" +
                        "   break;\n" +
                        "   \n" +
                        "   case condition 2: statement(s)\n" +
                        "   break;\n" +
                        "   ...\n" +
                        "   \n" +
                        "   case condition n: statement(s)\n" +
                        "   break;\n" +
                        "   \n" +
                        "   default: statement(s)\n" +
                        "}",
                "switch(expression){  \n" +
                        "case value1:  \n" +
                        " code to be executed;  \n" +
                        " break;  \n" +
                        "case value2:  \n" +
                        " code to be executed;  \n" +
                        " break;  \n" +
                        "......  \n" +
                        "  \n" +
                        "default:   \n" +
                        " code to be executed if above values are not matched;  \n" +
                        "}  ",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Syntax",
                "The objective of a switch statement is to give an expression to evaluate and several different statements to execute based on the " +
                        "value of the expression. The interpreter checks each case against the value of the expression until a match is found. " +
                        "If nothing matches, a default condition will be used." +
                        "\n\n" +
                        "The break statements indicate the end of a particular case. If they were omitted, the interpreter would continue executing each statement in each of the following cases.\n" +
                        "\n" +
                        "We will explain break statement in Loop Control chapter." +
                        "\n\n" +
                        "switch (expression) {\n" +
                        "   case condition 1: statement(s)\n" +
                        "   break;\n" +
                        "   \n" +
                        "   case condition 2: statement(s)\n" +
                        "   break;\n" +
                        "   ...\n" +
                        "   \n" +
                        "   case condition n: statement(s)\n" +
                        "   break;\n" +
                        "   \n" +
                        "   default: statement(s)\n" +
                        "}",
                "var grade = 'A';\n" +
                        "document.write(\"Entering switch block<br />\");\n" +
                        "switch (grade) {\n" +
                        "case 'A': document.write(\"Good job<br />\");\n" +
                        "break;\n" +
                        "\n" +
                        "case 'B': document.write(\"Pretty good<br />\");\n" +
                        "break;\n" +
                        "\n" +
                        "case 'C': document.write(\"Passed<br />\");\n" +
                        "break;\n" +
                        "\n" +
                        "case 'D': document.write(\"Not so good<br />\");\n" +
                        "break;\n" +
                        "\n" +
                        "case 'F': document.write(\"Failed<br />\");\n" +
                        "break;\n" +
                        "\n" +
                        "default:  document.write(\"Unknown grade<br />\")\n" +
                        "}\n" +
                        "document.write(\"Exiting switch block\");",
                "Entering switch block\n" +
                        "Good job\n" +
                        "Exiting switch block"
        );

        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Without break",
                "Break statements play a major role in switch-case statements. Try the following code that uses switch-case statement without any break statement.",
                "var grade = 'A';\n" +
                        "document.write(\"Entering switch block<br />\");\n" +
                        "switch (grade) {\n" +
                        "case 'A': document.write(\"Good job<br />\");\n" +
                        "case 'B': document.write(\"Pretty good<br />\");\n" +
                        "case 'C': document.write(\"Passed<br />\");\n" +
                        "case 'D': document.write(\"Not so good<br />\");\n" +
                        "case 'F': document.write(\"Failed<br />\");\n" +
                        "default: document.write(\"Unknown grade<br />\")\n" +
                        "}\n" +
                        "document.write(\"Exiting switch block\");",
                "Entering switch block\n" +
                        "Good job\n" +
                        "Pretty good\n" +
                        "Passed\n" +
                        "Not so good\n" +
                        "Failed\n" +
                        "Unknown grade\n" +
                        "Exiting switch block"
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);

        return list;
    }

    //Basic Loops
    private static List<LearnDetailsModel> BasicLoops() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "JavaScript Loops",
                "The JavaScript loops are used to iterate the piece of code using for, while, do while or for-in loops. It makes the code compact. It is mostly used in array.\n" +
                        "\n" +
                        "There are four types of loops in JavaScript.\n" +
                        "\n" +
                        "1. for loop\n" +
                        "2. while loop\n" +
                        "3. do-while loop\n" +
                        "4. for-in loop",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "For loop",
                "The JavaScript for loop iterates the elements for the fixed number of times. It should be used if number of iteration is known. The syntax of for loop is given below." +
                        "\n\n" +
                        "for (initialization; condition; increment)  \n" +
                        "{  \n" +
                        "    code to be executed  \n" +
                        "}",
                "for (i=1; i<=5; i++)  \n" +
                        "{  \n" +
                        "document.write(i + \"<br/>\")  \n" +
                        "}",
                "1\n" +
                        "2\n" +
                        "3\n" +
                        "4\n" +
                        "5"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "while loop",
                "The JavaScript while loop iterates the elements for the infinite number of times. It should be used if number of iteration is not known. The syntax of while loop is given below.\n" +
                        "\n" +
                        "while (condition)  \n" +
                        "{  \n" +
                        "    code to be executed  \n" +
                        "}  ",
                "var i=11;  \n" +
                        "while (i<=15)  \n" +
                        "{  \n" +
                        "document.write(i + \"<br/>\");  \n" +
                        "i++;  \n" +
                        "}",
                "11\n" +
                        "12\n" +
                        "13\n" +
                        "14\n" +
                        "15"
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "do while loop",
                "The JavaScript do while loop iterates the elements for the infinite number of times like while loop. But, code is executed at least once whether condition is true or false. The syntax of do while loop is given below.\n" +
                        "\n" +
                        "do{  \n" +
                        "    code to be executed  \n" +
                        "}while (condition);  ",
                "var i=21;  \n" +
                        "do{  \n" +
                        "document.write(i + \"<br/>\");  \n" +
                        "i++;  \n" +
                        "}while (i<=25);",
                "21\n" +
                        "22\n" +
                        "23\n" +
                        "24\n" +
                        "25"
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "for in loop",
                "The for...in loop is used to loop through an object's properties. As we have not discussed Objects yet, you may not feel comfortable with this loop. But once you understand how objects behave in JavaScript, you will find this loop very useful.\n" +
                        "\n" +
                        "Syntax\n" +
                        "The syntax of ‘for..in’ loop is −\n" +
                        "for (variableName in object) {\n" +
                        "   statement or block to execute\n" +
                        "}\n" +
                        "In each iteration, one property from object is assigned to variableName and this loop continues till all the properties of the object are exhausted.",
                "var aProperty;\n" +
                        "document.write(\"Navigator Object Properties<br /> \");        \n" +
                        "for (aProperty in navigator) {\n" +
                        "document.write(aProperty);\n" +
                        "document.write(\"<br />\");\n" +
                        "}\n" +
                        "document.write (\"Exiting from the loop!\");",
                "Navigator Object Properties \n" +
                        "serviceWorker \n" +
                        "webkitPersistentStorage \n" +
                        "webkitTemporaryStorage \n" +
                        "geolocation \n" +
                        "doNotTrack \n" +
                        "onLine \n" +
                        "languages \n" +
                        "language \n" +
                        "userAgent \n" +
                        "product \n" +
                        "platform \n" +
                        "appVersion \n" +
                        "appName \n" +
                        "appCodeName \n" +
                        "hardwareConcurrency \n" +
                        "maxTouchPoints \n" +
                        "vendorSub \n" +
                        "vendor \n" +
                        "productSub \n" +
                        "cookieEnabled \n" +
                        "mimeTypes \n" +
                        "plugins \n" +
                        "javaEnabled \n" +
                        "getStorageUpdates \n" +
                        "getGamepads \n" +
                        "webkitGetUserMedia \n" +
                        "vibrate \n" +
                        "getBattery \n" +
                        "sendBeacon \n" +
                        "registerProtocolHandler \n" +
                        "unregisterProtocolHandler \n" +
                        "Exiting from the loop!"
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }

    //Basic Functions
    private static List<LearnDetailsModel> BasicFunctions() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Function Definition",
                "A function is a group of reusable code which can be called anywhere in your program. This eliminates the need of writing the same code again and again. It helps programmers in writing modular codes. Functions allow a programmer to divide a big program into a number of small and manageable functions.\n" +
                        "\n" +
                        "Like any other advanced programming language, JavaScript also supports all the features necessary to write modular code using functions. You must have seen functions like alert() and write() in the earlier chapters. We were using these functions again and again, but they had been written in core JavaScript only once.\n" +
                        "\n" +
                        "JavaScript allows us to write our own functions as well. This section explains how to write your own functions in JavaScript." +
                        "\n\n" +
                        "Before we use a function, we need to define it. The most common way to define a function in JavaScript is by using the function keyword, followed by a unique function name, a list of parameters (that might be empty), and a statement block surrounded by curly braces." +
                        "\n\n" +
                        "Syntax:\n" +
                        "The basic syntax is shown here.\n" +
                        "\n" +
                        "<script type = \"text/javascript\">\n" +
                        "   <!--\n" +
                        "      function functionName(parameter-list) {\n" +
                        "         statements\n" +
                        "      }\n" +
                        "   //-->\n" +
                        "</script>",
                "<script type = \"text/javascript\">\n" +
                        "   <!--\n" +
                        "      function sayHello() {\n" +
                        "         alert(\"Hello there!\");\n" +
                        "      }\n" +
                        "   //-->\n" +
                        "</script>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Calling a Function",
                "To invoke a function somewhere later in the script, you would simply need to write the name of that function as shown in the following code.",
                "<script type = \"text/javascript\">\n" +
                        "function sayHello() {\n" +
                        "  document.write (\"Hello there!\");\n" +
                        "}\n" +
                        "sayHello();\n" +
                        "</script>",
                "Hello there!"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Function Parameters",
                "Till now, we have seen functions without parameters. But there is a facility to pass different parameters while calling a function. These passed parameters can be captured inside the function and any manipulation can be done over those parameters. A function can take multiple parameters separated by comma.",
                "<script type = \"text/javascript\">\n" +
                        "function sayHello(name, age) {\n" +
                        "document.write (name + \" is \" + age + \" years old.\");\n" +
                        "}\n" +
                        "sayHello('Anne', 21);\n" +
                        "</script> ",
                "Anne is 21 years old."
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "The return Statement",
                "A JavaScript function can have an optional return statement. This is required if you want to return a value from a function. This statement should be the last statement in a function.\n" +
                        "\n" +
                        "For example, you can pass two numbers in a function and then you can expect the function to return their multiplication in your calling program.",
                "<script type = \"text/javascript\">\n" +
                        "function concatenate(first, last) {\n" +
                        "  var full;\n" +
                        "  full = first + last;\n" +
                        "  return full;\n" +
                        "}\n" +
                        "function secondFunction() {\n" +
                        "  var result;\n" +
                        "  result = concatenate('Anne', 'Moore');\n" +
                        "  document.write (result );\n" +
                        "}\n" +
                        "secondFunction();\n" +
                        "</script>",
                "AnneMoore"
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);

        return list;
    }

    //Events
    private static List<LearnDetailsModel> Events() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is an Event ?",
                "JavaScript's interaction with HTML is handled through events that occur when the user or the browser manipulates a page.\n" +
                        "\n" +
                        "When the page loads, it is called an event. When the user clicks a button, that click too is an event. Other examples include events like pressing any key, closing a window, resizing a window, etc.\n" +
                        "\n" +
                        "Developers can use these events to execute JavaScript coded responses, which cause buttons to close windows, messages to be displayed to users, data to be validated, and virtually any other type of response imaginable.\n" +
                        "\n" +
                        "Events are a part of the Document Object Model (DOM) Level 3 and every HTML element contains a set of events which can trigger JavaScript Code.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "onclick Event",
                "This is the most frequently used event type which occurs when a user clicks the left button of his mouse. You can put your validation, warning etc., against this event type.",
                "<script type = \"text/javascript\">\n" +
                        "<!--\n" +
                        "function sayHello() {\n" +
                        "  alert(\"Hello World!\")\n" +
                        "}\n" +
                        "//-->\n" +
                        "</script>" +
                        "\n\n" +
                        "<body>\n" +
                        "  <p>Click the following button and see result</p>      \n" +
                        "  <form>\n" +
                        "    <input type = \"button\" onclick = \"sayHello()\" value = \"Say Hello\" />\n" +
                        "  </form>      \n" +
                        "</body>",
                "Hello World!"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "onsubmit Event",
                "onsubmit is an event that occurs when you try to submit a form. You can put your form validation against this event type." +
                        "\n\n" +
                        "The following example shows how to use onsubmit. Here we are calling a validate() function before submitting a form data to the webserver. If validate() function returns true, the form will be submitted, otherwise it will not submit the data.",
                "<html>\n" +
                        "   <head>   \n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         <!--\n" +
                        "            function validation() {\n" +
                        "               all validation goes here\n" +
                        "               .........\n" +
                        "               return either true or false\n" +
                        "            }\n" +
                        "         //-->\n" +
                        "      </script>      \n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>   \n" +
                        "      <form method = \"POST\" action = \"t.cgi\" onsubmit = \"return validate()\">\n" +
                        "         .......\n" +
                        "         <input type = \"submit\" value = \"Submit\" />\n" +
                        "      </form>      \n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "onmouseover and onmouseout",
                "These two event types will help you create nice effects with images or even with text as well. The onmouseover event triggers when you bring your mouse over any element and the onmouseout triggers when you move your mouse out from that element. Try the following example.",
                "<html>\n" +
                        "   <head>   \n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         <!--\n" +
                        "            function over() {\n" +
                        "               document.write (\"Mouse Over\");\n" +
                        "            }            \n" +
                        "            function out() {\n" +
                        "               document.write (\"Mouse Out\");\n" +
                        "            }            \n" +
                        "         //-->\n" +
                        "      </script>      \n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>\n" +
                        "      <p>Bring your mouse inside the division to see the result:</p>      \n" +
                        "      <div onmouseover = \"over()\" onmouseout = \"out()\">\n" +
                        "         <h2> This is inside the division </h2>\n" +
                        "      </div>         \n" +
                        "   </body>\n" +
                        "</html>",
                "Mouse Over"
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);

        return list;
    }

    //JS Objects
    //Learn Objects
    private static List<LearnDetailsModel> LearnObjects() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Objects",
                "JavaScript is an Object Oriented Programming (OOP) language. A programming language can be called object-oriented if it provides four basic capabilities to developers −\n" +
                        "\n" +
                        "Encapsulation − the capability to store related information, whether data or methods, together in an object.\n" +
                        "\n" +
                        "Aggregation − the capability to store one object inside another object.\n" +
                        "\n" +
                        "Inheritance − the capability of a class to rely upon another class (or number of classes) for some of its properties and methods.\n" +
                        "\n" +
                        "Polymorphism − the capability to write one function or method that works in a variety of different ways.\n" +
                        "\n" +
                        "Objects are composed of attributes. If an attribute contains a function, it is considered to be a method of the object, otherwise the attribute is considered a property.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Object Properties",
                "Object properties can be any of the three primitive data types, or any of the abstract data types, such as another object. Object properties are usually variables that are used internally in the object's methods, but can also be globally visible variables that are used throughout the page.\n" +
                        "\n" +
                        "The syntax for adding a property to an object is −\n" +
                        "\n" +
                        "objectName.objectProperty = propertyValue;\n" +
                        "For example − The following code gets the document title using the \"title\" property of the document object.",
                "var str = document.title;",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Object Methods",
                "Methods are the functions that let the object do something or let something be done to it. There is a small difference between a function and a method – at a function is a standalone unit of statements and a method is attached to an object and can be referenced by the this keyword.\n" +
                        "\n" +
                        "Methods are useful for everything from displaying the contents of the object to the screen to performing complex mathematical operations on a group of local properties and parameters.\n" +
                        "\n" +
                        "For example − Following is a simple example to show how to use the write() method of document object to write any content on the document.",
                "document.write(\"This is a test\");",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "User-Defined Objects",
                "All user-defined objects and built-in objects are descendants of an object called Object.\n" +
                        "\n" +
                        "The new Operator\n" +
                        "The new operator is used to create an instance of an object. To create an object, the new operator is followed by the constructor method.\n" +
                        "\n" +
                        "In the following example, the constructor methods are Object(), Array(), and Date(). These constructors are built-in JavaScript functions.",
                "var employee = new Object();\n" +
                        "var books = new Array(\"C\", \"Python\", \"Java\");\n" +
                        "var day = new Date(\"January 1, 2022\");",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "The Object() Constructor",
                "A constructor is a function that creates and initializes an object. JavaScript provides a special constructor function called Object() to build the object. The return value of the Object() constructor is assigned to a variable.\n" +
                        "\n" +
                        "The variable contains a reference to the new object. The properties assigned to the object are not variables and are not defined with the var keyword.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>User-defined objects</title>     \n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         var book = new Object();   // Create the object\n" +
                        "         book.subject = \"JavaScript\";     // Assign properties to the object\n" +
                        "         book.author  = \"Anne Moore\";\n" +
                        "      </script>      \n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>  \n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         document.write(\"Book name is : \" + book.subject + \"<br>\");\n" +
                        "         document.write(\"Book author is : \" + book.author + \"<br>\");\n" +
                        "      </script>   \n" +
                        "   </body>\n" +
                        "</html>",
                "Book name is : JavaScript \n" +
                        "Book author is : Anne Moore"
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Defining Methods for an Object",
                "The previous examples demonstrate how the constructor creates the object and assigns properties. But we need to complete the definition of an object by assigning methods to it.",
                "<html>\n" +
                        "   \n" +
                        "   <head>\n" +
                        "   <title>User-defined objects</title>\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         // Define a function which will work as a method\n" +
                        "         function addPrice(amount) {\n" +
                        "            this.price = amount; \n" +
                        "         }\n" +
                        "         \n" +
                        "         function book(title, author) {\n" +
                        "            this.title = title;\n" +
                        "            this.author  = author;\n" +
                        "            this.addPrice = addPrice;  // Assign that method as property.\n" +
                        "         }\n" +
                        "      </script>      \n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>   \n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         var myBook = new book(\"JavaScript\", \"Anne Moore\");\n" +
                        "         myBook.addPrice(25);\n" +
                        "         \n" +
                        "         document.write(\"Book title is : \" + myBook.title + \"<br>\");\n" +
                        "         document.write(\"Book author is : \" + myBook.author + \"<br>\");\n" +
                        "         document.write(\"Book price is : \" + myBook.price + \"<br>\");\n" +
                        "      </script>      \n" +
                        "   </body>\n" +
                        "</html>",
                "Book title is : JavaScript \n" +
                        "Book author is : Anne Moore \n" +
                        "Book price is : 25"
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "The 'with' Keyword",
                "The ‘with’ keyword is used as a kind of shorthand for referencing an object's properties or methods.\n" +
                        "\n" +
                        "The object specified as an argument to with becomes the default object for the duration of the block that follows. The properties and methods for the object can be used without naming the object.\n" +
                        "\n" +
                        "Syntax\n" +
                        "The syntax for with object is as follows −\n" +
                        "\n" +
                        "with (object) {\n" +
                        "   properties used without the object name and dot\n" +
                        "}",
                "<html>\n" +
                        "   <head>\n" +
                        "   <title>User-defined objects</title>   \n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         // Define a function which will work as a method\n" +
                        "         function addPrice(amount) {\n" +
                        "            with(this) {\n" +
                        "               price = amount;\n" +
                        "            }\n" +
                        "         }\n" +
                        "         function book(title, author) {\n" +
                        "            this.title = title;\n" +
                        "            this.author = author;\n" +
                        "            this.price = 0;\n" +
                        "            this.addPrice = addPrice;  // Assign that method as property.\n" +
                        "         }\n" +
                        "      </script>      \n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>   \n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         var myBook = new book(\"JavaScript\", \"Anne Moore\");\n" +
                        "         myBook.addPrice(25);\n" +
                        "         \n" +
                        "         document.write(\"Book title is : \" + myBook.title + \"<br>\");\n" +
                        "         document.write(\"Book author is : \" + myBook.author + \"<br>\");\n" +
                        "         document.write(\"Book price is : \" + myBook.price + \"<br>\");\n" +
                        "      </script>      \n" +
                        "   </body>\n" +
                        "</html>",
                "Book title is : JavaScript \n" +
                        "Book author is : Anne Moore \n" +
                        "Book price is : 25"
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);

        return list;
    }

    //Number Objects
    private static List<LearnDetailsModel> NumberObjects() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Number Object",
                "The JavaScript number object enables you to represent a numeric value. It may be integer or floating-point. JavaScript number object follows IEEE standard to represent the floating-point numbers.\n" +
                        "\n" +
                        "By the help of Number() constructor, you can create number object in JavaScript. For example:\n" +
                        "\n" +
                        "var n=new Number(value);  \n" +
                        "If value can't be converted to number, it returns NaN(Not a Number) that can be checked by isNaN() method.\n" +
                        "\n" +
                        "You can direct assign a number to a variable also. For example:",
                "var x=102;\n" +
                        "var y=102.7;\n" +
                        "var z=13e4;\n" +
                        "var n=new Number(16);",
                "102 102.7 130000 16 "
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Number Constants",
                "Let's see the list of JavaScript number constants with description." +
                        "\n\n" +
                        "1. MIN_VALUE => returns the largest minimum value." +
                        "\n" +
                        "2. MAX_VALUE => returns the largest maximum value." +
                        "\n" +
                        "3. POSITIVE_INFINITY => returns positive infinity, overflow value." +
                        "\n" +
                        "4. NEGATIVE_INFINITY => returns negative infinity, overflow value." +
                        "\n" +
                        "5. NaN => represents \"Not a Number\" value.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Number Methods",
                "Let's see the list of JavaScript number methods with their description." +
                        "\n\n" +
                        "1. isFinite()\n" +
                        "It determines whether the given value is a finite number.\n" +
                        "2. isInteger()\n" +
                        "It determines whether the given value is an integer.\n" +
                        "3. parseFloat()\n" +
                        "It converts the given string into a floating point number.\n" +
                        "4. parseInt()\n" +
                        "It converts the given string into an integer number.\n" +
                        "5. toExponential()\n" +
                        "It returns the string that represents exponential notation of the given number.\n" +
                        "6. toFixed()\n" +
                        "It returns the string that represents a number with exact digits after a decimal point.\n" +
                        "7. toPrecision()\n" +
                        "It returns the string representing a number of specified precision.\n" +
                        "8. toString()\n" +
                        "It returns the given number in the form of string.",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //Boolean Objects
    private static List<LearnDetailsModel> BooleanObjects() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Boolean Objects",
                "JavaScript Boolean is an object that represents value in two states: true or false. You can create the JavaScript Boolean object by Boolean() constructor as given below." +
                        "\n" +
                        "The default value of JavaScript Boolean object is false.",
                "Boolean b=new Boolean(value);  ",
                "false"
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Boolean Properties",
                "Here is a list of the properties of Boolean object −",
                "1. constructor => returns the reference of Boolean function that created Boolean object.\n\n" +
                        "2. prototype => enables you to add properties and methods in Boolean prototype.",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Boolean Methods",
                "1. toSource() => returns the source of Boolean object as a string.\n" +
                        "2. toString() => converts Boolean into String.\n" +
                        "3. valueOf() => converts other type into Boolean.",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //Strings Objects
    private static List<LearnDetailsModel> StringsObjects() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Strings Objects",
                "The String object lets you work with a series of characters; it wraps Javascript's string primitive data type with a number of helper methods.\n" +
                        "\n" +
                        "As JavaScript automatically converts between string primitives and String objects, you can call any of the helper methods of the String object on a string primitive.\n" +
                        "\n" +
                        "Syntax\n" +
                        "Use the following syntax to create a String object −\n" +
                        "\n" +
                        "The String parameter is a series of characters that has been properly encoded.",
                "var val = new String(string);",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "String Properties",
                "Here is a list of the properties of String object and their description." +
                        "\n\n" +
                        "1. constructor\n" +
                        "Returns a reference to the String function that created the object.\n" +
                        "\n" +
                        "2. length\n" +
                        "Returns the length of the string.\n" +
                        "\n" +
                        "3. prototype\n" +
                        "The prototype property allows you to add properties and methods to an object.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "String Methods",
                "Here is a list of the methods available in String object along with their description." +
                        "\n\n" +
                        "1. charAt()\n" +
                        "Returns the character at the specified index.\n" +
                        "\n" +
                        "2. charCodeAt()\n" +
                        "Returns a number indicating the Unicode value of the character at the given index.\n" +
                        "\n" +
                        "3. concat()\n" +
                        "Combines the text of two strings and returns a new string.\n" +
                        "\n" +
                        "4. indexOf()\n" +
                        "Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found.\n" +
                        "\n" +
                        "5. lastIndexOf()\n" +
                        "Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found.\n" +
                        "\n" +
                        "6. localeCompare()\n" +
                        "Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.\n" +
                        "\n" +
                        "7. match()\n" +
                        "Used to match a regular expression against a string.\n" +
                        "\n" +
                        "8. replace()\n" +
                        "Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring.\n" +
                        "\n" +
                        "9. search()\n" +
                        "Executes the search for a match between a regular expression and a specified string.\n" +
                        "\n" +
                        "10. slice()\n" +
                        "Extracts a section of a string and returns a new string.\n" +
                        "\n" +
                        "11. split()\n" +
                        "Splits a String object into an array of strings by separating the string into substrings.\n" +
                        "\n" +
                        "12. substr()\n" +
                        "Returns the characters in a string beginning at the specified location through the specified number of characters.\n" +
                        "\n" +
                        "13. substring()\n" +
                        "Returns the characters in a string between two indexes into the string.\n" +
                        "\n" +
                        "14. toLocaleLowerCase()\n" +
                        "The characters within a string are converted to lower case while respecting the current locale.\n" +
                        "\n" +
                        "15. toLocaleUpperCase()\n" +
                        "The characters within a string are converted to upper case while respecting the current locale.\n" +
                        "\n" +
                        "16. toLowerCase()\n" +
                        "Returns the calling string value converted to lower case.\n" +
                        "\n" +
                        "17. toString()\n" +
                        "Returns a string representing the specified object.\n" +
                        "\n" +
                        "18. toUpperCase()\n" +
                        "Returns the calling string value converted to uppercase.\n" +
                        "\n" +
                        "19. valueOf()\n" +
                        "Returns the primitive value of the specified object.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "String HTML Wrappers",
                "Here is a list of the methods that return a copy of the string wrapped inside an appropriate HTML tag." +
                        "\n\n" +
                        "1. anchor()\n" +
                        "Creates an HTML anchor that is used as a hypertext target.\n" +
                        "\n" +
                        "2. big()\n" +
                        "Creates a string to be displayed in a big font as if it were in a <big> tag.\n" +
                        "\n" +
                        "3. blink()\n" +
                        "Creates a string to blink as if it were in a <blink> tag.\n" +
                        "\n" +
                        "4. bold()\n" +
                        "Creates a string to be displayed as bold as if it were in a <b> tag.\n" +
                        "\n" +
                        "5. fixed()\n" +
                        "Causes a string to be displayed in fixed-pitch font as if it were in a <tt> tag\n" +
                        "\n" +
                        "6. fontcolor()\n" +
                        "Causes a string to be displayed in the specified color as if it were in a <font color=\"color\"> tag.\n" +
                        "\n" +
                        "7. fontsize()\n" +
                        "Causes a string to be displayed in the specified font size as if it were in a <font size=\"size\"> tag.\n" +
                        "\n" +
                        "8. italics()\n" +
                        "Causes a string to be italic, as if it were in an <i> tag.\n" +
                        "\n" +
                        "9. link()\n" +
                        "Creates an HTML hypertext link that requests another URL.\n" +
                        "\n" +
                        "10. small()\n" +
                        "Causes a string to be displayed in a small font, as if it were in a <small> tag.\n" +
                        "\n" +
                        "11. strike()\n" +
                        "Causes a string to be displayed as struck-out text, as if it were in a <strike> tag.\n" +
                        "\n" +
                        "12. sub()\n" +
                        "Causes a string to be displayed as a subscript, as if it were in a <sub> tag\n" +
                        "\n" +
                        "13. sup()\n" +
                        "Causes a string to be displayed as a superscript, as if it were in a <sup> tag",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);

        return list;
    }

    //Arrays Objects
    private static List<LearnDetailsModel> ArraysObjects() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Arrays Objects",
                "The Array object lets you store multiple values in a single variable. It stores a fixed-size sequential collection of elements of the same type. An array is used to store a collection of data, but it is often more useful to think of an array as a collection of variables of the same type.\n" +
                        "\n" +
                        "Syntax\n" +
                        "Use the following syntax to create an Array object −\n" +
                        "\n" +
                        "var fruits = new Array( \"apple\", \"orange\", \"mango\" );\n" +
                        "The Array parameter is a list of strings or integers. When you specify a single numeric parameter with the Array constructor, you specify the initial length of the array. The maximum length allowed for an array is 4,294,967,295.\n" +
                        "\n" +
                        "You can create array by simply assigning values as follows −\n" +
                        "\n" +
                        "var fruits = [ \"apple\", \"orange\", \"mango\" ];\n" +
                        "You will use ordinal numbers to access and to set values inside an array as follows.\n" +
                        "\n" +
                        "fruits[0] is the first element\n" +
                        "fruits[1] is the second element\n" +
                        "fruits[2] is the third element",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Array Properties",
                "Here is a list of the properties of the Array object along with their description." +
                        "\n\n" +
                        "",
                "1. constructor\n" +
                        "Returns a reference to the array function that created the object.\n" +
                        "\n" +
                        "2. index\n" +
                        "\n" +
                        "The property represents the zero-based index of the match in the string\n" +
                        "\n" +
                        "3. input\n" +
                        "\n" +
                        "This property is only present in arrays created by regular expression matches.\n" +
                        "\n" +
                        "4. length\n" +
                        "Reflects the number of elements in an array.\n" +
                        "\n" +
                        "5. prototype\n" +
                        "The prototype property allows you to add properties and methods to an object.",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Array Methods",
                "Here is a list of the methods of the Array object along with their description." +
                        "\n\n" +
                        "1. concat()\n" +
                        "Returns a new array comprised of this array joined with other array(s) and/or value(s).\n" +
                        "\n" +
                        "2. every()\n" +
                        "Returns true if every element in this array satisfies the provided testing function.\n" +
                        "\n" +
                        "3. filter()\n" +
                        "Creates a new array with all of the elements of this array for which the provided filtering function returns true.\n" +
                        "\n" +
                        "4. forEach()\n" +
                        "Calls a function for each element in the array.\n" +
                        "\n" +
                        "5. indexOf()\n" +
                        "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.\n" +
                        "\n" +
                        "6. join()\n" +
                        "Joins all elements of an array into a string.\n" +
                        "\n" +
                        "7. lastIndexOf()\n" +
                        "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.\n" +
                        "\n" +
                        "8. map()\n" +
                        "Creates a new array with the results of calling a provided function on every element in this array.\n" +
                        "\n" +
                        "9. pop()\n" +
                        "Removes the last element from an array and returns that element.\n" +
                        "\n" +
                        "10. push()\n" +
                        "Adds one or more elements to the end of an array and returns the new length of the array.\n" +
                        "\n" +
                        "11. reduce()\n" +
                        "Apply a function simultaneously against two values of the array (from left-to-right) as to reduce it to a single value.\n" +
                        "\n" +
                        "12. reduceRight()\n" +
                        "Apply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value.\n" +
                        "\n" +
                        "13. reverse()\n" +
                        "Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first.\n" +
                        "\n" +
                        "14. shift()\n" +
                        "Removes the first element from an array and returns that element.\n" +
                        "\n" +
                        "15. slice()\n" +
                        "Extracts a section of an array and returns a new array.\n" +
                        "\n" +
                        "16. some()\n" +
                        "Returns true if at least one element in this array satisfies the provided testing function.\n" +
                        "\n" +
                        "17. toSource()\n" +
                        "Represents the source code of an object\n" +
                        "\n" +
                        "18. sort()\n" +
                        "Sorts the elements of an array\n" +
                        "\n" +
                        "19. splice()\n" +
                        "Adds and/or removes elements from an array.\n" +
                        "\n" +
                        "20. toString()\n" +
                        "Returns a string representing the array and its elements.\n" +
                        "\n" +
                        "21. unshift()\n" +
                        "Adds one or more elements to the front of an array and returns the new length of the array.",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //Date Objects
    private static List<LearnDetailsModel> DateObjects() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Date Objects",
                "The Date object is a datatype built into the JavaScript language. Date objects are created with the new Date( ) as shown below.\n" +
                        "\n" +
                        "Once a Date object is created, a number of methods allow you to operate on it. Most methods simply allow you to get and set the year, month, day, hour, minute, second, and millisecond fields of the object, using either local time or UTC (universal, or GMT) time.\n" +
                        "\n" +
                        "The ECMAScript standard requires the Date object to be able to represent any date and time, to millisecond precision, within 100 million days before or after 1/1/1970. This is a range of plus or minus 273,785 years, so JavaScript can represent date and time till the year 275755.\n" +
                        "\n" +
                        "Syntax\n" +
                        "You can use any of the following syntax's to create a Date object using Date() constructor.\n" +
                        "\n" +
                        "new Date( )\n" +
                        "new Date(milliseconds)\n" +
                        "new Date(datestring)\n" +
                        "new Date(year,month,date[,hour,minute,second,millisecond ])\n" +
                        "Note − Parameters in the brackets are always optional.\n" +
                        "\n" +
                        "Here is a description of the parameters −\n" +
                        "\n" +
                        "No Argument − With no arguments, the Date() constructor creates a Date object set to the current date and time.\n" +
                        "\n" +
                        "milliseconds − When one numeric argument is passed, it is taken as the internal numeric representation of the date in milliseconds, as returned by the getTime() method. For example, passing the argument 5000 creates a date that represents five seconds past midnight on 1/1/70.\n" +
                        "\n" +
                        "datestring − When one string argument is passed, it is a string representation of a date, in the format accepted by the Date.parse() method.\n" +
                        "\n" +
                        "7 arguments − To use the last form of the constructor shown above. Here is a description of each argument −\n" +
                        "\n" +
                        "year − Integer value representing the year. For compatibility (in order to avoid the Y2K problem), you should always specify the year in full; use 1998, rather than 98.\n" +
                        "\n" +
                        "month − Integer value representing the month, beginning with 0 for January to 11 for December.\n" +
                        "\n" +
                        "date − Integer value representing the day of the month.\n" +
                        "\n" +
                        "hour − Integer value representing the hour of the day (24-hour scale).\n" +
                        "\n" +
                        "minute − Integer value representing the minute segment of a time reading.\n" +
                        "\n" +
                        "second − Integer value representing the second segment of a time reading.\n" +
                        "\n" +
                        "millisecond − Integer value representing the millisecond segment of a time reading.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Date Properties",
                "Here is a list of the properties of the Date object along with their description." +
                        "\n\n" +
                        "1. constructor\n" +
                        "Specifies the function that creates an object's prototype.\n" +
                        "\n" +
                        "2. prototype\n" +
                        "The prototype property allows you to add properties and methods to an object",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Date Methods",
                "Here is a list of the methods used with Date and their description." +
                        "\n\n" +
                        "1. Date()\n" +
                        "Returns today's date and time\n" +
                        "\n" +
                        "2. getDate()\n" +
                        "Returns the day of the month for the specified date according to local time.\n" +
                        "\n" +
                        "3. getDay()\n" +
                        "Returns the day of the week for the specified date according to local time.\n" +
                        "\n" +
                        "4. getFullYear()\n" +
                        "Returns the year of the specified date according to local time.\n" +
                        "\n" +
                        "5. getHours()\n" +
                        "Returns the hour in the specified date according to local time.\n" +
                        "\n" +
                        "6. getMilliseconds()\n" +
                        "Returns the milliseconds in the specified date according to local time.\n" +
                        "\n" +
                        "7. getMinutes()\n" +
                        "Returns the minutes in the specified date according to local time.\n" +
                        "\n" +
                        "8. getMonth()\n" +
                        "Returns the month in the specified date according to local time.\n" +
                        "\n" +
                        "9. getSeconds()\n" +
                        "Returns the seconds in the specified date according to local time.\n" +
                        "\n" +
                        "10. getTime()\n" +
                        "Returns the numeric value of the specified date as the number of milliseconds since January 1, 1970, 00:00:00 UTC.\n" +
                        "\n" +
                        "11. getTimezoneOffset()\n" +
                        "Returns the time-zone offset in minutes for the current locale.\n" +
                        "\n" +
                        "12. getUTCDate()\n" +
                        "Returns the day (date) of the month in the specified date according to universal time.\n" +
                        "\n" +
                        "13. getUTCDay()\n" +
                        "Returns the day of the week in the specified date according to universal time.\n" +
                        "\n" +
                        "14. getUTCFullYear()\n" +
                        "Returns the year in the specified date according to universal time.\n" +
                        "\n" +
                        "15. getUTCHours()\n" +
                        "Returns the hours in the specified date according to universal time.\n" +
                        "\n" +
                        "16. getUTCMilliseconds()\n" +
                        "Returns the milliseconds in the specified date according to universal time.\n" +
                        "\n" +
                        "17. getUTCMinutes()\n" +
                        "Returns the minutes in the specified date according to universal time.\n" +
                        "\n" +
                        "18. getUTCMonth()\n" +
                        "Returns the month in the specified date according to universal time.\n" +
                        "\n" +
                        "19. getUTCSeconds()\n" +
                        "Returns the seconds in the specified date according to universal time.\n" +
                        "\n" +
                        "20. getYear()\n" +
                        "Deprecated - Returns the year in the specified date according to local time. Use getFullYear instead.\n" +
                        "\n" +
                        "21. setDate()\n" +
                        "Sets the day of the month for a specified date according to local time.\n" +
                        "\n" +
                        "22. setFullYear()\n" +
                        "Sets the full year for a specified date according to local time.\n" +
                        "\n" +
                        "23. setHours()\n" +
                        "Sets the hours for a specified date according to local time.\n" +
                        "\n" +
                        "24. setMilliseconds()\n" +
                        "Sets the milliseconds for a specified date according to local time.\n" +
                        "\n" +
                        "25. setMinutes()\n" +
                        "Sets the minutes for a specified date according to local time.\n" +
                        "\n" +
                        "26. setMonth()\n" +
                        "Sets the month for a specified date according to local time.\n" +
                        "\n" +
                        "27. setSeconds()\n" +
                        "Sets the seconds for a specified date according to local time.\n" +
                        "\n" +
                        "28. setTime()\n" +
                        "Sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.\n" +
                        "\n" +
                        "29. setUTCDate()\n" +
                        "Sets the day of the month for a specified date according to universal time.\n" +
                        "\n" +
                        "30. setUTCFullYear()\n" +
                        "Sets the full year for a specified date according to universal time.\n" +
                        "\n" +
                        "31. setUTCHours()\n" +
                        "Sets the hour for a specified date according to universal time.\n" +
                        "\n" +
                        "32. setUTCMilliseconds()\n" +
                        "Sets the milliseconds for a specified date according to universal time.\n" +
                        "\n" +
                        "33. setUTCMinutes()\n" +
                        "Sets the minutes for a specified date according to universal time.\n" +
                        "\n" +
                        "34. setUTCMonth()\n" +
                        "Sets the month for a specified date according to universal time.\n" +
                        "\n" +
                        "35. setUTCSeconds()\n" +
                        "Sets the seconds for a specified date according to universal time.\n" +
                        "\n" +
                        "36. setYear()\n" +
                        "Deprecated - Sets the year for a specified date according to local time. Use setFullYear instead.\n" +
                        "\n" +
                        "37. toDateString()\n" +
                        "Returns the \"date\" portion of the Date as a human-readable string.\n" +
                        "\n" +
                        "38. toGMTString()\n" +
                        "Deprecated - Converts a date to a string, using the Internet GMT conventions. Use toUTCString instead.\n" +
                        "\n" +
                        "39. toLocaleDateString()\n" +
                        "Returns the \"date\" portion of the Date as a string, using the current locale's conventions.\n" +
                        "\n" +
                        "40. toLocaleFormat()\n" +
                        "Converts a date to a string, using a format string.\n" +
                        "\n" +
                        "41. toLocaleString()\n" +
                        "Converts a date to a string, using the current locale's conventions.\n" +
                        "\n" +
                        "42. toLocaleTimeString()\n" +
                        "Returns the \"time\" portion of the Date as a string, using the current locale's conventions.\n" +
                        "\n" +
                        "43. toSource()\n" +
                        "Returns a string representing the source for an equivalent Date object; you can use this value to create a new object.\n" +
                        "\n" +
                        "44. toString()\n" +
                        "Returns a string representing the specified Date object.\n" +
                        "\n" +
                        "45. toTimeString()\n" +
                        "Returns the \"time\" portion of the Date as a human-readable string.\n" +
                        "\n" +
                        "46. toUTCString()\n" +
                        "Converts a date to a string, using the universal time convention.\n" +
                        "\n" +
                        "47. valueOf()\n" +
                        "Returns the primitive value of a Date object.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Date Static Methods",
                "In addition to the many instance methods listed previously, the Date object also defines two static methods. These methods are invoked through the Date() constructor itself." +
                        "\n\n" +
                        "1. Date.parse( )\n" +
                        "Parses a string representation of a date and time and returns the internal millisecond representation of that date.\n" +
                        "\n" +
                        "2. Date.UTC( )\n" +
                        "Returns the millisecond representation of the specified UTC date and time.",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        return list;
    }

    //Math Objects
    private static List<LearnDetailsModel> MathObjects() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Math Objects",
                "The math object provides you properties and methods for mathematical constants and functions. Unlike other global objects, Math is not a constructor. All the properties and methods of Math are static and can be called by using Math as an object without creating it.\n" +
                        "\n" +
                        "Thus, you refer to the constant pi as Math.PI and you call the sine function as Math.sin(x), where x is the method's argument.\n" +
                        "\n" +
                        "Syntax\n" +
                        "The syntax to call the properties and methods of Math are as follows",
                "var pi_val = Math.PI;\n" +
                        "var sine_val = Math.sin(30);",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Math Properties",
                "Here is a list of all the properties of Math and their description." +
                        "\n\n" +
                        "",
                "1. E \\\n" +
                        "Euler's constant and the base of natural logarithms, approximately 2.718.\n" +
                        "\n" +
                        "2. LN2\n" +
                        "Natural logarithm of 2, approximately 0.693.\n" +
                        "\n" +
                        "3. LN10\n" +
                        "Natural logarithm of 10, approximately 2.302.\n" +
                        "\n" +
                        "4. LOG2E\n" +
                        "Base 2 logarithm of E, approximately 1.442.\n" +
                        "\n" +
                        "5. LOG10E\n" +
                        "Base 10 logarithm of E, approximately 0.434.\n" +
                        "\n" +
                        "6. PI\n" +
                        "Ratio of the circumference of a circle to its diameter, approximately 3.14159.\n" +
                        "\n" +
                        "7. SQRT1_2\n" +
                        "Square root of 1/2; equivalently, 1 over the square root of 2, approximately 0.707.\n" +
                        "\n" +
                        "8. SQRT2\n" +
                        "Square root of 2, approximately 1.414.",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Math Methods",
                "Here is a list of the methods associated with Math object and their description." +
                        "\n\n" +
                        "1. abs()\n" +
                        "Returns the absolute value of a number.\n" +
                        "\n" +
                        "2. acos()\n" +
                        "Returns the arccosine (in radians) of a number.\n" +
                        "\n" +
                        "3. asin()\n" +
                        "Returns the arcsine (in radians) of a number.\n" +
                        "\n" +
                        "4. atan()\n" +
                        "Returns the arctangent (in radians) of a number.\n" +
                        "\n" +
                        "5. atan2()\n" +
                        "Returns the arctangent of the quotient of its arguments.\n" +
                        "\n" +
                        "6. ceil()\n" +
                        "Returns the smallest integer greater than or equal to a number.\n" +
                        "\n" +
                        "7. cos()\n" +
                        "Returns the cosine of a number.\n" +
                        "\n" +
                        "8. exp()\n" +
                        "Returns EN, where N is the argument, and E is Euler's constant, the base of the natural logarithm.\n" +
                        "\n" +
                        "9. floor()\n" +
                        "Returns the largest integer less than or equal to a number.\n" +
                        "\n" +
                        "10. log()\n" +
                        "Returns the natural logarithm (base E) of a number.\n" +
                        "\n" +
                        "11. max()\n" +
                        "Returns the largest of zero or more numbers.\n" +
                        "\n" +
                        "12. min()\n" +
                        "Returns the smallest of zero or more numbers.\n" +
                        "\n" +
                        "13. pow()\n" +
                        "Returns base to the exponent power, that is, base exponent.\n" +
                        "\n" +
                        "14. random()\n" +
                        "Returns a pseudo-random number between 0 and 1.\n" +
                        "\n" +
                        "15. round()\n" +
                        "Returns the value of a number rounded to the nearest integer.\n" +
                        "\n" +
                        "16. sin()\n" +
                        "Returns the sine of a number.\n" +
                        "\n" +
                        "17. sqrt()\n" +
                        "Returns the square root of a number.\n" +
                        "\n" +
                        "18. tan()\n" +
                        "Returns the tangent of a number.\n" +
                        "\n" +
                        "19. toSource()\n" +
                        "Returns the string \"Math\".",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //RegExp Objects
    private static List<LearnDetailsModel> RegExpObjects() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "RegExp Objects",
                "A regular expression is an object that describes a pattern of characters.\n" +
                        "\n" +
                        "The JavaScript RegExp class represents regular expressions, and both String and RegExp define methods that use regular expressions to perform powerful pattern-matching and search-and-replace functions on text.\n" +
                        "\n" +
                        "Here is the description of the parameters −\n" +
                        "\n" +
                        "pattern − A string that specifies the pattern of the regular expression or another regular expression.\n" +
                        "\n" +
                        "attributes − An optional string containing any of the \"g\", \"i\", and \"m\" attributes that specify global, case-insensitive, and multi-line matches, respectively." +
                        "Syntax\n" +
                        "A regular expression could be defined with the RegExp () constructor, as follows −" +
                        "",
                "var pattern = new RegExp(pattern, attributes);\n" +
                        "or simply\n" +
                        "var pattern = /pattern/attributes;",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Brackets",
                "Brackets ([]) have a special meaning when used in the context of regular expressions. They are used to find a range of characters." +
                        "\n\n" +
                        "The ranges shown above are general; you could also use the range [0-3] to match any decimal digit ranging from 0 through 3, or the range [b-v] to match any lowercase character ranging from b through v." +
                        "\n\n" +
                        "1. [...]\n" +
                        "\n" +
                        "Any one character between the brackets.\n" +
                        "\n" +
                        "2. [^...]\n" +
                        "\n" +
                        "Any one character not between the brackets.\n" +
                        "\n" +
                        "3. [0-9]\n" +
                        "\n" +
                        "It matches any decimal digit from 0 through 9.\n" +
                        "\n" +
                        "4. [a-z]\n" +
                        "\n" +
                        "It matches any character from lowercase a through lowercase z.\n" +
                        "\n" +
                        "5. [A-Z]\n" +
                        "\n" +
                        "It matches any character from uppercase A through uppercase Z.\n" +
                        "\n" +
                        "6. [a-Z]\n" +
                        "\n" +
                        "It matches any character from lowercase a through uppercase Z.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Quantifiers",
                "The frequency or position of bracketed character sequences and single characters can be denoted by a special character. Each special character has a specific connotation. The +, *, ?, and $ flags all follow a character sequence." +
                        "\n\n" +
                        "1. p+\n" +
                        "\n" +
                        "It matches any string containing one or more p's.\n" +
                        "\n" +
                        "2. p*\n" +
                        "\n" +
                        "It matches any string containing zero or more p's.\n" +
                        "\n" +
                        "3. p?\n" +
                        "\n" +
                        "It matches any string containing at most one p.\n" +
                        "\n" +
                        "4. p{N}\n" +
                        "\n" +
                        "It matches any string containing a sequence of N p's\n" +
                        "\n" +
                        "5. p{2,3}\n" +
                        "\n" +
                        "It matches any string containing a sequence of two or three p's.\n" +
                        "\n" +
                        "6. p{2, }\n" +
                        "\n" +
                        "It matches any string containing a sequence of at least two p's.\n" +
                        "\n" +
                        "7. p$\n" +
                        "\n" +
                        "It matches any string with p at the end of it.\n" +
                        "\n" +
                        "8. ^p\n" +
                        "\n" +
                        "It matches any string with p at the beginning of it.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Examples",
                "Following examples explain more about matching characters." +
                        "\n\n" +
                        "1. [^a-zA-Z]\n" +
                        "\n" +
                        "It matches any string not containing any of the characters ranging from a through z and A through Z.\n" +
                        "\n" +
                        "2. p.p\n" +
                        "\n" +
                        "It matches any string containing p, followed by any character, in turn followed by another p.\n" +
                        "\n" +
                        "3. ^.{2}$\n" +
                        "\n" +
                        "It matches any string containing exactly two characters.\n" +
                        "\n" +
                        "4. <b>(.*)</b>\n" +
                        "\n" +
                        "It matches any string enclosed within <b> and </b>.\n" +
                        "\n" +
                        "5. p(hp)*\n" +
                        "\n" +
                        "It matches any string containing a p followed by zero or more instances of the sequence hp.",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Literal characters",
                "1. Alphanumeric\n" +
                        "\n" +
                        "Itself\n" +
                        "\n" +
                        "2. \\0\n" +
                        "\n" +
                        "The NUL character (\\u0000)\n" +
                        "\n" +
                        "3. Tab (\\u0009\n" +
                        "\n" +
                        "4. \\n\n" +
                        "\n" +
                        "Newline (\\u000A)\n" +
                        "\n" +
                        "5. \\v\n" +
                        "\n" +
                        "Vertical tab (\\u000B)\n" +
                        "\n" +
                        "6. \\f\n" +
                        "\n" +
                        "Form feed (\\u000C)\n" +
                        "\n" +
                        "7. \\r\n" +
                        "\n" +
                        "Carriage return (\\u000D)\n" +
                        "\n" +
                        "8. \\xnn\n" +
                        "\n" +
                        "The Latin character specified by the hexadecimal number nn; for example, \\x0A is the same as \\n\n" +
                        "\n" +
                        "9. \\uxxxx\n" +
                        "\n" +
                        "The Unicode character specified by the hexadecimal number xxxx; for example, \\u0009 is the same as \\t  \n" +
                        "\n" +
                        "10. \\cX\n" +
                        "\n" +
                        "The control character ^X; for example, \\cJ is equivalent to the newline character \\n",
                "",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Metacharacters",
                "A metacharacter is simply an alphabetical character preceded by a backslash that acts to give the combination a special meaning.\n" +
                        "\n" +
                        "For instance, you can search for a large sum of money using the '\\d' metacharacter: /([\\d]+)000/, Here \\d will search for any string of numerical character.\n" +
                        "\n" +
                        "The following table lists a set of metacharacters which can be used in PERL Style Regular Expressions." +
                        "\n\n" +
                        "1. .\n" +
                        "\n" +
                        "a single character\n" +
                        "\n" +
                        "2. \\s\n" +
                        "\n" +
                        "a whitespace character (space, tab, newline)\n" +
                        "\n" +
                        "3. \\S\n" +
                        "\n" +
                        "non-whitespace character\n" +
                        "\n" +
                        "4. \\d\n" +
                        "\n" +
                        "a digit (0-9)\n" +
                        "\n" +
                        "5. \\D\n" +
                        "\n" +
                        "a non-digit\n" +
                        "\n" +
                        "6. \\w\n" +
                        "\n" +
                        "a word character (a-z, A-Z, 0-9, _)\n" +
                        "\n" +
                        "7. \\W\n" +
                        "\n" +
                        "a non-word character\n" +
                        "\n" +
                        "8. [\\b]\n" +
                        "\n" +
                        "a literal backspace (special case).\n" +
                        "\n" +
                        "9. [aeiou]\n" +
                        "\n" +
                        "matches a single character in the given set\n" +
                        "\n" +
                        "10. [^aeiou]\n" +
                        "\n" +
                        "matches a single character outside the given set\n" +
                        "\n" +
                        "11. (foo|bar|baz)\n" +
                        "\n" +
                        "matches any of the alternatives specified",
                "",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Modifiers",
                "Several modifiers are available that can simplify the way you work with regexps, like case sensitivity, searching in multiple lines, etc." +
                        "\n\n" +
                        "1. i\n" +
                        "\n" +
                        "Perform case-insensitive matching.\n" +
                        "\n" +
                        "2. m\n" +
                        "\n" +
                        "Specifies that if the string has newline or carriage return characters, the ^ and $ operators will now match against a newline boundary, instead of a string boundary\n" +
                        "\n" +
                        "3. g\n" +
                        "\n" +
                        "Performs a global matchthat is, find all matches rather than stopping after the first match.",
                "",
                ""
        );
        final LearnDetailsModel l8 = new LearnDetailsModel(
                "RegExp Properties",
                "Here is a list of the properties associated with RegExp and their description." +
                        "\n\n" +
                        "1. constructor\n" +
                        "Specifies the function that creates an object's prototype.\n" +
                        "\n" +
                        "2. global\n" +
                        "Specifies if the \"g\" modifier is set.\n" +
                        "\n" +
                        "3. ignoreCase\n" +
                        "Specifies if the \"i\" modifier is set.\n" +
                        "\n" +
                        "4. lastIndex\n" +
                        "The index at which to start the next match.\n" +
                        "\n" +
                        "5. multiline\n" +
                        "Specifies if the \"m\" modifier is set.\n" +
                        "\n" +
                        "6. source\n" +
                        "The text of the pattern.",
                "",
                ""
        );
        final LearnDetailsModel l9 = new LearnDetailsModel(
                "RegExp Methods",
                "Here is a list of the methods associated with RegExp along with their description." +
                        "\n\n" +
                        "1. exec()\n" +
                        "Executes a search for a match in its string parameter.\n" +
                        "\n" +
                        "2. test()\n" +
                        "Tests for a match in its string parameter.\n" +
                        "\n" +
                        "3. toSource()\n" +
                        "Returns an object literal representing the specified object; you can use this value to create a new object.\n" +
                        "\n" +
                        "4. toString()\n" +
                        "Returns a string representing the specified object.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        list.add(l8);
        list.add(l9);
        return list;
    }

    //JS Class
    private static List<LearnDetailsModel> JSClass() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "JavaScript Classes",
                "n JavaScript, classes are the special type of functions. We can define the class just like function declarations and function expressions.\n" +
                        "\n" +
                        "The JavaScript class contains various class members within a body including methods or constructor. The class is executed in strict mode. So, the code containing the silent error or mistake throws an error.\n" +
                        "\n" +
                        "The class syntax contains two components:\n" +
                        "\n" +
                        "Class declarations\n" +
                        "Class expressions",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Class Declarations",
                "A class can be defined by using a class declaration. A class keyword is used to declare a class with any particular name. According to JavaScript naming conventions, the name of the class always starts with an uppercase letter." +
                        "\n" +
                        "Let's see a simple example of declaring the class.",
                "<script>  \n" +
                        "class Employee  \n" +
                        "  {  \n" +
                        "    constructor(id,name)  \n" +
                        "    {  \n" +
                        "      this.id=id;  \n" +
                        "      this.name=name;  \n" +
                        "    }  \n" +
                        "    detail()  \n" +
                        "    {  \n" +
                        "  document.writeln(this.id+\" \"+this.name+\"<br>\")  \n" +
                        "    }  \n" +
                        "  }  \n" +
                        "var e1=new Employee(101,\"David Jason\");  \n" +
                        "var e2=new Employee(102,\"Jack William\");  \n" +
                        "e1.detail();\n" +
                        "e2.detail();  \n" +
                        "</script>  ",
                "101 David Jason\n" +
                        "102 Jack William"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Class expressions",
                "Another way to define a class is by using a class expression. Here, it is not mandatory to assign the name of the class. So, the class expression can be named or unnamed. The class expression allows us to fetch the class name. However, this will not be possible with class declaration." +
                        "\n" +
                        "Let's see an example.",
                "<script>  \n" +
                        "var emp = class {  \n" +
                        "  constructor(id, name) {  \n" +
                        "    this.id = id;  \n" +
                        "    this.name = name;  \n" +
                        "  }  \n" +
                        "};  \n" +
                        "document.writeln(emp.name);  \n" +
                        "</script>",
                "emp"
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //JS Object
    private static List<LearnDetailsModel> JSObject() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "JavaScript Objects",
                "A javaScript object is an entity having state and behavior (properties and method). For example: car, pen, bike, chair, glass, keyboard, monitor etc.\n" +
                        "\n" +
                        "JavaScript is an object-based language. Everything is an object in JavaScript.\n" +
                        "\n" +
                        "JavaScript is template based not class based. Here, we don't create class to get the object. But, we direct create objects." +
                        "\n" +
                        "There are 3 ways to create objects." +
                        "\n" +
                        "1. By object literal\n" +
                        "2. By creating instance of Object directly (using new keyword)\n" +
                        "3. By using an object constructor (using new keyword)",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Object by object literal",
                "The syntax of creating object using object literal is given below:\n" +
                        "\n" +
                        "object={property1:value1,property2:value2.....propertyN:valueN}  \n" +
                        "As you can see, property and value is separated by : (colon).\n" +
                        "\n" +
                        "Let’s see the simple example of creating object in JavaScript.",
                "<script>  \n" +
                        "emp={id:102,name:\"Anne Moore\",salary:60000}  \n" +
                        "document.write(emp.id+\" \"+emp.name+\" \"+emp.salary);  \n" +
                        "</script>  ",
                "102 Anne Moore 60000"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "By creating instance of Object",
                "The syntax of creating object directly is given below:\n" +
                        "\n" +
                        "var objectName=new Object();  \n" +
                        "Here, new keyword is used to create object.\n" +
                        "\n" +
                        "Let’s see the example of creating object directly.",
                "<script>  \n" +
                        "var emp=new Object();  \n" +
                        "emp.id=104;  \n" +
                        "emp.name=\"Emma Watson\";  \n" +
                        "emp.salary=80000;  \n" +
                        "document.write(emp.id+\" \"+emp.name+\" \"+emp.salary);  \n" +
                        "</script>  ",
                "104 Emma Watson 80000"
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "By using an Object constructor",
                "Here, you need to create function with arguments. Each argument value can be assigned in the current object by using this keyword.\n" +
                        "\n" +
                        "\n" +
                        "The this keyword refers to the current object.\n" +
                        "\n" +
                        "The example of creating object by object constructor is given below.",
                "<script>  \n" +
                        "function emp(id,name,salary){  \n" +
                        "this.id=id;  \n" +
                        "this.name=name;  \n" +
                        "this.salary=salary;  \n" +
                        "}  \n" +
                        "e=new emp(103,\"MD. Shahadot Hossain\",44000);  \n" +
                        "  \n" +
                        "document.write(e.id+\" \"+e.name+\" \"+e.salary);  \n" +
                        "</script>",
                "103 MD. Shahadot Hossain 44000"
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Defining method in JavaScript Object",
                "We can define method in JavaScript object. But before defining method, we need to add property in the function with same name as method.\n" +
                        "\n" +
                        "The example of defining method in object is given below.",
                "<script>  \n" +
                        "function emp(id,name,salary){  \n" +
                        "this.id=id;  \n" +
                        "this.name=name;  \n" +
                        "this.salary=salary;  \n" +
                        "  \n" +
                        "this.changeSalary=changeSalary;  \n" +
                        "function changeSalary(otherSalary){  \n" +
                        "this.salary=otherSalary;  \n" +
                        "}  \n" +
                        "}  \n" +
                        "e=new emp(103,\"MD. Shahadot Hossain\",44000);  \n" +
                        "document.write(e.id+\" \"+e.name+\" \"+e.salary);  \n" +
                        "e.changeSalary(50000);  \n" +
                        "document.write(\"<br>\"+e.id+\" \"+e.name+\" \"+e.salary);  \n" +
                        "</script>",
                "103 MD. Shahadot Hossain 44000\n" +
                        "103 MD. Shahadot Hossain 50000"
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }

    //JS Prototype
    private static List<LearnDetailsModel> JSPrototype() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "JavaScript Prototype Object",
                "JavaScript is a prototype-based language that facilitates the objects to acquire properties and features from one another. Here, each object contains a prototype object.\n" +
                        "\n" +
                        "In JavaScript, whenever a function is created the prototype property is added to that function automatically. This property is a prototype object that holds a constructor property.\n" +
                        "\n" +
                        "Syntax:\n" +
                        "ClassName.prototype.methodName  ",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "What is the requirement of a prototype object?",
                "Whenever an object is created in JavaScript, its corresponding functions are loaded into memory. So, a new copy of the function is created on each object creation.\n" +
                        "\n" +
                        "In a prototype-based approach, all the objects share the same function. This ignores the requirement of creating a new copy of function for each object. Thus, the functions are loaded once into the memory.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Prototype Chaining",
                "In JavaScript, each object contains a prototype object that acquires properties and methods from it. Again an object's prototype object may contain a prototype object that also acquires properties and methods, and so on. It can be seen as prototype chaining." +
                        "\n\n" +
                        "Objects <= Employee <= employee1(inherits from prototype)" +
                        "\n\n" +
                        "JavaScript Prototype Object Example:",
                "<script>  \n" +
                        "function Employee(firstName,lastName)  \n" +
                        "{  \n" +
                        "  this.firstName=firstName;  \n" +
                        "  this.lastName=lastName;  \n" +
                        "}  \n" +
                        "  \n" +
                        "Employee.prototype.fullName=function()  \n" +
                        "  {  \n" +
                        "    return this.firstName+\" \"+this.lastName;  \n" +
                        "  }  \n" +
                        "  \n" +
                        "var employee1=new Employee(\"Anne\",\"Moore\");  \n" +
                        "var employee2=new Employee(\"Jack\", \"William\");  \n" +
                        "document.writeln(employee1.fullName()+\"<br>\");  \n" +
                        "document.writeln(employee2.fullName());  \n" +
                        "</script>",
                "Anne Moore\n" +
                        "Jack William"
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //JS Constructor Method
    private static List<LearnDetailsModel> JSConstructorMethod() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Constructor Method",
                "A JavaScript constructor method is a special type of method which is used to initialize and create an object. It is called when memory is allocated for an object.\n" +
                        "\n" +
                        "Points to remember\n" +
                        "The constructor keyword is used to declare a constructor method.\n" +
                        "The class can contain one constructor method only.\n" +
                        "JavaScript allows us to use parent class constructor through super keyword.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Constructor Method Example",
                "Let's see a simple example of a constructor method.",
                "<script>  \n" +
                        "class Employee {  \n" +
                        "  constructor() {  \n" +
                        "    this.id=101;  \n" +
                        "    this.name = \"Anne Moore\";  \n" +
                        "  }   \n" +
                        "}  \n" +
                        "var emp = new Employee();  \n" +
                        "document.writeln(emp.id+\" \"+emp.name);  \n" +
                        "</script>",
                "101 Anne Moore"
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //JS Static Method
    private static List<LearnDetailsModel> JSStaticMethod() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Static Method",
                "The JavaScript provides static methods that belong to the class instead of an instance of that class. So, an instance is not required to call the static method. These methods are called directly on the class itself.\n" +
                        "\n" +
                        "Points to remember\n" +
                        "The static keyword is used to declare a static method.\n" +
                        "The static method can be of any name.\n" +
                        "A class can contain more than one static method.\n" +
                        "If we declare more than one static method with a similar name, the JavaScript always invokes the last one.\n" +
                        "The static method can be used to create utility functions.\n" +
                        "We can use this keyword to call a static method within another static method.\n" +
                        "We cannot use this keyword directly to call a static method within the non-static method. In such case, we can call the static method either using the class name or as the property of the constructor.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "JavaScript static Method Example",
                "Let's see a simple example of a static method.",
                "<script>  \n" +
                        "class Test  \n" +
                        "{  \n" +
                        "  static display()  \n" +
                        "  {  \n" +
                        "    return \"static method is invoked\"  \n" +
                        "  }  \n" +
                        "}  \n" +
                        "document.writeln(Test.display());  \n" +
                        "</script>",
                "static method is invoked"
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //JS Encapsulation
    private static List<LearnDetailsModel> JSEncapsulation() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "JavaScript Encapsulation",
                "The JavaScript Encapsulation is a process of binding the data (i.e. variables) with the functions acting on that data. It allows us to control the data and validate it. To achieve an encapsulation in JavaScript: -\n" +
                        "\n" +
                        "Use var keyword to make data members private.\n" +
                        "Use setter methods to set the data and getter methods to get that data.\n" +
                        "The encapsulation allows us to handle an object using the following properties:\n" +
                        "\n" +
                        "Read/Write - Here, we use setter methods to write the data and getter methods read that data.\n" +
                        "\n" +
                        "Read Only - In this case, we use getter methods only.\n" +
                        "\n" +
                        "\n" +
                        "Write Only - In this case, we use setter methods only.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "JavaScript Encapsulation Example",
                "Let's see a simple example of encapsulation that contains two data members with its setter and getter methods.",
                "<script>  \n" +
                        "class Students  \n" +
                        "  {  \n" +
                        "    constructor()\n" +
                        "    {  \n" +
                        "       var name;\n" +
                        "       var marks;\n" +
                        "    }  \n" +
                        "        getName()\n" +
                        "        {  \n" +
                        "          return this.name;\n" +
                        "        }  \n" +
                        "      setName(name)\n" +
                        "      {  \n" +
                        "        this.name=name;\n" +
                        "      }\n" +
                        "        \n" +
                        "      getMarks()\n" +
                        "      {  \n" +
                        "        return this.marks;\n" +
                        "      }  \n" +
                        "    setMarks(marks)\n" +
                        "    {  \n" +
                        "      this.marks=marks;\n" +
                        "    }  \n" +
                        "  \n" +
                        "    }  \n" +
                        "    var student=new Students();\n" +
                        "     student.setName(\"Anne\");\n" +
                        "     student.setMarks(84);  \n" +
                        "     document.writeln(stud.getName()+\" \"+stud.getMarks());\n" +
                        "</script>",
                "Anne 84"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "JavaScript Encapsulation Example: Prototype-based approach",
                "Here, we perform prototype-based encapsulation.",
                "<script>  \n" +
                        "function Student(name,marks)  \n" +
                        "{  \n" +
                        "  var s_name=name;  \n" +
                        "  var s_marks=marks;  \n" +
                        "  Object.defineProperty(this,\"name\",{  \n" +
                        "    get:function()  \n" +
                        "    {  \n" +
                        "      return s_name;  \n" +
                        "    },  \n" +
                        "  set:function(s_name)  \n" +
                        "  {  \n" +
                        "    this.s_name=s_name;  \n" +
                        "  }  \n" +
                        "    \n" +
                        "});  \n" +
                        "   \n" +
                        "    Object.defineProperty(this,\"marks\",{  \n" +
                        "    get:function()  \n" +
                        "    {  \n" +
                        "      return s_marks;  \n" +
                        "    },  \n" +
                        "  set:function(s_marks)  \n" +
                        "  {  \n" +
                        "    this.s_marks=s_marks;  \n" +
                        "  }  \n" +
                        "    \n" +
                        "});  \n" +
                        "    \n" +
                        "}  \n" +
                        "  var stud=new Student(\"Anne\",84);  \n" +
                        "  document.writeln(stud.name+\" \"+stud.marks);  \n" +
                        "</script>",
                "Anne 84"
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //JS Inheritance
    private static List<LearnDetailsModel> JSInheritance() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "JavaScript Inheritance",
                "The JavaScript inheritance is a mechanism that allows us to create new classes on the basis of already existing classes. It provides flexibility to the child class to reuse the methods and variables of a parent class.\n" +
                        "\n" +
                        "The JavaScript extends keyword is used to create a child class on the basis of a parent class. It facilitates child class to acquire all the properties and behavior of its parent class.\n" +
                        "\n" +
                        "Points to remember\n" +
                        "It maintains an IS-A relationship.\n" +
                        "The extends keyword is used in class expressions or class declarations.\n" +
                        "Using extends keyword, we can acquire all the properties and behavior of the inbuilt object as well as custom classes.\n" +
                        "We can also use a prototype-based approach to achieve inheritance.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "JavaScript extends Example: inbuilt object",
                "In this example, we extends Date object to display today's date.",
                "<script>  \n" +
                        "class Moment extends Date {  \n" +
                        "  constructor() {  \n" +
                        "    super();  \n" +
                        "  }}  \n" +
                        "var m=new Moment();  \n" +
                        "document.writeln(\"Current date:\")  \n" +
                        "document.writeln(m.getDate()+\"-\"+(m.getMonth()+1)+\"-\"+m.getFullYear());  \n" +
                        "</script>",
                "Current date: 01-01-2022"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "JavaScript extends Example: a Prototype-based approach",
                "Here, we perform prototype-based inheritance. In this approach, there is no need to use class and extends keywords.",
                "<script>  \n" +
                        "function Bike(company)  \n" +
                        "{  \n" +
                        "    this.company=company;   \n" +
                        "}  \n" +
                        "  \n" +
                        "Bike.prototype.getCompany=function()  \n" +
                        "{  \n" +
                        "  return this.company;  \n" +
                        "}  \n" +
                        "function Vehicle(name,price) {  \n" +
                        " this.name=name;  \n" +
                        "  this.price=price;  \n" +
                        "  }   \n" +
                        "var bike = new Bike(\"Royal Enfield\");  \n" +
                        "Vehicle.prototype=bike;\n" +
                        "var vehicle=new Vehicle(\"Interceptor\",300000);  \n" +
                        "document.writeln(vehicle.getCompany()+\" \"+vehicle.name+\" \"+vehicle.price);  \n" +
                        "</script>",
                "Royal Enfield Interceptor 300000"
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //JS Polymorphism
    private static List<LearnDetailsModel> JSPolymorphism() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "JavaScript Polymorphism",
                "The polymorphism is a core concept of an object-oriented paradigm that provides a way to perform a single action in different forms. It provides an ability to call the same method on different JavaScript objects. As JavaScript is not a type-safe language, we can pass any type of data members with the methods.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "JavaScript Polymorphism Example",
                "Let's see an example where a child class object invokes the parent class method.",
                "<script>  \n" +
                        "function A()  \n" +
                        "{  \n" +
                        "}  \n" +
                        "A.prototype.display=function()  \n" +
                        "{  \n" +
                        "  return \"A is invoked\";  \n" +
                        "}  \n" +
                        "function B()  \n" +
                        "{  \n" +
                        "    \n" +
                        "}  \n" +
                        "  \n" +
                        "B.prototype=Object.create(A.prototype);  \n" +
                        "  \n" +
                        "var a=[new A(), new B()]  \n" +
                        "  \n" +
                        "a.forEach(function(msg)  \n" +
                        "{  \n" +
                        "  document.writeln(msg.display()+\"<br>\");  \n" +
                        "});  \n" +
                        "<script>",
                "A is invoked\n" +
                        "B is invoked"
        );
        list.add(l1);
        list.add(l2);

        return list;
    }

    //JS Abstraction
    private static List<LearnDetailsModel> JSAbstraction() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "JavaScript Abstraction",
                "An abstraction is a way of hiding the implementation details and showing only the functionality to the users. In other words, it ignores the irrelevant details and shows only the required one.\n" +
                        "\n" +
                        "Points to remember\n" +
                        "We cannot create an instance of Abstract Class.\n" +
                        "It reduces the duplication of code.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "JavaScript Abstraction Example",
                "Let's check whether we can create an instance of Abstract class or not.",
                "<script>  \n" +
                        " function Vehicle()  \n" +
                        "{  \n" +
                        "    this.vehicleName=\"vehicleName\";  \n" +
                        "    throw new Error(\"You cannot create an instance of Abstract Class\");  \n" +
                        "}  \n" +
                        "Vehicle.prototype.display=function()  \n" +
                        "{  \n" +
                        "    return \"Vehicle is: \"+this.vehicleName;  \n" +
                        "}  \n" +
                        "function Bike(vehicleName)  \n" +
                        "{  \n" +
                        "    this.vehicleName=vehicleName;  \n" +
                        "}  \n" +
                        "Bike.prototype=Object.create(Vehicle.prototype);  \n" +
                        "var bike=new Bike(\"Royal Enfield\");  \n" +
                        "document.writeln(bike.display());  \n" +
                        " </script>",
                "Vehicle is: Royal Enfield"
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //DOM
    //HTML DOM
    private static List<LearnDetailsModel> HTMLDOM() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Introductions",
                "With the HTML DOM, JavaScript can access and change all the elements of an HTML document." +
                        "\n" +
                        "When a web page is loaded, the browser creates a Document Object Model of the page. The HTML DOM model is constructed as a tree of Objects" +
                        "\n\n" +
                        "With the object model, JavaScript gets all the power it needs to create dynamic HTML:\n" +
                        "\n" +
                        "JavaScript can change all the HTML elements in the page\n" +
                        "JavaScript can change all the HTML attributes in the page\n" +
                        "JavaScript can change all the CSS styles in the page\n" +
                        "JavaScript can remove existing HTML elements and attributes\n" +
                        "JavaScript can add new HTML elements and attributes\n" +
                        "JavaScript can react to all existing HTML events in the page\n" +
                        "JavaScript can create new HTML events in the page",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "What is the DOM?",
                "The DOM is a W3C (World Wide Web Consortium) standard.\n" +
                        "\n" +
                        "The DOM defines a standard for accessing documents:\n" +
                        "\n" +
                        "\"The W3C Document Object Model (DOM) is a platform and language-neutral interface that allows programs and scripts to dynamically access and update the content, structure, and style of a document.\"\n" +
                        "\n" +
                        "The W3C DOM standard is separated into 3 different parts:\n" +
                        "\n" +
                        "Core DOM - standard model for all document types\n" +
                        "XML DOM - standard model for XML documents\n" +
                        "HTML DOM - standard model for HTML documents",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "What is the HTML DOM?",
                "The HTML DOM is a standard object model and programming interface for HTML. It defines:\n" +
                        "\n" +
                        "The HTML elements as objects\n" +
                        "The properties of all HTML elements\n" +
                        "The methods to access all HTML elements\n" +
                        "The events for all HTML elements\n" +
                        "In other words: The HTML DOM is a standard for how to get, change, add, or delete HTML elements.",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);

        return list;
    }

    //DOM Methods
    private static List<LearnDetailsModel> DOMMethods() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "HTML DOM Methods",
                "HTML DOM methods are actions you can perform (on HTML Elements).\n" +
                        "\n" +
                        "HTML DOM properties are values (of HTML Elements) that you can set or change.\n" +
                        "\n" +
                        "The DOM Programming Interface\n" +
                        "The HTML DOM can be accessed with JavaScript (and with other programming languages).\n" +
                        "\n" +
                        "In the DOM, all HTML elements are defined as objects.\n" +
                        "\n" +
                        "The programming interface is the properties and methods of each object.\n" +
                        "\n" +
                        "A property is a value that you can get or set (like changing the content of an HTML element).\n" +
                        "\n" +
                        "A method is an action you can do (like add or deleting an HTML element).",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Example",
                "The following example changes the content (the innerHTML) of the <p> element with id=\"demo\":" +
                        "\n" +
                        "In the example bellow, getElementById is a method, while innerHTML is a property.",
                "<html>\n" +
                        "<body>\n" +
                        "\n" +
                        "<p id=\"demo\"></p>\n" +
                        "\n" +
                        "<script>\n" +
                        "document.getElementById(\"demo\").innerHTML = \"Hello World!\";\n" +
                        "</script>\n" +
                        "\n" +
                        "</body>\n" +
                        "</html>",
                "Hello World!"
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //DOM Documents
    private static List<LearnDetailsModel> DOMDocuments() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "HTML DOM Document",
                "The HTML DOM document object is the owner of all other objects in your web page.\n" +
                        "\n" +
                        "The HTML DOM Document Object\n" +
                        "The document object represents your web page.\n" +
                        "\n" +
                        "If you want to access any element in an HTML page, you always start with accessing the document object.\n" +
                        "\n" +
                        "Below are some examples of how you can use the document object to access and manipulate HTML." +
                        "\n\n" +
                        "Finding HTML Elements" +
                        "\n\n" +
                        "document.getElementById(id) => Find an element by element id\n" +
                        "document.getElementsByTagName(name) => Find elements by tag name\n" +
                        "document.getElementsByClassName(name) => Find elements by class name" +
                        "\n\n" +
                        "Changing HTML Elements" +
                        "\n\n" +
                        "element.innerHTML =  new html content => Change the inner HTML of an element\n" +
                        "element.attribute = new value => Change the attribute value of an HTML element\n" +
                        "element.style.property = new style => Change the style of an HTML element" +
                        "\n\n" +
                        "Adding and Deleting Elements" +
                        "\n\n" +
                        "document.createElement(element) => Create an HTML element\n" +
                        "document.removeChild(element) => Remove an HTML element\n" +
                        "document.appendChild(element) => Add an HTML element\n" +
                        "document.replaceChild(new, old) => Replace an HTML element\n" +
                        "document.write(text) => Write into the HTML output stream",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Finding HTML Objects",
                "The first HTML DOM Level 1 (1998), defined 11 HTML objects, object collections, and properties. These are still valid in HTML5.\n" +
                        "\n" +
                        "Later, in HTML DOM Level 3, more objects, collections, and properties were added." +
                        "\n\n" +
                        "document.anchors=> Returns all <a> elements that have a name attribute=> 1\n" +
                        "document.applets=> Deprecated=> 1\n" +
                        "document.baseURI=> Returns the absolute base URI of the document=> 3\n" +
                        "document.body=> Returns the <body> element=> 1\n" +
                        "document.cookie=> Returns the document's cookie=> 1\n" +
                        "document.doctype=> Returns the document's doctype=> 3\n" +
                        "document.documentElement=> Returns the <html> element=> 3\n" +
                        "document.documentMode=> Returns the mode used by the browser=> 3\n" +
                        "document.documentURI=> Returns the URI of the document=> 3\n" +
                        "document.domain=> Returns the domain name of the document server=> 1\n" +
                        "document.domConfig=> Obsolete.=> 3\n" +
                        "document.embeds=> Returns all <embed> elements=> 3\n" +
                        "document.forms=> Returns all <form> elements=> 1\n" +
                        "document.head=> Returns the <head> element=> 3\n" +
                        "document.images=> Returns all <img> elements=> 1\n" +
                        "document.implementation=> Returns the DOM implementation=> 3\n" +
                        "document.inputEncoding=> Returns the document's encoding (character set)=> 3\n" +
                        "document.lastModified=> Returns the date and time the document was updated=> 3\n" +
                        "document.links=> Returns all <area> and <a> elements that have a href attribute=> 1\n" +
                        "document.readyState=> Returns the (loading) status of the document=> 3\n" +
                        "document.referrer=> Returns the URI of the referrer (the linking document)=> 1\n" +
                        "document.scripts=> Returns all <script> elements=> 3\n" +
                        "document.strictErrorChecking=> Returns if error checking is enforced=> 3\n" +
                        "document.title=> Returns the <title> element=> 1\n" +
                        "document.URL=> Returns the complete URL of the document=> 1",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        return list;
    }

    //DOM Elements
    private static List<LearnDetailsModel> DOMElements() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "HTML DOM Elements",
                "This page teaches you how to find and access HTML elements in an HTML page.\n" +
                        "\n" +
                        "Finding HTML Elements\n" +
                        "Often, with JavaScript, you want to manipulate HTML elements.\n" +
                        "\n" +
                        "To do so, you have to find the elements first. There are several ways to do this:\n" +
                        "\n" +
                        "Finding HTML elements by id\n" +
                        "Finding HTML elements by tag name\n" +
                        "Finding HTML elements by class name\n" +
                        "Finding HTML elements by CSS selectors\n" +
                        "Finding HTML elements by HTML object collections\n" +
                        "Finding HTML Element by Id\n" +
                        "The easiest way to find an HTML element in the DOM, is by using the element id.\n" +
                        "\n" +
                        "This example finds the element with id=\"intro\":",
                "const element = document.getElementById(\"intro\");",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Finding HTML Elements by Tag Name",
                "This example finds all <p> elements:",
                "const element = document.getElementsByTagName(\"p\");",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Finding HTML Elements by Class Name",
                "If you want to find all HTML elements with the same class name, use getElementsByClassName().\n" +
                        "This example returns a list of all elements with class=\"intro\".",
                "const x = document.getElementsByClassName(\"intro\");",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Finding HTML Elements by CSS Selectors",
                "If you want to find all HTML elements that match a specified CSS selector (id, class names, types, attributes, values of attributes, etc), use the querySelectorAll() method.\n" +
                        "This example returns a list of all <p> elements with class=\"intro\".",
                "const x = document.querySelectorAll(\"p.intro\");",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Finding HTML Elements by HTML Object Collections",
                "This example finds the form element with id=\"frm1\", in the forms collection, and displays all element values:",
                "const x = document.forms[\"frm1\"];\n" +
                        "let text = \"\";\n" +
                        "for (let i = 0; i < x.length; i++) {\n" +
                        "  text += x.elements[i].value + \"<br>\";\n" +
                        "}\n" +
                        "document.getElementById(\"demo\").innerHTML = text;",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }

    //DOM HTML
    private static List<LearnDetailsModel> DOMHTML() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "HTML DOM - Changing HTML",
                "The HTML DOM allows JavaScript to change the content of HTML elements.\n" +
                        "\n" +
                        "Changing HTML Content\n" +
                        "The easiest way to modify the content of an HTML element is by using the innerHTML property.\n" +
                        "\n" +
                        "To change the content of an HTML element, use this syntax:\n" +
                        "\n" +
                        "document.getElementById(id).innerHTML = new HTML\n" +
                        "This example changes the content of a <p> element:",
                "<html>\n" +
                        "<body>\n" +
                        "\n" +
                        "<p id=\"p1\">Hello World!</p>\n" +
                        "\n" +
                        "<script>\n" +
                        "document.getElementById(\"p1\").innerHTML = \"New text!\";\n" +
                        "</script>\n" +
                        "\n" +
                        "</body>\n" +
                        "</html>",
                "New text!"
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Changing the Value of an Attribute",
                "To change the value of an HTML attribute, use this syntax:\n" +
                        "\n" +
                        "document.getElementById(id).attribute = new value\n" +
                        "This example changes the value of the src attribute of an <img> element:",
                "<!DOCTYPE html>\n" +
                        "<html>\n" +
                        "<body>\n" +
                        "\n" +
                        "<img id=\"myImage\" src=\"smiley.gif\">\n" +
                        "\n" +
                        "<script>\n" +
                        "document.getElementById(\"myImage\").src = \"landscape.jpg\";\n" +
                        "</script>\n" +
                        "\n" +
                        "</body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Dynamic HTML content",
                "JavaScript can create dynamic HTML content:\n" +
                        "\n" +
                        "Date : Sat Jan 01 2022 21:46:47 GMT+0600",
                "<!DOCTYPE html>\n" +
                        "<html>\n" +
                        "<body>\n" +
                        "\n" +
                        "<script>\n" +
                        "document.getElementById(\"demo\").innerHTML = \"Date : \" + Date(); </script>\n" +
                        "\n" +
                        "</body>\n" +
                        "</html>",
                "Date : Sat Jan 01 2022 21:50:02 GMT+0600"
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "document.write()",
                "In JavaScript, document.write() can be used to write directly to the HTML output stream:",
                "<!DOCTYPE html>\n" +
                        "<html>\n" +
                        "<body>\n" +
                        "\n" +
                        "<p>Bla bla bla</p>\n" +
                        "\n" +
                        "<script>\n" +
                        "document.write(Date());\n" +
                        "</script>\n" +
                        "\n" +
                        "<p>Bla bla bla</p>\n" +
                        "\n" +
                        "</body>\n" +
                        "</html>",
                "Bla, bla, bla\n" +
                        "\n" +
                        "Sat Jan 01 2022 21:50:27 GMT+0600\n" +
                        "Bla, bla, bla"
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        return list;
    }

    //DOM Forms
    private static List<LearnDetailsModel> DOMForms() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "JavaScript Form Validation",
                "HTML form validation can be done by JavaScript.\n" +
                        "\n" +
                        "If a form field (fname) is empty, this function alerts a message, and returns false, to prevent the form from being submitted:",
                "function validateForm() {\n" +
                        "  let x = document.forms[\"myForm\"][\"fname\"].value;\n" +
                        "  if (x == \"\") {\n" +
                        "    alert(\"Name must be filled out\");\n" +
                        "    return false;\n" +
                        "  }\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Automatic HTML Form Validation",
                "HTML form validation can be performed automatically by the browser:\n" +
                        "\n" +
                        "If a form field (fname) is empty, the required attribute prevents this form from being submitted:",
                "<form action=\"/action_page.php\" method=\"post\">\n" +
                        "  <input type=\"text\" name=\"fname\" required>\n" +
                        "  <input type=\"submit\" value=\"Submit\">\n" +
                        "</form>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Data Validation",
                "Data validation is the process of ensuring that user input is clean, correct, and useful.\n" +
                        "\n" +
                        "Typical validation tasks are:\n" +
                        "\n" +
                        "has the user filled in all required fields?\n" +
                        "has the user entered a valid date?\n" +
                        "has the user entered text in a numeric field?\n" +
                        "Most often, the purpose of data validation is to ensure correct user input.\n" +
                        "\n" +
                        "Validation can be defined by many different methods, and deployed in many different ways.\n" +
                        "\n" +
                        "Server side validation is performed by a web server, after input has been sent to the server.\n" +
                        "\n" +
                        "Client side validation is performed by a web browser, before input is sent to a web server.",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);

        return list;
    }

    //DOM CSS
    private static List<LearnDetailsModel> DOMCSS() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "HTML DOM - Changing CSS",
                "The HTML DOM allows JavaScript to change the style of HTML elements.\n" +
                        "\n" +
                        "Changing HTML Style\n" +
                        "To change the style of an HTML element, use this syntax:\n" +
                        "\n" +
                        "document.getElementById(id).style.property = new style\n" +
                        "The following example changes the style of a <p> element:",
                "<html>\n" +
                        "<body>\n" +
                        "\n" +
                        "<p id=\"p2\">Hello World!</p>\n" +
                        "\n" +
                        "<script>\n" +
                        "document.getElementById(\"p2\").style.color = \"blue\";\n" +
                        "</script>\n" +
                        "\n" +
                        "</body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Using Events",
                "The HTML DOM allows you to execute code when an event occurs.\n" +
                        "\n" +
                        "Events are generated by the browser when \"things happen\" to HTML elements:\n" +
                        "\n" +
                        "An element is clicked on\n" +
                        "The page has loaded\n" +
                        "Input fields are changed\n" +
                        "You will learn more about events in the next chapter of this tutorial.\n" +
                        "\n" +
                        "This example changes the style of the HTML element with id=\"id1\", when the user clicks a button:",
                "<!DOCTYPE html>\n" +
                        "<html>\n" +
                        "<body>\n" +
                        "\n" +
                        "<h1 id=\"id1\">My Heading 1</h1>\n" +
                        "\n" +
                        "<button type=\"button\"\n" +
                        "onclick=\"document.getElementById('id1').style.color = 'red'\">\n" +
                        "Click Me!</button>\n" +
                        "\n" +
                        "</body>\n" +
                        "</html>",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //DOM Animations
    private static List<LearnDetailsModel> DOMAnimations() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "A Basic Web Page",
                "Learn to create HTML animations using JavaScript. To demonstrate how to create HTML animations with JavaScript, we will use a simple web page:",
                "<!DOCTYPE html>\n" +
                        "<html>\n" +
                        "<body>\n" +
                        "\n" +
                        "<h1>My First JavaScript Animation</h1>\n" +
                        "\n" +
                        "<div id=\"animation\">My animation will go here</div>\n" +
                        "\n" +
                        "</body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Create an Animation Container",
                "All animations should be relative to a container element.",
                "<div id =\"container\">\n" +
                        "  <div id =\"animate\">My animation will go here</div>\n" +
                        "</div>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Style the Elements",
                "The container element should be created with style = \"position: relative\".\n" +
                        "\n" +
                        "The animation element should be created with style = \"position: absolute\".",
                "#container {\n" +
                        "  width: 400px;\n" +
                        "  height: 400px;\n" +
                        "  position: relative;\n" +
                        "  background: yellow;\n" +
                        "}\n" +
                        "#animate {\n" +
                        "  width: 50px;\n" +
                        "  height: 50px;\n" +
                        "  position: absolute;\n" +
                        "  background: red;\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Animation Code",
                "JavaScript animations are done by programming gradual changes in an element's style.\n" +
                        "\n" +
                        "The changes are called by a timer. When the timer interval is small, the animation looks continuous.\n" +
                        "\n" +
                        "The basic code is:",
                "id = setInterval(frame, 5);\n" +
                        "\n" +
                        "function frame() {\n" +
                        "  if (/* test for finished */) {\n" +
                        "    clearInterval(id);\n" +
                        "  } else {\n" +
                        "    /* code to change the element style */ \n" +
                        "  }\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Full Animation",
                "Create the Full Animation Using JavaScript",
                "function myMove() {\n" +
                        "  let id = null;\n" +
                        "  const elem = document.getElementById(\"animate\");\n" +
                        "  let pos = 0;\n" +
                        "  clearInterval(id);\n" +
                        "  id = setInterval(frame, 5);\n" +
                        "  function frame() {\n" +
                        "    if (pos == 350) {\n" +
                        "      clearInterval(id);\n" +
                        "    } else {\n" +
                        "      pos++;\n" +
                        "      elem.style.top = pos + 'px';\n" +
                        "      elem.style.left = pos + 'px';\n" +
                        "    }\n" +
                        "  }\n" +
                        "}",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);

        return list;
    }

    //BOM
    //JavaScript Window
    private static List<LearnDetailsModel> JSWindow() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "JavaScript Window",
                "The Browser Object Model (BOM) allows JavaScript to \"talk to\" the browser.\n" +
                        "\n" +
                        "The Browser Object Model (BOM)\n" +
                        "There are no official standards for the Browser Object Model (BOM).\n" +
                        "\n" +
                        "Since modern browsers have implemented (almost) the same methods and properties for JavaScript interactivity, it is often referred to, as methods and properties of the BOM.\n" +
                        "\n" +
                        "The Window Object\n" +
                        "The window object is supported by all browsers. It represents the browser's window.\n" +
                        "\n" +
                        "All global JavaScript objects, functions, and variables automatically become members of the window object.\n" +
                        "\n" +
                        "Global variables are properties of the window object.\n" +
                        "\n" +
                        "Global functions are methods of the window object.\n" +
                        "\n" +
                        "Even the document object (of the HTML DOM) is a property of the window object:\n" +
                        "\n" +
                        "window.document.getElementById(\"header\");\n" +
                        "is the same as:\n" +
                        "\n" +
                        "document.getElementById(\"header\");",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Window Size",
                "Two properties can be used to determine the size of the browser window.\n" +
                        "\n" +
                        "Both properties return the sizes in pixels:\n" +
                        "\n" +
                        "window.innerHeight - the inner height of the browser window (in pixels)\n" +
                        "window.innerWidth - the inner width of the browser window (in pixels)\n" +
                        "The browser window (the browser viewport) is NOT including toolbars and scrollbars.",
                "let w = window.innerWidth;\n" +
                        "let h = window.innerHeight;",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Other Window Methods",
                "Some other methods:\n" +
                        "\n" +
                        "window.open() - open a new window\n" +
                        "window.close() - close the current window\n" +
                        "window.moveTo() - move the current window\n" +
                        "window.resizeTo() - resize the current window",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);

        return list;
    }

    //JS Screen
    private static List<LearnDetailsModel> JSScreen() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Window Screen",
                "The window.screen object contains information about the user's screen.The window.screen object can be written without the window prefix.\n" +
                        "\n" +
                        "Properties:\n" +
                        "\n" +
                        "screen.width\n" +
                        "screen.height\n" +
                        "screen.availWidth\n" +
                        "screen.availHeight\n" +
                        "screen.colorDepth\n" +
                        "screen.pixelDepth",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Window Screen Width",
                "The screen.width property returns the width of the visitor's screen in pixels.",
                "document.getElementById(\"demo\").innerHTML =\n" +
                        "\"Screen Width: \" + screen.width;",
                "Screen Width: 1549"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Window Screen Height",
                "The screen.height property returns the height of the visitor's screen in pixels.",
                "document.getElementById(\"demo\").innerHTML =\n" +
                        "\"Screen Height: \" + screen.height;",
                "Screen Height: 872"
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Window Screen Available Width",
                "The screen.availWidth property returns the width of the visitor's screen, in pixels, minus interface features like the Windows Taskbar.",
                "document.getElementById(\"demo\").innerHTML =\n" +
                        "\"Available Screen Width: \" + screen.availWidth;",
                "Available Screen Width: 1549"
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Window Screen Available Height",
                "The screen.availHeight property returns the height of the visitor's screen, in pixels, minus interface features like the Windows Taskbar.",
                "document.getElementById(\"demo\").innerHTML =\n" +
                        "\"Available Screen Height: \" + screen.availHeight;",
                "Available Screen Height: 848"
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Window Screen Color Depth",
                "The screen.colorDepth property returns the number of bits used to display one color.\n" +
                        "\n" +
                        "All modern computers use 24 bit or 32 bit hardware for color resolution:\n" +
                        "\n" +
                        "24 bits =      16,777,216 different \"True Colors\"\n" +
                        "32 bits = 4,294,967,296 different \"Deep Colors\"\n" +
                        "Older computers used 16 bits: 65,536 different \"High Colors\" resolution.\n" +
                        "\n" +
                        "Very old computers, and old cell phones used 8 bits: 256 different \"VGA colors\".",
                "document.getElementById(\"demo\").innerHTML =\n" +
                        "\"Screen Color Depth: \" + screen.colorDepth;",
                "Screen Color Depth: 24"
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Window Screen Pixel Depth",
                "The screen.pixelDepth property returns the pixel depth of the screen.",
                "document.getElementById(\"demo\").innerHTML =\n" +
                        "\"Screen Pixel Depth: \" + screen.pixelDepth;",
                "Screen Pixel Depth: 24"
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);

        return list;
    }

    //JS Location
    private static List<LearnDetailsModel> JSLocation() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Window Location",
                "The window.location object can be used to get the current page address (URL) and to redirect the browser to a new page." +
                        "\n\n" +
                        "The window.location object can be written without the window prefix.\n" +
                        "\n" +
                        "Some examples:\n" +
                        "\n" +
                        "window.location.href returns the href (URL) of the current page\n" +
                        "window.location.hostname returns the domain name of the web host\n" +
                        "window.location.pathname returns the path and filename of the current page\n" +
                        "window.location.protocol returns the web protocol used (http: or https:)\n" +
                        "window.location.assign() loads a new document",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Window Location Href",
                "The window.location.href property returns the URL of the current page.",
                "document.getElementById(\"demo\").innerHTML =\n" +
                        "\"Page location is \" + window.location.href;",
                "Page location is https://www.shrcreation.com/"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Window Location Hostname",
                "The window.location.hostname property returns the name of the internet host (of the current page).",
                "document.getElementById(\"demo\").innerHTML =\n" +
                        "\"Page hostname is \" + window.location.hostname;",
                "Page hostname is www.shrcreation.com"
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Window Location Pathname",
                "The window.location.pathname property returns the pathname of the current page.",
                "document.getElementById(\"demo\").innerHTML =\n" +
                        "\"Page path is \" + window.location.pathname;",
                "Page path is /js/js_window_location.asp"
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Window Location Protocol",
                "The window.location.protocol property returns the web protocol of the page.",
                "document.getElementById(\"demo\").innerHTML =\n" +
                        "\"Page protocol is \" + window.location.protocol;",
                "Page protocol is https:"
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Window Location Port",
                "The window.location.port property returns the number of the internet host port (of the current page).",
                "document.getElementById(\"demo\").innerHTML =\n" +
                        "\"Port number is \" + window.location.port;",
                "Port number is 443"
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Window Location Assign",
                "The window.location.assign() method loads a new document.",
                "<html>\n" +
                        "<head>\n" +
                        "<script>\n" +
                        "function newDoc() {\n" +
                        "  window.location.assign(\"https://www.shrcreation.com\")\n" +
                        "}\n" +
                        "</script>\n" +
                        "</head>\n" +
                        "<body>\n" +
                        "\n" +
                        "<input type=\"button\" value=\"Load new document\" onclick=\"newDoc()\">\n" +
                        "\n" +
                        "</body>\n" +
                        "</html>",
                "https://www.shrcreation.com/"
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);

        return list;
    }

    //JS History
    private static List<LearnDetailsModel> JSHistory() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Window History",
                "The window.history object contains the browsers history.The window.history object can be written without the window prefix.\n" +
                        "\n" +
                        "To protect the privacy of the users, there are limitations to how JavaScript can access this object.\n" +
                        "\n" +
                        "Some methods:\n" +
                        "\n" +
                        "history.back() - same as clicking back in the browser\n" +
                        "history.forward() - same as clicking forward in the browser",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Window History Back",
                "The history.back() method loads the previous URL in the history list.\n" +
                        "\n" +
                        "This is the same as clicking the Back button in the browser.",
                "<html>\n" +
                        "<head>\n" +
                        "<script>\n" +
                        "function goBack() {\n" +
                        "  window.history.back()\n" +
                        "}\n" +
                        "</script>\n" +
                        "</head>\n" +
                        "<body>\n" +
                        "\n" +
                        "<input type=\"button\" value=\"Back\" onclick=\"goBack()\">\n" +
                        "\n" +
                        "</body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Window History Forward",
                "The history.forward() method loads the next URL in the history list.\n" +
                        "\n" +
                        "This is the same as clicking the Forward button in the browser.",
                "<html>\n" +
                        "<head>\n" +
                        "<script>\n" +
                        "function goForward() {\n" +
                        "  window.history.forward()\n" +
                        "}\n" +
                        "</script>\n" +
                        "</head>\n" +
                        "<body>\n" +
                        "\n" +
                        "<input type=\"button\" value=\"Forward\" onclick=\"goForward()\">\n" +
                        "\n" +
                        "</body>\n" +
                        "</html>",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //JS Navigator
    private static List<LearnDetailsModel> JSNavigator() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Window Navigator",
                "The window.navigator object contains information about the visitor's browser.The window.navigator object can be written without the window prefix.\n" +
                        "\n" +
                        "Some examples:\n" +
                        "\n" +
                        "navigator.appName\n" +
                        "navigator.appCodeName\n" +
                        "navigator.platform",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Browser Cookies",
                "The cookieEnabled property returns true if cookies are enabled, otherwise false:",
                "<p id=\"demo\"></p>\n" +
                        "\n" +
                        "<script>\n" +
                        "document.getElementById(\"demo\").innerHTML =\n" +
                        "\"cookiesEnabled is \" + navigator.cookieEnabled;\n" +
                        "</script>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Browser Application Name",
                "The appName property returns the application name of the browser:",
                "<p id=\"demo\"></p>\n" +
                        "\n" +
                        "<script>\n" +
                        "document.getElementById(\"demo\").innerHTML =\n" +
                        "\"navigator.appName is \" + navigator.appName;\n" +
                        "</script>",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Browser Application Code Name",
                "The appCodeName property returns the application code name of the browser:",
                "<p id=\"demo\"></p>\n" +
                        "\n" +
                        "<script>\n" +
                        "document.getElementById(\"demo\").innerHTML =\n" +
                        "\"navigator.appCodeName is \" + navigator.appCodeName;\n" +
                        "</script>",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "The Browser Platform",
                "The platform property returns the browser platform (operating system):",
                "<p id=\"demo\"></p>\n" +
                        "\n" +
                        "<script>\n" +
                        "document.getElementById(\"demo\").innerHTML = navigator.platform;\n" +
                        "</script>",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }

    //JS Timing
    private static List<LearnDetailsModel> JSTiming() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Timing Events",
                "The window object allows execution of code at specified time intervals.\n" +
                        "\n" +
                        "These time intervals are called timing events.\n" +
                        "\n" +
                        "The two key methods to use with JavaScript are:\n" +
                        "\n" +
                        "setTimeout(function, milliseconds)\n" +
                        "Executes a function, after waiting a specified number of milliseconds.\n" +
                        "\n" +
                        "setInterval(function, milliseconds)\n" +
                        "Same as setTimeout(), but repeats the execution of the function continuously.\n" +
                        "The setTimeout() and setInterval() are both methods of the HTML DOM Window object.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "The setTimeout() Method",
                "The window.setTimeout() method can be written without the window prefix.\n" +
                        "\n" +
                        "The first parameter is a function to be executed.\n" +
                        "\n" +
                        "The second parameter indicates the number of milliseconds before execution." +
                        "\n\n" +
                        "window.setTimeout(function, milliseconds);",
                "<button onclick=\"setTimeout(myFunction, 3000)\">Try it</button>\n" +
                        "\n" +
                        "<script>\n" +
                        "function myFunction() {\n" +
                        "  alert('Hello');\n" +
                        "}\n" +
                        "</script>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "How to Stop the Execution?",
                "The clearTimeout() method stops the execution of the function specified in setTimeout().\n" +
                        "\n" +
                        "window.clearTimeout(timeoutVariable)\n" +
                        "The window.clearTimeout() method can be written without the window prefix.\n" +
                        "\n" +
                        "The clearTimeout() method uses the variable returned from setTimeout():\n" +
                        "\n" +
                        "myVar = setTimeout(function, milliseconds);\n" +
                        "clearTimeout(myVar);\n" +
                        "If the function has not already been executed, you can stop the execution by calling the clearTimeout() method:",
                "<button onclick=\"myVar = setTimeout(myFunction, 3000)\">Try it</button>\n" +
                        "\n" +
                        "<button onclick=\"clearTimeout(myVar)\">Stop it</button>",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "The setInterval() Method",
                "The setInterval() method repeats a given function at every given time-interval.\n" +
                        "\n" +
                        "window.setInterval(function, milliseconds);\n" +
                        "The window.setInterval() method can be written without the window prefix.\n" +
                        "\n" +
                        "The first parameter is the function to be executed.\n" +
                        "\n" +
                        "The second parameter indicates the length of the time-interval between each execution.\n" +
                        "\n" +
                        "This example executes a function called \"myTimer\" once every second (like a digital watch).",
                "setInterval(myTimer, 1000);\n" +
                        "\n" +
                        "function myTimer() {\n" +
                        "  const d = new Date();\n" +
                        "  document.getElementById(\"demo\").innerHTML = d.toLocaleTimeString();\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "How to Stop the Execution?",
                "The clearInterval() method stops the executions of the function specified in the setInterval() method.\n" +
                        "\n" +
                        "window.clearInterval(timerVariable)\n" +
                        "The window.clearInterval() method can be written without the window prefix.\n" +
                        "\n" +
                        "The clearInterval() method uses the variable returned from setInterval():\n" +
                        "\n" +
                        "let myVar = setInterval(function, milliseconds);\n" +
                        "clearInterval(myVar);",
                "<p id=\"demo\"></p>\n" +
                        "\n" +
                        "<button onclick=\"clearInterval(myVar)\">Stop time</button>\n" +
                        "\n" +
                        "<script>\n" +
                        "let myVar = setInterval(myTimer, 1000);\n" +
                        "function myTimer() {\n" +
                        "  const d = new Date();\n" +
                        "  document.getElementById(\"demo\").innerHTML = d.toLocaleTimeString();\n" +
                        "}\n" +
                        "</script>",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);

        return list;
    }

    //JS Cookies
    private static List<LearnDetailsModel> JSCookies() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What are Cookies?",
                "Cookies are data, stored in small text files, on your computer.\n" +
                        "\n" +
                        "When a web server has sent a web page to a browser, the connection is shut down, and the server forgets everything about the user.\n" +
                        "\n" +
                        "Cookies were invented to solve the problem \"how to remember information about the user\":\n" +
                        "\n" +
                        "When a user visits a web page, his/her name can be stored in a cookie.\n" +
                        "Next time the user visits the page, the cookie \"remembers\" his/her name.\n" +
                        "Cookies are saved in name-value pairs like:\n" +
                        "\n" +
                        "username = John Doe\n" +
                        "When a browser requests a web page from a server, cookies belonging to the page are added to the request. This way the server gets the necessary data to \"remember\" information about users.\n" +
                        "\n" +
                        "None of the examples below will work if your browser has local cookies support turned off.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Create a Cookie with JavaScript",
                "JavaScript can create, read, and delete cookies with the document.cookie property.\n" +
                        "\n" +
                        "With JavaScript, a cookie can be created like this:\n" +
                        "\n" +
                        "document.cookie = \"username=Anne Moore\";\n" +
                        "You can also add an expiry date (in UTC time). By default, the cookie is deleted when the browser is closed:\n" +
                        "\n" +
                        "document.cookie = \"username=Anne Moore; expires=Thu, 1 Jan 2022 12:00:00 UTC\";\n" +
                        "With a path parameter, you can tell the browser what path the cookie belongs to. By default, the cookie belongs to the current page.\n" +
                        "\n" +
                        "document.cookie = \"username=Anne Moore; expires=Thu, 1 Jan 2022 12:00:00 UTC; path=/\";" +
                        "\n\n" +
                        "Read a Cookie with JavaScript" +
                        "\n\n" +
                        "With JavaScript, cookies can be read like this:\n" +
                        "\n" +
                        "var x = document.cookie;" +
                        "\n\n" +
                        "Change a Cookie with JavaScript" +
                        "\n\n" +
                        "With JavaScript, you can change a cookie the same way as you create it:\n" +
                        "\n" +
                        "document.cookie = \"username=John Smith; expires=Thu, 1 Jan 2022 12:00:00 UTC; path=/\";\n" +
                        "The old cookie is overwritten.\n" +
                        "\n\n" +
                        "Delete a Cookie with JavaScript" +
                        "\n\n" +
                        "Deleting a cookie is very simple.\n" +
                        "\n" +
                        "You don't have to specify a cookie value when you delete a cookie.\n" +
                        "\n" +
                        "Just set the expires parameter to a past date:\n" +
                        "\n" +
                        "document.cookie = \"username=; expires=Thu, 01 Jan 2022 00:00:00 UTC; path=/;\";",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "The Cookie String",
                "The document.cookie property looks like a normal text string. But it is not.\n" +
                        "\n" +
                        "Even if you write a whole cookie string to document.cookie, when you read it out again, you can only see the name-value pair of it.\n" +
                        "\n" +
                        "If you set a new cookie, older cookies are not overwritten. The new cookie is added to document.cookie, so if you read document.cookie again you will get something like:\n" +
                        "\n" +
                        "cookie1 = value; cookie2 = value;",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "JavaScript Cookie Example",
                "In the example to follow, we will create a cookie that stores the name of a visitor.\n" +
                        "\n" +
                        "The first time a visitor arrives to the web page, he/she will be asked to fill in his/her name. The name is then stored in a cookie.\n" +
                        "\n" +
                        "The next time the visitor arrives at the same page, he/she will get a welcome message.\n" +
                        "\n" +
                        "For the example we will create 3 JavaScript functions:\n" +
                        "\n" +
                        "A function to set a cookie value\n" +
                        "A function to get a cookie value\n" +
                        "A function to check a cookie value",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "A Function to Set a Cookie",
                "First, we create a function that stores the name of the visitor in a cookie variable:\n\n" +
                        "Example explained:\n" +
                        "\n" +
                        "The parameters of the function above are the name of the cookie (cname), the value of the cookie (cvalue), and the number of days until the cookie should expire (exdays).\n" +
                        "\n" +
                        "The function sets a cookie by adding together the cookiename, the cookie value, and the expires string.",
                "function setCookie(cname, cvalue, exdays) {\n" +
                        "  const d = new Date();\n" +
                        "  d.setTime(d.getTime() + (exdays*24*60*60*1000));\n" +
                        "  let expires = \"expires=\"+ d.toUTCString();\n" +
                        "  document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "A Function to Get a Cookie",
                "Then, we create a function that returns the value of a specified cookie:" +
                        "\n\n" +
                        "Function explained:\n" +
                        "\n" +
                        "Take the cookiename as parameter (cname).\n" +
                        "\n" +
                        "Create a variable (name) with the text to search for (cname + \"=\").\n" +
                        "\n" +
                        "Decode the cookie string, to handle cookies with special characters, e.g. '$'\n" +
                        "\n" +
                        "Split document.cookie on semicolons into an array called ca (ca = decodedCookie.split(';')).\n" +
                        "\n" +
                        "Loop through the ca array (i = 0; i < ca.length; i++), and read out each value c = ca[i]).\n" +
                        "\n" +
                        "If the cookie is found (c.indexOf(name) == 0), return the value of the cookie (c.substring(name.length, c.length).\n" +
                        "\n" +
                        "If the cookie is not found, return \"\".",
                "function getCookie(cname) {\n" +
                        "  let name = cname + \"=\";\n" +
                        "  let decodedCookie = decodeURIComponent(document.cookie);\n" +
                        "  let ca = decodedCookie.split(';');\n" +
                        "  for(let i = 0; i <ca.length; i++) {\n" +
                        "    let c = ca[i];\n" +
                        "    while (c.charAt(0) == ' ') {\n" +
                        "      c = c.substring(1);\n" +
                        "    }\n" +
                        "    if (c.indexOf(name) == 0) {\n" +
                        "      return c.substring(name.length, c.length);\n" +
                        "    }\n" +
                        "  }\n" +
                        "  return \"\";\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "A Function to Check a Cookie",
                "Last, we create the function that checks if a cookie is set.\n" +
                        "\n" +
                        "If the cookie is set it will display a greeting.\n" +
                        "\n" +
                        "If the cookie is not set, it will display a prompt box, asking for the name of the user, and stores the username cookie for 365 days, by calling the setCookie function:",
                "function checkCookie() {\n" +
                        "  let username = getCookie(\"username\");\n" +
                        "  if (username != \"\") {\n" +
                        "   alert(\"Welcome again \" + username);\n" +
                        "  } else {\n" +
                        "    username = prompt(\"Please enter your name:\", \"\");\n" +
                        "    if (username != \"\" && username != null) {\n" +
                        "      setCookie(\"username\", username, 365);\n" +
                        "    }\n" +
                        "  }\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l8 = new LearnDetailsModel(
                "All Together Now",
                "All examples in together.",
                "function setCookie(cname, cvalue, exdays) {\n" +
                        "  const d = new Date();\n" +
                        "  d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));\n" +
                        "  let expires = \"expires=\"+d.toUTCString();\n" +
                        "  document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n" +
                        "}\n" +
                        "\n" +
                        "function getCookie(cname) {\n" +
                        "  let name = cname + \"=\";\n" +
                        "  let ca = document.cookie.split(';');\n" +
                        "  for(let i = 0; i < ca.length; i++) {\n" +
                        "    let c = ca[i];\n" +
                        "    while (c.charAt(0) == ' ') {\n" +
                        "      c = c.substring(1);\n" +
                        "    }\n" +
                        "    if (c.indexOf(name) == 0) {\n" +
                        "      return c.substring(name.length, c.length);\n" +
                        "    }\n" +
                        "  }\n" +
                        "  return \"\";\n" +
                        "}\n" +
                        "\n" +
                        "function checkCookie() {\n" +
                        "  let user = getCookie(\"username\");\n" +
                        "  if (user != \"\") {\n" +
                        "    alert(\"Welcome again \" + user);\n" +
                        "  } else {\n" +
                        "    user = prompt(\"Please enter your name:\", \"\");\n" +
                        "    if (user != \"\" && user != null) {\n" +
                        "      setCookie(\"username\", user, 365);\n" +
                        "    }\n" +
                        "  }\n" +
                        "}\n",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        list.add(l8);
        return list;
    }

    //Advanced
    //JS Error Handling
    private static List<LearnDetailsModel> JSErrorHandling() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Syntax Errors",
                "Syntax errors, also called parsing errors, occur at compile time in traditional programming languages and at interpret time in JavaScript.\n" +
                        "\n" +
                        "For example, the following line causes a syntax error because it is missing a closing parenthesis.\n" +
                        "\n" +
                        "<script type = \"text/javascript\">\n" +
                        "   <!--\n" +
                        "      window.print(;\n" +
                        "   //-->\n" +
                        "</script>\n" +
                        "When a syntax error occurs in JavaScript, only the code contained within the same thread as the syntax error is affected and the rest of the code in other threads gets executed assuming nothing in them depends on the code containing the error.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Runtime Errors",
                "Runtime errors, also called exceptions, occur during execution (after compilation/interpretation).\n" +
                        "\n" +
                        "For example, the following line causes a runtime error because here the syntax is correct, but at runtime, it is trying to call a method that does not exist.\n" +
                        "\n" +
                        "<script type = \"text/javascript\">\n" +
                        "   <!--\n" +
                        "      window.printme();\n" +
                        "   //-->\n" +
                        "</script>\n" +
                        "Exceptions also affect the thread in which they occur, allowing other JavaScript threads to continue normal execution.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Logical Errors",
                "Logic errors can be the most difficult type of errors to track down. These errors are not the result of a syntax or runtime error. Instead, they occur when you make a mistake in the logic that drives your script and you do not get the result you expected.\n" +
                        "\n" +
                        "You cannot catch those errors, because it depends on your business requirement what type of logic you want to put in your program.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "The try...catch...finally Statement",
                "The latest versions of JavaScript added exception handling capabilities. JavaScript implements the try...catch...finally construct as well as the throw operator to handle exceptions.\n" +
                        "\n" +
                        "You can catch programmer-generated and runtime exceptions, but you cannot catch JavaScript syntax errors.\n" +
                        "\n" +
                        "Here is the try...catch...finally block syntax −\n" +
                        "\n" +
                        "<script type = \"text/javascript\">\n" +
                        "   <!--\n" +
                        "      try {\n" +
                        "         // Code to run\n" +
                        "         [break;]\n" +
                        "      } \n" +
                        "      \n" +
                        "      catch ( e ) {\n" +
                        "         // Code to run if an exception occurs\n" +
                        "         [break;]\n" +
                        "      }\n" +
                        "      \n" +
                        "      [ finally {\n" +
                        "         // Code that is always executed regardless of \n" +
                        "         // an exception occurring\n" +
                        "      }]\n" +
                        "   //-->\n" +
                        "</script>\n" +
                        "The try block must be followed by either exactly one catch block or one finally block (or one of both). When an exception occurs in the try block, the exception is placed in e and the catch block is executed. The optional finally block executes unconditionally after try/catch.",
                "<html>\n" +
                        "   <head>      \n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         <!--\n" +
                        "            function myFunc() {\n" +
                        "               var a = 100;\n" +
                        "               alert(\"Value of variable a is : \" + a );\n" +
                        "            }\n" +
                        "         //-->\n" +
                        "      </script>      \n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>\n" +
                        "      <p>Click the following to see the result:</p>\n" +
                        "      \n" +
                        "      <form>\n" +
                        "         <input type = \"button\" value = \"Click Me\" onclick = \"myFunc();\" />\n" +
                        "      </form>      \n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "The throw Statement",
                "You can use throw statement to raise your built-in exceptions or your customized exceptions. Later these exceptions can be captured and you can take an appropriate action.\n" +
                        "\n" +
                        "Example\n" +
                        "The following example demonstrates how to use a throw statement.",
                "<html>\n" +
                        "   <head>\n" +
                        "      \n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         <!--\n" +
                        "            function myFunc() {\n" +
                        "               var a = 100;\n" +
                        "               var b = 0;\n" +
                        "               \n" +
                        "               try {\n" +
                        "                  if ( b == 0 ) {\n" +
                        "                     throw( \"Divide by zero error.\" ); \n" +
                        "                  } else {\n" +
                        "                     var c = a / b;\n" +
                        "                  }\n" +
                        "               }\n" +
                        "               catch ( e ) {\n" +
                        "                  alert(\"Error: \" + e );\n" +
                        "               }\n" +
                        "            }\n" +
                        "         //-->\n" +
                        "      </script>\n" +
                        "      \n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <p>Click the following to see the result:</p>\n" +
                        "      \n" +
                        "      <form>\n" +
                        "         <input type = \"button\" value = \"Click Me\" onclick = \"myFunc();\" />\n" +
                        "      </form>\n" +
                        "      \n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }

    //JS Validations
    private static List<LearnDetailsModel> JSValidations() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "JavaScript - Form Validation",
                "Form validation normally used to occur at the server, after the client had entered all the necessary data and then pressed the Submit button. If the data entered by a client was incorrect or was simply missing, the server would have to send all the data back to the client and request that the form be resubmitted with correct information. This was really a lengthy process which used to put a lot of burden on the server.\n" +
                        "\n" +
                        "JavaScript provides a way to validate form's data on the client's computer before sending it to the web server. Form validation generally performs two functions.\n" +
                        "\n" +
                        "Basic Validation − First of all, the form must be checked to make sure all the mandatory fields are filled in. It would require just a loop through each field in the form and check for data.\n" +
                        "\n" +
                        "Data Format Validation − Secondly, the data that is entered must be checked for correct form and value. Your code must include appropriate logic to test correctness of data.",
                "<html>   \n" +
                        "   <head>\n" +
                        "      <title>Form Validation</title>      \n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         <!--\n" +
                        "            // Form validation code will come here.\n" +
                        "         //-->\n" +
                        "      </script>      \n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>\n" +
                        "      <form action = \"/cgi-bin/test.cgi\" name = \"myForm\" onsubmit = \"return(validate());\">\n" +
                        "         <table cellspacing = \"2\" cellpadding = \"2\" border = \"1\">\n" +
                        "            \n" +
                        "            <tr>\n" +
                        "               <td align = \"right\">Name</td>\n" +
                        "               <td><input type = \"text\" name = \"Name\" /></td>\n" +
                        "            </tr>\n" +
                        "            \n" +
                        "            <tr>\n" +
                        "               <td align = \"right\">EMail</td>\n" +
                        "               <td><input type = \"text\" name = \"EMail\" /></td>\n" +
                        "            </tr>\n" +
                        "            \n" +
                        "            <tr>\n" +
                        "               <td align = \"right\">Zip Code</td>\n" +
                        "               <td><input type = \"text\" name = \"Zip\" /></td>\n" +
                        "            </tr>\n" +
                        "            \n" +
                        "            <tr>\n" +
                        "               <td align = \"right\">Country</td>\n" +
                        "               <td>\n" +
                        "                  <select name = \"Country\">\n" +
                        "                     <option value = \"-1\" selected>[choose yours]</option>\n" +
                        "                     <option value = \"1\">USA</option>\n" +
                        "                     <option value = \"2\">UK</option>\n" +
                        "                     <option value = \"3\">BD</option>\n" +
                        "                  </select>\n" +
                        "               </td>\n" +
                        "            </tr>\n" +
                        "            \n" +
                        "            <tr>\n" +
                        "               <td align = \"right\"></td>\n" +
                        "               <td><input type = \"submit\" value = \"Submit\" /></td>\n" +
                        "            </tr>\n" +
                        "            \n" +
                        "         </table>\n" +
                        "      </form>      \n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Basic Form Validation",
                "First let us see how to do a basic form validation. In the above form, we are calling validate() to validate data when onsubmit event is occurring. The following code shows the implementation of this validate() function.",
                "<script type = \"text/javascript\">\n" +
                        "   <!--\n" +
                        "      // Form validation code will come here.\n" +
                        "      function validate() {\n" +
                        "      \n" +
                        "         if( document.myForm.Name.value == \"\" ) {\n" +
                        "            alert( \"Please provide your name!\" );\n" +
                        "            document.myForm.Name.focus() ;\n" +
                        "            return false;\n" +
                        "         }\n" +
                        "         if( document.myForm.EMail.value == \"\" ) {\n" +
                        "            alert( \"Please provide your Email!\" );\n" +
                        "            document.myForm.EMail.focus() ;\n" +
                        "            return false;\n" +
                        "         }\n" +
                        "         if( document.myForm.Zip.value == \"\" || isNaN( document.myForm.Zip.value ) ||\n" +
                        "            document.myForm.Zip.value.length != 5 ) {\n" +
                        "            \n" +
                        "            alert( \"Please provide a zip in the format #####.\" );\n" +
                        "            document.myForm.Zip.focus() ;\n" +
                        "            return false;\n" +
                        "         }\n" +
                        "         if( document.myForm.Country.value == \"-1\" ) {\n" +
                        "            alert( \"Please provide your country!\" );\n" +
                        "            return false;\n" +
                        "         }\n" +
                        "         return( true );\n" +
                        "      }\n" +
                        "   //-->\n" +
                        "</script>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Data Format Validation",
                "Now we will see how we can validate our entered form data before submitting it to the web server.\n" +
                        "\n" +
                        "The following example shows how to validate an entered email address. An email address must contain at least a ‘@’ sign and a dot (.). Also, the ‘@’ must not be the first character of the email address, and the last dot must at least be one character after the ‘@’ sign.",
                "<script type = \"text/javascript\">\n" +
                        "   <!--\n" +
                        "      function validateEmail() {\n" +
                        "         var emailID = document.myForm.EMail.value;\n" +
                        "         atPosition = emailID.indexOf(\"@\");\n" +
                        "         dotPosition = emailID.lastIndexOf(\".\");\n" +
                        "         \n" +
                        "         if (atPosition < 1 || ( dotPosition - atPosition < 2 )) {\n" +
                        "            alert(\"Please enter correct email ID\")\n" +
                        "            document.myForm.EMail.focus() ;\n" +
                        "            return false;\n" +
                        "         }\n" +
                        "         return( true );\n" +
                        "      }\n" +
                        "   //-->\n" +
                        "</script>",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //JS Multimedia
    private static List<LearnDetailsModel> JSMultimedia() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "JavaScript Multimedia",
                "The JavaScript navigator object includes a child object called plugins. This object is an array, with one entry for each plug-in installed on the browser. The navigator.plugins object is supported only by Netscape, Firefox, and Mozilla only." +
                        "\n" +
                        "Here is an example that shows how to list down all the plug-on installed in your browser −",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>List of Plug-Ins</title>\n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>\n" +
                        "      <table border = \"1\">\n" +
                        "         <tr>\n" +
                        "            <th>Plug-in Name</th>\n" +
                        "            <th>Filename</th>\n" +
                        "            <th>Description</th>\n" +
                        "         </tr>\n" +
                        "         \n" +
                        "         <script language = \"JavaScript\" type = \"text/javascript\">\n" +
                        "            for (i = 0; i<navigator.plugins.length; i++) {\n" +
                        "               document.write(\"<tr><td>\");\n" +
                        "               document.write(navigator.plugins[i].name);\n" +
                        "               document.write(\"</td><td>\");\n" +
                        "               document.write(navigator.plugins[i].filename);\n" +
                        "               document.write(\"</td><td>\");\n" +
                        "               document.write(navigator.plugins[i].description);\n" +
                        "               document.write(\"</td></tr>\");\n" +
                        "            }\n" +
                        "         </script>\n" +
                        "      </table>      \n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Checking for Plug-Ins",
                "Each plug-in has an entry in the array. Each entry has the following properties −\n" +
                        "\n" +
                        "name − is the name of the plug-in.\n" +
                        "\n" +
                        "filename − is the executable file that was loaded to install the plug-in.\n" +
                        "\n" +
                        "description − is a description of the plug-in, supplied by the developer.\n" +
                        "\n" +
                        "mimeTypes − is an array with one entry for each MIME type supported by the plug-in.\n" +
                        "\n" +
                        "You can use these properties in a script to find out the installed plug-ins, and then using JavaScript, you can play appropriate multimedia file. Take a look at the following example.",
                "<html>   \n" +
                        "   <head>\n" +
                        "      <title>Using Plug-Ins</title>\n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>   \n" +
                        "      <script language = \"JavaScript\" type = \"text/javascript\">\n" +
                        "         media = navigator.mimeTypes[\"video/quicktime\"];\n" +
                        "         \n" +
                        "         if (media) {\n" +
                        "            document.write(\"<embed src = 'quick.mov' height = 100 width = 100>\");\n" +
                        "         } else {\n" +
                        "            document.write(\"<img src = 'quick.gif' height = 100 width = 100>\");\n" +
                        "         }\n" +
                        "      </script>      \n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Controlling Multimedia",
                "Let us take one real example which works in almost all the browsers −",
                "<html>   \n" +
                        "   <head>\n" +
                        "      <title>Using Embeded Object</title>\n" +
                        "      \n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         <!--\n" +
                        "            function play() {\n" +
                        "               if (!document.demo.IsPlaying()) {\n" +
                        "                  document.demo.Play();\n" +
                        "               }\n" +
                        "            }\n" +
                        "            function stop() {\n" +
                        "               if (document.demo.IsPlaying()) {\n" +
                        "                  document.demo.StopPlay();\n" +
                        "               }\n" +
                        "            }\n" +
                        "            function rewind() {\n" +
                        "               if (document.demo.IsPlaying()) {\n" +
                        "                  document.demo.StopPlay();\n" +
                        "               }\n" +
                        "               document.demo.Rewind();\n" +
                        "            }\n" +
                        "         //-->\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>      \n" +
                        "      <embed id = \"demo\" name = \"demo\"\n" +
                        "         src = \"http://www.amrood.com/games/kumite.swf\"\n" +
                        "         width = \"318\" height = \"300\" play = \"false\" loop = \"false\"\n" +
                        "         pluginspage = \"http://www.macromedia.com/go/getflashplayer\"\n" +
                        "         swliveconnect = \"true\">\n" +
                        "      \n" +
                        "      <form name = \"form\" id = \"form\" action = \"#\" method = \"get\">\n" +
                        "         <input type = \"button\" value = \"Start\" onclick = \"play();\" />\n" +
                        "         <input type = \"button\" value = \"Stop\" onclick = \"stop();\" />\n" +
                        "         <input type = \"button\" value = \"Rewind\" onclick = \"rewind();\" />\n" +
                        "      </form>      \n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);

        return list;
    }

    //JS Debugging
    private static List<LearnDetailsModel> JSDebugging() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "JavaScript Debugging",
                "Every now and then, developers commit mistakes while coding. A mistake in a program or a script is referred to as a bug.\n" +
                        "\n" +
                        "The process of finding and fixing bugs is called debugging and is a normal part of the development process. This section covers tools and techniques that can help you with debugging tasks..",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Error Messages in IE",
                "The most basic way to track down errors is by turning on error information in your browser. By default, Internet Explorer shows an error icon in the status bar when an error occurs on the page.\n" +
                        "\n" +
                        "Error Icon\n" +
                        "Double-clicking this icon takes you to a dialog box showing information about the specific error that occurred.\n" +
                        "\n" +
                        "Since this icon is easy to overlook, Internet Explorer gives you the option to automatically show the Error dialog box whenever an error occurs.\n" +
                        "\n" +
                        "To enable this option, select Tools → Internet Options → Advanced tab. and then finally check the \"Display a Notification About Every Script Error\" box option",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Error Messages in Firefox or Mozilla",
                "Other browsers like Firefox, Netscape, and Mozilla send error messages to a special window called the JavaScript Console or Error Console. To view the console, select Tools → Error Console or Web Development.\n" +
                        "\n" +
                        "Unfortunately, since these browsers give no visual indication when an error occurs, you must keep the Console open and watch for errors as your script executes.\n" +
                        "\n" +
                        "Error Console\n" +
                        "Error Notifications\n" +
                        "Error notifications that show up on Console or through Internet Explorer dialog boxes are the result of both syntax and runtime errors. These error notification include the line number at which the error occurred.\n" +
                        "\n" +
                        "If you are using Firefox, then you can click on the error available in the error console to go to the exact line in the script having error.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "How to debug a Script",
                "There are various ways to debug your JavaScript −\n" +
                        "\n" +
                        "Use a JavaScript Validator\n" +
                        "One way to check your JavaScript code for strange bugs is to run it through a program that checks it to make sure it is valid and that it follows the official syntax rules of the language. These programs are called validating parsers or just validators for short, and often come with commercial HTML and JavaScript editors.\n" +
                        "\n" +
                        "Simply visit that web page, paste your JavaScript (Only JavaScript) code into the text area provided, and click the jslint button. This program will parse through your JavaScript code, ensuring that all the variable and function definitions follow the correct syntax. It will also check JavaScript statements, such as if and while, to ensure they too follow the correct format\n" +
                        "\n" +
                        "Add Debugging Code to Your Programs\n" +
                        "You can use the alert() or document.write() methods in your program to debug your code. For example, you might write something as follows −",
                "var debugging = true;\n" +
                        "var whichImage = \"widget\";\n" +
                        "\n" +
                        "if( debugging )\n" +
                        "   alert( \"Calls swapImage() with argument: \" + whichImage );\n" +
                        "   var swapStatus = swapImage( whichImage );\n" +
                        "\n" +
                        "if( debugging )\n" +
                        "   alert( \"Exits swapImage() with swapStatus=\" + swapStatus );",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Useful Tips for Developers",
                "You can keep the following tips in mind to reduce the number of errors in your scripts and simplify the debugging process −\n" +
                        "\n" +
                        "Use plenty of comments. Comments enable you to explain why you wrote the script the way you did and to explain particularly difficult sections of code.\n" +
                        "\n" +
                        "Always use indentation to make your code easy to read. Indenting statements also makes it easier for you to match up beginning and ending tags, curly braces, and other HTML and script elements.\n" +
                        "\n" +
                        "Write modular code. Whenever possible, group your statements into functions. Functions let you group related statements, and test and reuse portions of code with minimal effort.\n" +
                        "\n" +
                        "Be consistent in the way you name your variables and functions. Try using names that are long enough to be meaningful and that describe the contents of the variable or the purpose of the function.\n" +
                        "\n" +
                        "Use consistent syntax when naming variables and functions. In other words, keep them all lowercase or all uppercase; if you prefer Camel-Back notation, use it consistently.\n" +
                        "\n" +
                        "Test long scripts in a modular fashion. In other words, do not try to write the entire script before testing any portion of it. Write a piece and get it to work before adding the next portion of code.\n" +
                        "\n" +
                        "Use descriptive variable and function names and avoid using single-character names.\n" +
                        "\n" +
                        "Watch your quotation marks. Remember that quotation marks are used in pairs around strings and that both quotation marks must be of the same style (either single or double).\n" +
                        "\n" +
                        "Watch your equal signs. You should not used a single = for comparison purpose.\n" +
                        "\n" +
                        "Declare variables explicitly using the var keyword.",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }

    //JS Web APIs
    private static List<LearnDetailsModel> JSWebAPIs() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is Web API?",
                "API stands for Application Programming Interface.\n" +
                        "\n" +
                        "A Web API is an application programming interface for the Web.\n" +
                        "\n" +
                        "A Browser API can extend the functionality of a web browser.\n" +
                        "\n" +
                        "A Server API can extend the functionality of a web server.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Browser APIs",
                "All browsers have a set of built-in Web APIs to support complex operations, and to help accessing data.\n" +
                        "\n" +
                        "For example, the Geolocation API can return the coordinates of where the browser is located.",
                "const myElement = document.getElementById(\"demo\");\n" +
                        "\n" +
                        "function getLocation() {\n" +
                        "  if (navigator.geolocation) {\n" +
                        "    navigator.geolocation.getCurrentPosition(showPosition);\n" +
                        "  } else {\n" +
                        "    myElement.innerHTML = \"Geolocation is not supported by this browser.\";\n" +
                        "  }\n" +
                        "}\n" +
                        "\n" +
                        "function showPosition(position) {\n" +
                        "  myElement.innerHTML = \"Latitude: \" + position.coords.latitude +\n" +
                        "  \"<br>Longitude: \" + position.coords.longitude;\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Third Party APIs",
                "Third party APIs are not built into your browser.\n" +
                        "\n" +
                        "To use these APIs, you will have to download the code from the Web.\n" +
                        "\n" +
                        "Examples:\n" +
                        "\n" +
                        "YouTube API - Allows you to display videos on a web site.\n" +
                        "Twitter API - Allows you to display Tweets on a web site.\n" +
                        "Facebook API - Allows you to display Facebook info on a web site.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //Web Storage API
    private static List<LearnDetailsModel> WebStorageAPI() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Web Storage API",
                "The Web Storage API is a simple syntax for storing and retrieving data in the browser. It is very easy to use:",
                "localStorage.setItem(\"name\", \"Anne Moore\");\n" +
                        "localStorage.getItem(\"name\");",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "The localStorage Object",
                "The localStorage object provides access to a local storage for a particular Web Site. It allows you to store, read, add, modify, and delete data items for that domain.\n" +
                        "\n" +
                        "The data is stored with no expiration date, and will not be deleted when the browser is closed.\n" +
                        "\n" +
                        "The data will be available for days, weeks, and years.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "The setItem() Method",
                "The localStorage.setItem() method stores a data item in a storage.\n" +
                        "\n" +
                        "It takes a name and a value as parameters:",
                "localStorage.setItem(\"name\", \"Anne Moore\");",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "The getItem() Method",
                "The localStorage.getItem() method retrieves a data item from the storage.\n" +
                        "\n" +
                        "It takes a name as parameter:",
                "localStorage.getItem(\"name\");",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "The sessionStorage Object",
                "The sessionStorage object is identical to the localStorage object.\n" +
                        "\n" +
                        "The difference is that the sessionStorage object stores data for one session.\n" +
                        "\n" +
                        "The data is deleted when the browser is closed.",
                "sessionStorage.getItem(\"name\");",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "The setItem() Method",
                "The sessionStorage.setItem() method stores a data item in a storage.\n" +
                        "\n" +
                        "It takes a name and a value as parameters:",
                "sessionStorage.setItem(\"name\", \"Anne Moore\");",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "The getItem() Method",
                "The sessionStorage.getItem() method retrieves a data item from the storage.\n" +
                        "\n" +
                        "It takes a name as parameter:",
                "sessionStorage.getItem(\"name\");",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        return list;
    }

    //Web Workers API
    private static List<LearnDetailsModel> WebWorkersAPI() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is a Web Worker?",
                "A web worker is a JavaScript running in the background, without affecting the performance of the page." +
                        "\n" +
                        "When executing scripts in an HTML page, the page becomes unresponsive until the script is finished.\n" +
                        "\n" +
                        "A web worker is a JavaScript that runs in the background, independently of other scripts, without affecting the performance of the page. You can continue to do whatever you want: clicking, selecting things, etc., while the web worker runs in the background.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Check Web Worker Support",
                "Before creating a web worker, check whether the user's browser supports it:",
                "if (typeof(Worker) !== \"undefined\") {\n" +
                        "  // Yes! Web worker support!\n" +
                        "  // Some code.....\n" +
                        "} else {\n" +
                        "  // Sorry! No Web Worker support..\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Create a Web Worker File",
                "Now, let's create our web worker in an external JavaScript.\n" +
                        "\n" +
                        "Here, we create a script that counts. The script is stored in the \"demo_workers.js\" file:",
                "let i = 0;\n" +
                        "\n" +
                        "function timedCount() {\n" +
                        "  i ++;\n" +
                        "  postMessage(i);\n" +
                        "  setTimeout(\"timedCount()\",500);\n" +
                        "}\n" +
                        "\n" +
                        "timedCount();",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Create a Web Worker Object",
                "Now that we have the web worker file, we need to call it from an HTML page.\n" +
                        "\n" +
                        "The following lines checks if the worker already exists, if not - it creates a new web worker object and runs the code in \"demo_workers.js\":\n" +
                        "\n" +
                        "if (typeof(w) == \"undefined\") {\n" +
                        "  w = new Worker(\"demo_workers.js\");\n" +
                        "}\n" +
                        "Then we can send and receive messages from the web worker.\n" +
                        "\n" +
                        "Add an \"onmessage\" event listener to the web worker.\n" +
                        "\n" +
                        "w.onmessage = function(event){\n" +
                        "  document.getElementById(\"result\").innerHTML = event.data;\n" +
                        "};\n" +
                        "When the web worker posts a message, the code within the event listener is executed. The data from the web worker is stored in event.data.",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Terminate a Web Worker",
                "When a web worker object is created, it will continue to listen for messages (even after the external script is finished) until it is terminated.\n" +
                        "\n" +
                        "To terminate a web worker, and free browser/computer resources, use the terminate() method:\n" +
                        "\n" +
                        "w.terminate();" +
                        "\n\n" +
                        "Reuse the Web Worker" +
                        "\n\n" +
                        "If you set the worker variable to undefined, after it has been terminated, you can reuse the code:\n" +
                        "\n" +
                        "w = undefined;",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }

    //JS Graphics
    private static List<LearnDetailsModel> JSGraphics() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "JavaScript Graphics",
                "JavaScript libraries to use for both Artificial Intelligence graphs and other charts:\n" +
                        "\n" +
                        "Plotly.js\n" +
                        "Chart.js\n" +
                        "Google Chart",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Plotly.js",
                "Plotly.js is a charting library that comes with over 40 chart types, 3D charts, statistical graphs, and SVG maps.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Chart.js",
                "Chart.js comes with many built-in chart types:\n" +
                        "\n" +
                        "Scatter\n" +
                        "Line\n" +
                        "Bar\n" +
                        "Radar\n" +
                        "Pie and Doughnut\n" +
                        "Polar Area\n" +
                        "Bubble",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Google Chart",
                "From simple line charts to complex tree maps, Google Chart provides a number of built-in chart types:\n" +
                        "\n" +
                        "Scatter Chart\n" +
                        "Line Chart\n" +
                        "Bar / Column Chart\n" +
                        "Area Chart\n" +
                        "Pie Chart\n" +
                        "Donut Chart\n" +
                        "Org Chart\n" +
                        "Map / Geo Chart",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        return list;
    }

    //AJAX
    //Ajax Introduction
    private static List<LearnDetailsModel> AjaxIntroduction() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Why to Learn Ajax?",
                "AJAX stands for Asynchronous JavaScript and XML. AJAX is a new technique for creating better, faster, and more interactive web applications with the help of XML, HTML, CSS, and Java Script.\n" +
                        "\n" +
                        "Ajax uses XHTML for content, CSS for presentation, along with Document Object Model and JavaScript for dynamic content display.\n" +
                        "\n" +
                        "Conventional web applications transmit information to and from the sever using synchronous requests. It means you fill out a form, hit submit, and get directed to a new page with new information from the server.\n" +
                        "\n" +
                        "With AJAX, when you hit submit, JavaScript will make a request to the server, interpret the results, and update the current screen. In the purest sense, the user would never know that anything was even transmitted to the server.\n" +
                        "\n" +
                        "XML is commonly used as the format for receiving server data, although any format, including plain text, can be used.\n" +
                        "\n" +
                        "AJAX is a web browser technology independent of web server software.\n" +
                        "\n" +
                        "A user can continue to use the application while the client program requests information from the server in the background.\n" +
                        "\n" +
                        "Intuitive and natural user interaction. Clicking is not required, mouse movement is a sufficient event trigger.\n" +
                        "\n" +
                        "Data-driven as opposed to page-driven.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Rich Internet Application Technology",
                "AJAX is the most viable Rich Internet Application (RIA) technology so far. It is getting tremendous industry momentum and several tool kit and frameworks are emerging. But at the same time, AJAX has browser incompatibility and it is supported by JavaScript, which is hard to maintain and debug.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "AJAX is Based on Open Standards",
                "AJAX is based on the following open standards −\n" +
                        "\n" +
                        "Browser-based presentation using HTML and Cascading Style Sheets (CSS).\n" +
                        "Data is stored in XML format and fetched from the server.\n" +
                        "Behind-the-scenes data fetches using XMLHttpRequest objects in the browser.\n" +
                        "JavaScript to make everything happen.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //Ajax XMLHttp
    private static List<LearnDetailsModel> AjaxXMLHttp() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "The XMLHttpRequest Object",
                "The XMLHttpRequest object is the key to AJAX. It has been available ever since Internet Explorer 5.5 was released in July 2000, but was not fully discovered until AJAX and Web 2.0 in 2005 became popular." +
                        "\n\n" +
                        "The keystone of AJAX is the XMLHttpRequest object.\n" +
                        "\n" +
                        "Create an XMLHttpRequest object\n" +
                        "Define a callback function\n" +
                        "Open the XMLHttpRequest object\n" +
                        "Send a Request to a server",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "The XMLHttpRequest Object",
                "All modern browsers support the XMLHttpRequest object.\n" +
                        "\n" +
                        "The XMLHttpRequest object can be used to exchange data with a web server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page.\n" +
                        "\n\n" +
                        "Create an XMLHttpRequest Object" +
                        "\n\n" +
                        "All modern browsers (Chrome, Firefox, IE, Edge, Safari, Opera) have a built-in XMLHttpRequest object.\n" +
                        "\n" +
                        "Syntax for creating an XMLHttpRequest object:\n" +
                        "\n" +
                        "variable = new XMLHttpRequest();",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Define a Callback Function",
                "A callback function is a function passed as a parameter to another function.\n" +
                        "\n" +
                        "In this case, the callback function should contain the code to execute when the response is ready.\n" +
                        "\n" +
                        "xhttp.onload = function() {\n" +
                        "  // What to do when the response is ready\n" +
                        "}",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Send a Request",
                "To send a request to a server, you can use the open() and send() methods of the XMLHttpRequest object:\n" +
                        "\n" +
                        "xhttp.open(\"GET\", \"ajax_info.txt\");\n" +
                        "xhttp.send();",
                "// Create an XMLHttpRequest object\n" +
                        "const xhttp = new XMLHttpRequest();\n" +
                        "\n" +
                        "// Define a callback function\n" +
                        "xhttp.onload = function() {\n" +
                        "  // Here you can use the Data\n" +
                        "}\n" +
                        "\n" +
                        "// Send a request\n" +
                        "xhttp.open(\"GET\", \"ajax_info.txt\");\n" +
                        "xhttp.send();",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Access Across Domains",
                "For security reasons, modern browsers do not allow access across domains.\n" +
                        "\n" +
                        "This means that both the web page and the XML file it tries to load, must be located on the same server.\n" +
                        "\n" +
                        "The examples on W3Schools all open XML files located on the W3Schools domain.\n" +
                        "\n" +
                        "If you want to use the example above on one of your own web pages, the XML files you load must be located on your own server.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }

    //AJAX Response
    private static List<LearnDetailsModel> AJAXResponse() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "AJAX - Server Response",
                "The responseText Property\n" +
                        "The responseText property returns the server response as a JavaScript string, and you can use it accordingly:",
                "document.getElementById(\"demo\").innerHTML = xhttp.responseText;",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "The responseXML Property",
                "The XMLHttpRequest object has an in-built XML parser.\n" +
                        "\n" +
                        "The responseXML property returns the server response as an XML DOM object.\n" +
                        "\n" +
                        "Using this property you can parse the response as an XML DOM object:",
                "const xmlDoc = xhttp.responseXML;\n" +
                        "const x = xmlDoc.getElementsByTagName(\"ARTIST\");\n" +
                        "\n" +
                        "let txt = \"\";\n" +
                        "for (let i = 0; i < x.length; i++) {\n" +
                        "  txt += x[i].childNodes[0].nodeValue + \"<br>\";\n" +
                        "}\n" +
                        "document.getElementById(\"demo\").innerHTML = txt;\n" +
                        "\n" +
                        "xhttp.open(\"GET\", \"cd_catalog.xml\");\n" +
                        "xhttp.send();",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "The getAllResponseHeaders() Method",
                "The getAllResponseHeaders() method returns all header information from the server response.",
                "const xhttp = new XMLHttpRequest();\n" +
                        "xhttp.onload = function() {\n" +
                        "    document.getElementById(\"demo\").innerHTML =\n" +
                        "    this.getAllResponseHeaders();\n" +
                        "}\n" +
                        "xhttp.open(\"GET\", \"ajax_info.txt\");\n" +
                        "xhttp.send();",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "The getResponseHeader() Method",
                "The getResponseHeader() method returns specific header information from the server response.",
                "const xhttp = new XMLHttpRequest();\n" +
                        "xhttp.onload = function() {\n" +
                        "    document.getElementById(\"demo\").innerHTML =\n" +
                        "    this.getResponseHeader(\"Last-Modified\");\n" +
                        "}\n" +
                        "xhttp.open(\"GET\", \"ajax_info.txt\");\n" +
                        "xhttp.send();",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);

        return list;
    }

    //AJAXPHP
    private static List<LearnDetailsModel> AJAXPHP() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "AJAX PHP Example",
                "AJAX is used to create more interactive applications.The following example demonstrates how a web page can communicate with a web server while a user types characters in an input field:" +
                        "\n\n" +
                        "Start typing a name in the input field below:\n" +
                        "\n" +
                        "Suggestions:\n" +
                        "\n" +
                        "First name: \n",
                "<p>Start typing a name in the input field below:</p>\n" +
                        "<p>Suggestions: <span id=\"txtHint\"></span></p>\n" +
                        "\n" +
                        "<form>\n" +
                        "First name: <input type=\"text\" onkeyup=\"showHint(this.value)\">\n" +
                        "</form>\n" +
                        "\n" +
                        "<script>\n" +
                        "function showHint(str) {\n" +
                        "  if (str.length == 0) {\n" +
                        "    document.getElementById(\"txtHint\").innerHTML = \"\";\n" +
                        "    return;\n" +
                        "  } else {\n" +
                        "    const xmlhttp = new XMLHttpRequest();\n" +
                        "    xmlhttp.onload = function() {\n" +
                        "      document.getElementById(\"txtHint\").innerHTML = this.responseText;\n" +
                        "    }\n" +
                        "  xmlhttp.open(\"GET\", \"gethint.php?q=\" + str);\n" +
                        "  xmlhttp.send();\n" +
                        "  }\n" +
                        "}\n" +
                        "</script>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "The PHP File - \"gethint.php\"",
                "The PHP file checks an array of names, and returns the corresponding name(s) to the browser:",
                "<?php\n" +
                        "// Array with names\n" +
                        "$a[] = \"Anna\";\n" +
                        "$a[] = \"Brittany\";\n" +
                        "$a[] = \"Cinderella\";\n" +
                        "$a[] = \"Diana\";\n" +
                        "$a[] = \"Eva\";\n" +
                        "$a[] = \"Fiona\";\n" +
                        "$a[] = \"Gunda\";\n" +
                        "$a[] = \"Hege\";\n" +
                        "$a[] = \"Inga\";\n" +
                        "$a[] = \"Johanna\";\n" +
                        "$a[] = \"Kitty\";\n" +
                        "$a[] = \"Linda\";\n" +
                        "$a[] = \"Nina\";\n" +
                        "$a[] = \"Ophelia\";\n" +
                        "$a[] = \"Petunia\";\n" +
                        "$a[] = \"Amanda\";\n" +
                        "$a[] = \"Raquel\";\n" +
                        "$a[] = \"Cindy\";\n" +
                        "$a[] = \"Doris\";\n" +
                        "$a[] = \"Eve\";\n" +
                        "$a[] = \"Evita\";\n" +
                        "$a[] = \"Sunniva\";\n" +
                        "$a[] = \"Tove\";\n" +
                        "$a[] = \"Unni\";\n" +
                        "$a[] = \"Violet\";\n" +
                        "$a[] = \"Liza\";\n" +
                        "$a[] = \"Elizabeth\";\n" +
                        "$a[] = \"Ellen\";\n" +
                        "$a[] = \"Wenche\";\n" +
                        "$a[] = \"Vicky\";\n" +
                        "\n" +
                        "// get the q parameter from URL\n" +
                        "$q = $_REQUEST[\"q\"];\n" +
                        "\n" +
                        "$hint = \"\";\n" +
                        "\n" +
                        "// lookup all hints from array if $q is different from \"\"\n" +
                        "if ($q !== \"\") {\n" +
                        "  $q = strtolower($q);\n" +
                        "  $len=strlen($q);\n" +
                        "  foreach($a as $name) {\n" +
                        "    if (stristr($q, substr($name, 0, $len))) {\n" +
                        "      if ($hint === \"\") {\n" +
                        "        $hint = $name;\n" +
                        "      } else {\n" +
                        "        $hint .= \", $name\";\n" +
                        "      }\n" +
                        "    }\n" +
                        "  }\n" +
                        "}\n" +
                        "\n" +
                        "// Output \"no suggestion\" if no hint was found or output correct values\n" +
                        "echo $hint === \"\" ? \"no suggestion\" : $hint;\n" +
                        "?>",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //AJAX ASP
    private static List<LearnDetailsModel> AJAXASP() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "AJAX ASP Example",
                "The following example will demonstrate how a web page can communicate with a web server while a user type characters in an input field:" +
                        "\n\n" +
                        "Start typing a name in the input field below:\n" +
                        "\n" +
                        "Suggestions:\n" +
                        "\n" +
                        "First name:",
                "<p>Start typing a name in the input field below:</p>\n" +
                        "<p>Suggestions: <span id=\"txtHint\"></span></p>\n" +
                        "\n" +
                        "<form>\n" +
                        "First name: <input type=\"text\" onkeyup=\"showHint(this.value)\">\n" +
                        "</form>\n" +
                        "\n" +
                        "<script>\n" +
                        "function showHint(str) {\n" +
                        "  if (str.length == 0) {\n" +
                        "    document.getElementById(\"txtHint\").innerHTML = \"\";\n" +
                        "    return;\n" +
                        "  } else {\n" +
                        "    const xmlhttp = new XMLHttpRequest();\n" +
                        "    xmlhttp.onload = function() {\n" +
                        "      document.getElementById(\"txtHint\").innerHTML = this.responseText;\n" +
                        "    }\n" +
                        "  xmlhttp.open(\"GET\", \"gethint.asp?q=\" + str);\n" +
                        "  xmlhttp.send();\n" +
                        "  }\n" +
                        "}\n" +
                        "</script>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "The ASP File - \"gethint.asp\"",
                "The ASP file checks an array of names, and returns the corresponding name(s) to the browser:",
                "<%\n" +
                        "response.expires=-1\n" +
                        "dim a(30)\n" +
                        "'Fill up array with names\n" +
                        "a(1)=\"Anna\"\n" +
                        "a(2)=\"Brittany\"\n" +
                        "a(3)=\"Cinderella\"\n" +
                        "a(4)=\"Diana\"\n" +
                        "a(5)=\"Eva\"\n" +
                        "a(6)=\"Fiona\"\n" +
                        "a(7)=\"Gunda\"\n" +
                        "a(8)=\"Hege\"\n" +
                        "a(9)=\"Inga\"\n" +
                        "a(10)=\"Johanna\"\n" +
                        "a(11)=\"Kitty\"\n" +
                        "a(12)=\"Linda\"\n" +
                        "a(13)=\"Nina\"\n" +
                        "a(14)=\"Ophelia\"\n" +
                        "a(15)=\"Petunia\"\n" +
                        "a(16)=\"Amanda\"\n" +
                        "a(17)=\"Raquel\"\n" +
                        "a(18)=\"Cindy\"\n" +
                        "a(19)=\"Doris\"\n" +
                        "a(20)=\"Eve\"\n" +
                        "a(21)=\"Evita\"\n" +
                        "a(22)=\"Sunniva\"\n" +
                        "a(23)=\"Tove\"\n" +
                        "a(24)=\"Unni\"\n" +
                        "a(25)=\"Violet\"\n" +
                        "a(26)=\"Liza\"\n" +
                        "a(27)=\"Elizabeth\"\n" +
                        "a(28)=\"Ellen\"\n" +
                        "a(29)=\"Wenche\"\n" +
                        "a(30)=\"Vicky\"\n" +
                        "\n" +
                        "'get the q parameter from URL\n" +
                        "q=ucase(request.querystring(\"q\"))\n" +
                        "\n" +
                        "'lookup all hints from array if length of q>0\n" +
                        "if len(q)>0 then\n" +
                        "  hint=\"\"\n" +
                        "  for i=1 to 30\n" +
                        "    if q=ucase(mid(a(i),1,len(q))) then\n" +
                        "      if hint=\"\" then\n" +
                        "        hint=a(i)\n" +
                        "      else\n" +
                        "        hint=hint & \" , \" & a(i)\n" +
                        "      end if\n" +
                        "    end if\n" +
                        "  next\n" +
                        "end if\n" +
                        "\n" +
                        "'Output \"no suggestion\" if no hint were found\n" +
                        "'or output the correct values\n" +
                        "if hint=\"\" then\n" +
                        "  response.write(\"no suggestion\")\n" +
                        "else\n" +
                        "  response.write(hint)\n" +
                        "end if\n" +
                        "%>",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //AJAX Database
    private static List<LearnDetailsModel> AJAXDatabase() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "AJAX Database Example",
                "AJAX can be used for interactive communication with a database.The following example will demonstrate how a web page can fetch information from a database with AJAX:" +
                        "\n\n" +
                        "",
                "<!DOCTYPE html>\n" +
                        "<html>\n" +
                        "<style>\n" +
                        "th,td {\n" +
                        "  padding: 5px;\n" +
                        "}\n" +
                        "</style>\n" +
                        "<body>\n" +
                        "\n" +
                        "<h2>The XMLHttpRequest Object</h2>\n" +
                        "\n" +
                        "<form action=\"\"> \n" +
                        "  <select name=\"customers\" onchange=\"showCustomer(this.value)\">\n" +
                        "    <option value=\"\">Select a customer:</option>\n" +
                        "    <option value=\"ALFKI\">Alfreds Futterkiste</option>\n" +
                        "    <option value=\"NORTS \">North/South</option>\n" +
                        "    <option value=\"WOLZA\">Wolski Zajazd</option>\n" +
                        "  </select>\n" +
                        "</form>\n" +
                        "<br>\n" +
                        "<div id=\"txtHint\">Customer info will be listed here...</div>\n" +
                        "\n" +
                        "<script>\n" +
                        "function showCustomer(str) {\n" +
                        "  if (str == \"\") {\n" +
                        "    document.getElementById(\"txtHint\").innerHTML = \"\";\n" +
                        "    return;\n" +
                        "  }\n" +
                        "  const xhttp = new XMLHttpRequest();\n" +
                        "  xhttp.onload = function() {\n" +
                        "    document.getElementById(\"txtHint\").innerHTML = this.responseText;\n" +
                        "  }\n" +
                        "  xhttp.open(\"GET\", \"getcustomer.php?q=\"+str);\n" +
                        "  xhttp.send();\n" +
                        "}\n" +
                        "</script>\n" +
                        "</body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "The AJAX Server Page",
                "The page on the server called by the JavaScript above is a PHP file called \"getcustomer.php\".\n" +
                        "\n" +
                        "The source code in \"getcustomer.php\" runs a query against a database, and returns the result in an HTML table:",
                "<?php\n" +
                        "$mysqli = new mysqli(\"servername\", \"username\", \"password\", \"dbname\");\n" +
                        "if($mysqli->connect_error) {\n" +
                        "  exit('Could not connect');\n" +
                        "}\n" +
                        "\n" +
                        "$sql = \"SELECT customerid, companyname, contactname, address, city, postalcode, country\n" +
                        "FROM customers WHERE customerid = ?\";\n" +
                        "\n" +
                        "$stmt = $mysqli->prepare($sql);\n" +
                        "$stmt->bind_param(\"s\", $_GET['q']);\n" +
                        "$stmt->execute();\n" +
                        "$stmt->store_result();\n" +
                        "$stmt->bind_result($cid, $cname, $name, $adr, $city, $pcode, $country);\n" +
                        "$stmt->fetch();\n" +
                        "$stmt->close();\n" +
                        "\n" +
                        "echo \"<table>\";\n" +
                        "echo \"<tr>\";\n" +
                        "echo \"<th>CustomerID</th>\";\n" +
                        "echo \"<td>\" . $cid . \"</td>\";\n" +
                        "echo \"<th>CompanyName</th>\";\n" +
                        "echo \"<td>\" . $cname . \"</td>\";\n" +
                        "echo \"<th>ContactName</th>\";\n" +
                        "echo \"<td>\" . $name . \"</td>\";\n" +
                        "echo \"<th>Address</th>\";\n" +
                        "echo \"<td>\" . $adr . \"</td>\";\n" +
                        "echo \"<th>City</th>\";\n" +
                        "echo \"<td>\" . $city . \"</td>\";\n" +
                        "echo \"<th>PostalCode</th>\";\n" +
                        "echo \"<td>\" . $pcode . \"</td>\";\n" +
                        "echo \"<th>Country</th>\";\n" +
                        "echo \"<td>\" . $country . \"</td>\";\n" +
                        "echo \"</tr>\";\n" +
                        "echo \"</table>\";\n" +
                        "?>",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //AJAX Applications
    private static List<LearnDetailsModel> AJAXApplications() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "XML Applications",
                "This chapter demonstrates some HTML applications using XML, HTTP, DOM, and JavaScript." +
                        "\n\n" +
                        "Display XML Data in an HTML Table\n" +
                        "This example loops through each <CD> element, and displays the values of the <ARTIST> and the <TITLE> elements in an HTML table:",
                "<table id=\"demo\"></table>\n" +
                        "\n" +
                        "<script>\n" +
                        "function loadXMLDoc() {\n" +
                        "  const xmlhttp = new XMLHttpRequest();\n" +
                        "  xmlhttp.onload = function() {\n" +
                        "    const xmlDoc = xml.responseXML;\n" +
                        "    const cd = xmlDoc.getElementsByTagName(\"CD\");\n" +
                        "    myFunction(cd);\n" +
                        "  }\n" +
                        "  xmlhttp.open(\"GET\", \"cd_catalog.xml\");\n" +
                        "  xmlhttp.send();\n" +
                        "}\n" +
                        "\n" +
                        "function myFunction(cd) {\n" +
                        "  let table=\"<tr><th>Artist</th><th>Title</th></tr>\";\n" +
                        "  for (let i = 0; i < cd.length; i++) {\n" +
                        "    table += \"<tr><td>\" +\n" +
                        "    cd[i].getElementsByTagName(\"ARTIST\")[0].childNodes[0].nodeValue +\n" +
                        "    \"</td><td>\" +\n" +
                        "    cd[i].getElementsByTagName(\"TITLE\")[0].childNodes[0].nodeValue +\n" +
                        "    \"</td></tr>\";\n" +
                        "  }\n" +
                        "  document.getElementById(\"demo\").innerHTML = table;\n" +
                        "}\n" +
                        "</script>\n" +
                        "\n" +
                        "</body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Display the First CD in an HTML div Element",
                "This example uses a function to display the first CD element in an HTML element with id=\"showCD\":",
                "const xhttp = new XMLHttpRequest();\n" +
                        "xhttp.onload = function() {\n" +
                        "  const xmlDoc = xhttp.responseXML;\n" +
                        "  const cd = xmlDoc.getElementsByTagName(\"CD\");\n" +
                        "  myFunction(cd, 0);\n" +
                        "}\n" +
                        "xhttp.open(\"GET\", \"cd_catalog.xml\");\n" +
                        "xhttp.send();\n" +
                        "\n" +
                        "function myFunction(cd, i) {\n" +
                        "  document.getElementById(\"showCD\").innerHTML =\n" +
                        "  \"Artist: \" +\n" +
                        "  cd[i].getElementsByTagName(\"ARTIST\")[0].childNodes[0].nodeValue +\n" +
                        "  \"<br>Title: \" +\n" +
                        "  cd[i].getElementsByTagName(\"TITLE\")[0].childNodes[0].nodeValue +\n" +
                        "  \"<br>Year: \" +\n" +
                        "  cd[i].getElementsByTagName(\"YEAR\")[0].childNodes[0].nodeValue;\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Navigate Between the CDs",
                "To navigate between the CDs in the example above, create a next() and previous() function:",
                "function next() {\n" +
                        "  // display the next CD, unless you are on the last CD\n" +
                        "  if (i < len-1) {\n" +
                        "    i++;\n" +
                        "    displayCD(i);\n" +
                        "  }\n" +
                        "}\n" +
                        "\n" +
                        "function previous() {\n" +
                        "  // display the previous CD, unless you are on the first CD\n" +
                        "  if (i > 0) {\n" +
                        "    i--;\n" +
                        "    displayCD(i);\n" +
                        "  }\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Show Album Information When Clicking On a CD",
                "The last example shows how you can show album information when the user clicks on a CD:",
                "function displayCD(i) {\n" +
                        "  document.getElementById(\"showCD\").innerHTML =\n" +
                        "  \"Artist: \" +\n" +
                        "  cd[i].getElementsByTagName(\"ARTIST\")[0].childNodes[0].nodeValue +\n" +
                        "  \"<br>Title: \" +\n" +
                        "  cd[i].getElementsByTagName(\"TITLE\")[0].childNodes[0].nodeValue +\n" +
                        "  \"<br>Year: \" +\n" +
                        "  cd[i].getElementsByTagName(\"YEAR\")[0].childNodes[0].nodeValue;\n" +
                        "}",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        return list;
    }

    //Typescript
    //Typescript Introduction
    private static List<LearnDetailsModel> TypescriptIntroduction() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is TypeScript?",
                "By definition, “TypeScript is JavaScript for application-scale development.”\n" +
                        "\n" +
                        "TypeScript is a strongly typed, object oriented, compiled language. It was designed by Anders Hejlsberg (designer of C#) at Microsoft. TypeScript is both a language and a set of tools. TypeScript is a typed superset of JavaScript compiled to JavaScript. In other words, TypeScript is JavaScript plus some additional features.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Features of TypeScript",
                "TypeScript is just JavaScript. TypeScript starts with JavaScript and ends with JavaScript. Typescript adopts the basic building blocks of your program from JavaScript. Hence, you only need to know JavaScript to use TypeScript. All TypeScript code is converted into its JavaScript equivalent for the purpose of execution.\n" +
                        "\n" +
                        "TypeScript supports other JS libraries. Compiled TypeScript can be consumed from any JavaScript code. TypeScript-generated JavaScript can reuse all of the existing JavaScript frameworks, tools, and libraries.\n" +
                        "\n" +
                        "JavaScript is TypeScript. This means that any valid .js file can be renamed to .ts and compiled with other TypeScript files.\n" +
                        "\n" +
                        "TypeScript is portable. TypeScript is portable across browsers, devices, and operating systems. It can run on any environment that JavaScript runs on. Unlike its counterparts, TypeScript doesn't need a dedicated VM or a specific runtime environment to execute.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "TypeScript and ECMAScript",
                "The ECMAScript specification is a standardized specification of a scripting language. There are six editions of ECMA-262 published. Version 6 of the standard is codenamed \"Harmony\". TypeScript is aligned with the ECMAScript6 specification.\n" +
                        "\n" +
                        "TypeScript adopts its basic language features from the ECMAScript5 specification, i.e., the official specification for JavaScript. TypeScript language features like Modules and class-based orientation are in line with the EcmaScript 6 specification. Additionally, TypeScript also embraces features like generics and type annotations that aren't a part of the EcmaScript6 specification.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Why Use TypeScript?",
                "TypeScript is superior to its other counterparts like CoffeeScript and Dart programming languages in a way that TypeScript is extended JavaScript. In contrast, languages like Dart, CoffeeScript are new languages in themselves and require language-specific execution environment.\n" +
                        "\n" +
                        "The benefits of TypeScript include −\n" +
                        "\n" +
                        "Compilation − JavaScript is an interpreted language. Hence, it needs to be run to test that it is valid. It means you write all the codes just to find no output, in case there is an error. Hence, you have to spend hours trying to find bugs in the code. The TypeScript transpiler provides the error-checking feature. TypeScript will compile the code and generate compilation errors, if it finds some sort of syntax errors. This helps to highlight errors before the script is run.\n" +
                        "\n" +
                        "Strong Static Typing − JavaScript is not strongly typed. TypeScript comes with an optional static typing and type inference system through the TLS (TypeScript Language Service). The type of a variable, declared with no type, may be inferred by the TLS based on its value.\n" +
                        "\n" +
                        "TypeScript supports type definitions for existing JavaScript libraries. TypeScript Definition file (with .d.ts extension) provides definition for external JavaScript libraries. Hence, TypeScript code can contain these libraries.\n" +
                        "\n" +
                        "TypeScript supports Object Oriented Programming concepts like classes, interfaces, inheritance, etc.",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Components of TypeScript",
                "At its heart, TypeScript has the following three components −\n" +
                        "\n" +
                        "Language − It comprises of the syntax, keywords, and type annotations.\n" +
                        "\n" +
                        "The TypeScript Compiler − The TypeScript compiler (tsc) converts the instructions written in TypeScript to its JavaScript equivalent.\n" +
                        "\n" +
                        "The TypeScript Language Service − The \"Language Service\" exposes an additional layer around the core compiler pipeline that are editor-like applications. The language service supports the common set of a typical editor operations like statement completions, signature help, code formatting and outlining, colorization, etc.",
                "",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "TypeScript Advantages",
                "1. TypeScript is an open-source language with continuous development and maintenance by Microsoft.\n\n" +
                        "2. TypeScript runs on any browser or JavaScript engine.\n\n" +
                        "3. TypeScript is similar to JavaScript and uses the same syntax and semantics. All of TypeScript's code finally gets converted into JavaScript. This allows a quicker learning curve for front-end developers currently coding in JavaScript.\n\n" +
                        "4. TypeScript is also closer in syntax to backend languages like Java and Scala. This helps backend developers write front-end code faster.\n\n" +
                        "5. TypeScript code can be called from an existing JavaScript code. TypeScript also works with existing JavaScript frameworks and libraries without any issues.\n\n" +
                        "6. The TypeScript Definition file, with .d.ts extension, provides support for existing JavaScript libraries like Jquery, D3.js, etc. So, TypeScript code can add JavaScript libraries using type definitions to avail the benefits of type-checking, code autocompletion, and documentation in existing dynamically-typed JavaScript libraries.\n\n" +
                        "7. TypeScript has support for the latest JavaScript features from ECMAScript 2015 . It includes features from ES6 and ES7 that can run in ES5-level JavaScript engines like Node.js. This offers a massive advantage of using features from future JavaScript versions in current JavaScript engines.\n\n" +
                        "8. TypeScript has easy integration with task runner tools like Grunt and Gulp to automate the workflow.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);

        return list;
    }

    //TypeScript Basic Syntax
    private static List<LearnDetailsModel> TypeScriptBasicSyntax() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "TypeScript Basic Syntax",
                "Syntax defines a set of rules for writing programs. Every language specification defines its own syntax. A TypeScript program is composed of −\n" +
                        "\n" +
                        "Modules\n" +
                        "Functions\n" +
                        "Variables\n" +
                        "Statements and Expressions\n" +
                        "Comments" +
                        "\n\n" +
                        "Your First TypeScript Code" +
                        "\n\n" +
                        "Let us start with the traditional “Hello World!” example −\n" +
                        "\n" +
                        "var message:string = \"Hello World!\" \n" +
                        "console.log(message)\n\n" +
                        "On compiling, it will generate following JavaScript code.\n" +
                        "\n" +
                        "//Generated by typescript 1.8.10\n" +
                        "var message = \"Hello World!\";\n" +
                        "console.log(message);\n\n" +
                        "Line 1 declares a variable by the name message. Variables are a mechanism to store values in a program.\n" +
                        "\n" +
                        "Line 2 prints the variable’s value to the prompt. Here, console refers to the terminal window. The function log () is used to display text on the screen.",
                "var message = \"Hello World!\";\n" +
                        "console.log(message);",
                "Hello World!"
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Identifiers in TypeScript",
                "Identifiers are names given to elements in a program like variables, functions etc. The rules for identifiers are −\n" +
                        "\n" +
                        "Identifiers can include both, characters and digits. However, the identifier cannot begin with a digit.\n" +
                        "\n" +
                        "Identifiers cannot include special symbols except for underscore (_) or a dollar sign ($).\n" +
                        "\n" +
                        "Identifiers cannot be keywords.\n" +
                        "\n" +
                        "They must be unique.\n" +
                        "\n" +
                        "Identifiers are case-sensitive.\n" +
                        "\n" +
                        "Identifiers cannot contain spaces.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Whitespace and Line Breaks",
                "TypeScript ignores spaces, tabs, and newlines that appear in programs. You can use spaces, tabs, and newlines freely in your program and you are free to format and indent your programs in a neat and consistent way that makes the code easy to read and understand.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "TypeScript is Case-sensitive",
                "TypeScript is case-sensitive. This means that TypeScript differentiates between uppercase and lowercase characters.",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Semicolons are optional",
                "Each line of instruction is called a statement. Semicolons are optional in TypeScript.\n" +
                        "\n" +
                        "Example\n" +
                        "\n" +
                        "console.log(\"hello world\")\n" +
                        "console.log(\"We are learning TypeScript\")\n" +
                        "A single line can contain multiple statements. However, these statements must be separated by a semicolon.",
                "console.log(\"hello world\")\n" +
                        "console.log(\"We are learning TypeScript\")",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Comments in TypeScript",
                "Comments are a way to improve the readability of a program. Comments can be used to include additional information about a program like author of the code, hints about a function/ construct etc. Comments are ignored by the compiler.\n" +
                        "\n" +
                        "TypeScript supports the following types of comments −\n" +
                        "\n" +
                        "Single-line comments ( // ) − Any text between a // and the end of a line is treated as a comment\n" +
                        "\n" +
                        "Multi-line comments (/* */) − These comments may span multiple lines.\n" +
                        "\n" +
                        "Example\n" +
                        "\n" +
                        "//this is single line comment \n" +
                        " \n" +
                        "/* This is a  \n" +
                        "   Multi-line comment \n" +
                        "*/",
                "//this is single line comment \n" +
                        " \n" +
                        "/* This is a  \n" +
                        "   Multi-line comment \n" +
                        "*/",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "TypeScript and Object Orientation",
                "TypeScript is Object-Oriented JavaScript. Object Orientation is a software development paradigm that follows real-world modelling. Object Orientation considers a program as a collection of objects that communicate with each other via mechanism called methods. TypeScript supports these object oriented components too.\n" +
                        "\n" +
                        "Object − An object is a real time representation of any entity. According to Grady Brooch, every object must have three features −\n" +
                        "\n" +
                        "State − described by the attributes of an object\n" +
                        "\n" +
                        "Behavior − describes how the object will act\n" +
                        "\n" +
                        "Identity − a unique value that distinguishes an object from a set of similar such objects.\n" +
                        "\n" +
                        "Class − A class in terms of OOP is a blueprint for creating objects. A class encapsulates data for the object.\n" +
                        "\n" +
                        "Method − Methods facilitate communication between objects.\n" +
                        "\n" +
                        "Example: TypeScript and Object Orientation\n" +
                        "\n" +
                        "class Greeting { \n" +
                        "   greet():void { \n" +
                        "      console.log(\"Hello World!!!\") \n" +
                        "   } \n" +
                        "} \n" +
                        "var obj = new Greeting(); \n" +
                        "obj.greet();\n\n" +
                        "The above example defines a class Greeting. The class has a method greet (). The method prints the string “Hello World” on the terminal. The new keyword creates an object of the class (obj). The object invokes the method greet ().\n" +
                        "\n" +
                        "On compiling, it will generate following JavaScript code.\n" +
                        "\n" +
                        "//Generated by typescript 1.8.10\n" +
                        "var Greeting = (function () {\n" +
                        "   function Greeting() {\n" +
                        "   }\n" +
                        "   Greeting.prototype.greet = function () {\n" +
                        "      console.log(\"Hello World!!!\");\n" +
                        "   };\n" +
                        "\treturn Greeting;\n" +
                        "}());\n" +
                        "\n" +
                        "var obj = new Greeting();\n" +
                        "obj.greet()",
                "var Greeting = (function () {\n" +
                        "   function Greeting() {\n" +
                        "   }\n" +
                        "   Greeting.prototype.greet = function () {\n" +
                        "      console.log(\"Hello World!!!\");\n" +
                        "   };\n" +
                        "\treturn Greeting;\n" +
                        "}());\n" +
                        "\n" +
                        "var obj = new Greeting();\n" +
                        "obj.greet()",
                "Hello World!!!"
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        return list;
    }

    //TypeScript Types
    private static List<LearnDetailsModel> TypeScriptTypes() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "TypeScript Types",
                "The Type System represents the different types of values supported by the language. The Type System checks the validity of the supplied values, before they are stored or manipulated by the program. This ensures that the code behaves as expected. The Type System further allows for richer code hinting and automated documentation too.\n" +
                        "\n" +
                        "TypeScript provides data types as a part of its optional Type System. The data type classification is as given below −" +
                        "\n\n" +
                        "1. Any type\n" +
                        "2. Built-in Types\n" +
                        "3. User-defined Types" +
                        "\n\n" +
                        "The Any type:\n" +
                        "The any data type is the super type of all types in TypeScript. It denotes a dynamic type. Using the any type is equivalent to opting out of type checking for a variable.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Built-in types",
                "The following table illustrates all the built-in types in TypeScript −" +
                        "\n\n" +
                        "1. number => Double precision 64-bit floating point values. It can be used to represent both, integers and fractions.\n\n" +
                        "2. string => Represents a sequence of Unicode characters\n\n" +
                        "3. boolean => Represents logical values, true and false\n\n" +
                        "4. void => Used on function return types to represent non-returning functions\n\n" +
                        "5. null => Represents an intentional absence of an object value.\n\n" +
                        "6. undefined => Denotes value given to all uninitialized variables" +
                        "\n\n" +
                        "Note − There is no integer type in TypeScript and JavaScript.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Null and undefined ─ Are they the same?",
                "The null and the undefined datatype are often a source of confusion. The null and undefined cannot be used to reference the data type of a variable. They can only be assigned as values to a variable.\n" +
                        "\n" +
                        "However, null and undefined are not the same. A variable initialized with undefined means that the variable has no value or object assigned to it while null means that the variable has been set to an object whose value is undefined.\n" +
                        "\n" +
                        "User-defined Types:\n\n" +
                        "User-defined types include Enumerations (enums), classes, interfaces, arrays, and tuple. These are discussed in detail in the later chapters.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //TypeScript Variables
    private static List<LearnDetailsModel> TypeScriptVariables() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "TypeScript Variables",
                "A variable, by definition, is “a named space in the memory” that stores values. In other words, it acts as a container for values in a program. TypeScript variables must follow the JavaScript naming rules −\n" +
                        "\n" +
                        "Variable names can contain alphabets and numeric digits.\n" +
                        "\n" +
                        "They cannot contain spaces and special characters, except the underscore (_) and the dollar ($) sign.\n" +
                        "\n" +
                        "Variable names cannot begin with a digit.\n" +
                        "\n" +
                        "A variable must be declared before it is used. Use the var keyword to declare variables.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Variable Declaration in TypeScript",
                "The type syntax for declaring a variable in TypeScript is to include a colon (:) after the variable name, followed by its type. Just as in JavaScript, we use the var keyword to declare a variable.\n" +
                        "\n" +
                        "When you declare a variable, you have four options −\n" +
                        "\n" +
                        "Declare its type and value in one statement.\n" +
                        "\n" +
                        "Declare Type\n" +
                        "Declare its type but no value. In this case, the variable will be set to undefined.\n" +
                        "\n" +
                        "Undefined\n" +
                        "Declare its value but no type. The variable type will be set to the data type of the assigned value.\n" +
                        "\n" +
                        "Any\n" +
                        "Declare neither value not type. In this case, the data type of the variable will be any and will be initialized to undefined.\n" +
                        "\n" +
                        "Any and Undefined\n" +
                        "The following table illustrates the valid syntax for variable declaration as discussed above −" +
                        "\n\n" +
                        "var name:string = ”mary”\n" +
                        "\n" +
                        "The variable stores a value of type string" +
                        "\n\n" +
                        "var name:string;\n" +
                        "\n" +
                        "The variable is a string variable. The variable’s value is set to undefined by default" +
                        "\n\n" +
                        "var name = ”mary”\n" +
                        "\n" +
                        "The variable’s type is inferred from the data type of the value. Here, the variable is of the type string" +
                        "\n\n" +
                        "var name;\n" +
                        "\n" +
                        "The variable’s data type is any. Its value is set to undefined by default." +
                        "\n\n\n" +
                        "Example: Variables in TypeScript\n" +
                        "var name:string = \"Anne\"; \n" +
                        "var score1:number = 50;\n" +
                        "var score2:number = 42.50\n" +
                        "var sum = score1 + score2 \n" +
                        "console.log(\"name\"+name) \n" +
                        "console.log(\"first score: \"+score1) \n" +
                        "console.log(\"second score: \"+score2) \n" +
                        "console.log(\"sum of the scores: \"+sum)\n\n" +
                        "On compiling, it will generate following JavaScript code.\n" +
                        "\n" +
                        "//Generated by typescript 1.8.10\n" +
                        "var name = \"Anne\";\n" +
                        "var score1 = 50;\n" +
                        "var score2 = 42.50;\n" +
                        "var sum = score1 + score2;\n" +
                        "console.log(\"name\" + name);\n" +
                        "console.log(\"first score: \" + score1);\n" +
                        "console.log(\"second score : \" + score2);\n" +
                        "console.log(\"sum of the scores: \" + sum);",
                "var name = \"Anne\";\n" +
                        "var score1 = 50;\n" +
                        "var score2 = 42.50;\n" +
                        "var sum = score1 + score2;\n" +
                        "console.log(\"name\" + name);\n" +
                        "console.log(\"first score: \" + score1);\n" +
                        "console.log(\"second score : \" + score2);\n" +
                        "console.log(\"sum of the scores: \" + sum);",
                "name:Anne \n" +
                        "first score:50 \n" +
                        "second score:42.50 \n" +
                        "sum of the scores:92.50"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Type Assertion in TypeScript",
                "TypeScript allows changing a variable from one type to another. TypeScript refers to this process as Type Assertion. The syntax is to put the target type between < > symbols and place it in front of the variable or expression. The following example explains this concept −\n" +
                        "\n" +
                        "Example\n" +
                        "var str = '1' \n" +
                        "var str2:number = <number> <any> str   //str is now of type number \n" +
                        "console.log(typeof(str2))\n\n" +
                        "If you hover the mouse pointer over the type assertion statement in Visual Studio Code, it displays the change in the variable’s data type. Basically it allows the assertion from type S to T succeed if either S is a subtype of T or T is a subtype of S.\n" +
                        "\n" +
                        "The reason why it's not called \"type casting\" is that casting generally implies some sort of runtime support while, “type assertions” are purely a compile time construct and a way for you to provide hints to the compiler on how you want your code to be analyzed.\n" +
                        "\n" +
                        "On compiling, it will generate following JavaScript code.\n" +
                        "\n" +
                        "\"use strict\";\n" +
                        "var str = '1';\n" +
                        "var str2 = str; //str is now of type number \n" +
                        "console.log(typeof (str2));",
                "\"use strict\";\n" +
                        "var str = '1';\n" +
                        "var str2 = str;\n" +
                        "console.log(typeof (str2));",
                "string"
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Inferred Typing in TypeScript",
                "Given the fact that, Typescript is strongly typed, this feature is optional. TypeScript also encourages dynamic typing of variables. This means that, TypeScript encourages declaring a variable without a type. In such cases, the compiler will determine the type of the variable on the basis of the value assigned to it. TypeScript will find the first usage of the variable within the code, determine the type to which it has been initially set and then assume the same type for this variable in the rest of your code block.\n" +
                        "\n" +
                        "The same is explained in the following code snippet −\n" +
                        "\n" +
                        "Example: Inferred Typing\n" +
                        "var num = 2;    // data type inferred as  number \n" +
                        "console.log(\"value of num \"+num); \n" +
                        "num = \"12\";\n" +
                        "console.log(num);\n\n" +
                        "In the above code snippet −\n" +
                        "\n" +
                        "The code declares a variable and sets its value to 2. Note that the variable declaration doesn't specify the data type. Hence, the program uses inferred typing to determine the data type of the variable, i.e., it assigns the type of the first value that the variable is set to. In this case, num is set to the type number.\n" +
                        "\n" +
                        "When the code tries to set the variable’s value to string. The compiler throws an error as the variable’s type is already set to number.",
                "var num = 2;\n" +
                        "console.log(\"value of num \"+num); \n" +
                        "num = \"12\";\n" +
                        "console.log(num);",
                "error TS2011: Cannot convert 'string' to 'number'."
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "TypeScript Variable Scope",
                "The scope of a variable specifies where the variable is defined. The availability of a variable within a program is determined by its scope. TypeScript variables can be of the following scopes −\n" +
                        "\n" +
                        "Global Scope − Global variables are declared outside the programming constructs. These variables can be accessed from anywhere within your code.\n" +
                        "\n" +
                        "Class Scope − These variables are also called fields. Fields or class variables are declared within the class but outside the methods. These variables can be accessed using the object of the class. Fields can also be static. Static fields can be accessed using the class name.\n" +
                        "\n" +
                        "Local Scope − Local variables, as the name suggests, are declared within the constructs like methods, loops etc. Local variables are accessible only within the construct where they are declared.",
                "var global_num = 12\n" +
                        "class Numbers { \n" +
                        "   num_val = 13;\n" +
                        "   static sval = 10;\n" +
                        "   \n" +
                        "   storeNum():void { \n" +
                        "      var local_num = 14;\n" +
                        "   } \n" +
                        "} \n" +
                        "console.log(\"Global num: \"+global_num)  \n" +
                        "console.log(Numbers.sval)\n" +
                        "var obj = new Numbers(); \n" +
                        "console.log(\"Global num: \"+obj.num_val) ",
                "Global num: 12\n" +
                        "10\n" +
                        "Global num: 13"
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }

    //TypeScript Operators
    private static List<LearnDetailsModel> TypeScriptOperators() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is an Operator?",
                "An operator defines some function that will be performed on the data. The data on which operators work are called operands. Consider the following expression −\n" +
                        "\n" +
                        "7 + 5 = 12\n" +
                        "\n" +
                        "Here, the values 7, 5, and 12 are operands, while + and = are operators.\n" +
                        "\n" +
                        "The major operators in TypeScript can be classified as −\n" +
                        "\n" +
                        "Arithmetic operators\n" +
                        "Logical operators\n" +
                        "Relational operators\n" +
                        "Bitwise operators\n" +
                        "Assignment operators\n" +
                        "Ternary/conditional operator\n" +
                        "String operator\n" +
                        "Type Operator",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Arithmetic Operators",
                "Assume the values in variables a and b are 10 and 5 respectively." +
                        "\n\n" +
                        "1. + (Addition) => returns the sum of the operands(a + b is 15)\n\n" +
                        "2. - (Subtraction) => returns the difference of the values(a - b is 5)\n\n" +
                        "3. * (Multiplication) => returns the product of the values(a * b is 50)\n\n" +
                        "4. / (Division) => performs division operation and returns the quotient(a / b is 2)\n\n" +
                        "5. % (Modulus) => performs division operation and returns the remainder(a % b is 0)\n\n" +
                        "6. ++ (Increment) => Increments the value of the variable by one(a++ is 11)\n\n" +
                        "7. -- (Decrement) => Decrements the value of the variable by one(a-- is 9)",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Relational Operators",
                "Relational Operators test or define the kind of relationship between two entities. Relational operators return a Boolean value, i.e., true/ false.\n" +
                        "\n" +
                        "Assume the value of A is 10 and B is 20." +
                        "\n\n" +
                        "(>) Greater than => (A > B) is False\n\n" +
                        "(<) Lesser than => (A < B) is True\n\n" +
                        "(>=) Greater than or equal to => (A >= B) is False\n\n" +
                        "(<=) Lesser than or equal to => (A <= B) is True\n\n" +
                        "(==) Equality => (A == B) is false\n\n" +
                        "(!=) Not equal => (A != B) is True",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Logical Operators",
                "Logical Operators are used to combine two or more conditions. Logical operators too return a Boolean value. Assume the value of variable A is 10 and B is 20." +
                        "\n\n" +
                        "&& (And) => The operator returns true only if all the expressions specified return true (A > 10 && B > 10) is False\n\n" +
                        "|| (OR) => The operator returns true if at least one of the expressions specified return true (A > 10 || B >10) is True\n\n" +
                        "! (NOT) => The operator returns the inverse of the expression’s result. For E.g.: !(>5) returns false !(A >10 ) is True",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Bitwise Operators",
                "Assume variable A = 2 and B = 3" +
                        "\n\n" +
                        "& (Bitwise AND) => It performs a Boolean AND operation on each bit of its integer arguments. (A & B) is 2\n\n" +
                        "| (BitWise OR) => It performs a Boolean OR operation on each bit of its integer arguments. (A | B) is 3\n\n" +
                        "^ (Bitwise XOR) => It performs a Boolean exclusive OR operation on each bit of its integer arguments. Exclusive OR means that either operand one is true or operand two is true, but not both. (A ^ B) is 1\n\n" +
                        "~ (Bitwise Not) => It is a unary operator and operates by reversing all the bits in the operand. (~B) is -4\n\n" +
                        "<< (Left Shift) => It moves all the bits in its first operand to the left by the number of places specified in the second operand. New bits are filled with zeros. Shifting a value left by one position is equivalent to multiplying it by 2, shifting two positions is equivalent to multiplying by 4, and so on. (A << 1) is 4\n\n" +
                        ">> (Right Shift) => Binary Right Shift Operator. The left operand’s value is moved right by the number of bits specified by the right operand. (A >> 1) is 1\n\n" +
                        ">>> (Right shift with Zero) => This operator is just like the >> operator, except that the bits shifted in on the left are always zero. (A >>> 1) is 1",
                "",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Assignment Operators",
                "Note − Same logic applies to Bitwise operators, so they will become <<=, >>=, >>=, &=, |= and ^=. Bellow are Assignment Operators:" +
                        "\n\n" +
                        "= (Simple Assignment) => Assigns values from the right side operand to the left side operand \nC = A + B will assign the value of A + B into C\n\n" +
                        "+= (Add and Assignment) => It adds the right operand to the left operand and assigns the result to the left operand.\nC += A is equivalent to C = C + A\n\n" +
                        "-= (Subtract and Assignment) => It subtracts the right operand from the left operand and assigns the result to the left operand.\nC -= A is equivalent to C = C - A\n\n" +
                        "*= (Multiply and Assignment) => It multiplies the right operand with the left operand and assigns the result to the left operand.\nC *= A is equivalent to C = C * A\n\n" +
                        "/= (Divide and Assignment) => It divides the left operand with the right operand and assigns the result to the left operand.",
                "",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "The negation operator (-)",
                "Changes the sign of a value. Let’s take an example.\n" +
                        "\n" +
                        "var x:number = 4 \n" +
                        "var y = -x; \n" +
                        "console.log(\"value of x: \",x);   //outputs 4 \n" +
                        "console.log(\"value of y: \",y);   //outputs -4\n\n" +
                        "On compiling, it will generate following JavaScript code.\n" +
                        "\n" +
                        "//Generated by typescript 1.8.10\n" +
                        "var x = 4;\n" +
                        "var y = -x;\n" +
                        "console.log(\"value of x: \", x);   //outputs 4\n" +
                        "console.log(\"value of y: \", y);   //outputs -4",
                "var x:number = 4 \n" +
                        "var y = -x; \n" +
                        "console.log(\"value of x: \",x);\n" +
                        "console.log(\"value of y: \",y);",
                "value of x:  4 \n" +
                        "value of y:  -4"
        );
        final LearnDetailsModel l8 = new LearnDetailsModel(
                "String Operators: Concatenation operator (+)",
                "The + operator when applied to strings appends the second string to the first. The following example helps us to understand this concept.\n" +
                        "\n" +
                        "var msg:string = \"hello\"+\"world\" \n" +
                        "console.log(msg)\n" +
                        "On compiling, it will generate following JavaScript code.\n" +
                        "\n" +
                        "//Generated by typescript 1.8.10\n" +
                        "var msg = \"hello\" + \"world\";\n" +
                        "console.log(msg);",
                "var msg:string = \"hello\"+\"world\" \n" +
                        "console.log(msg)",
                "helloworld"
        );
        final LearnDetailsModel l9 = new LearnDetailsModel(
                "Conditional Operator (?)",
                "This operator is used to represent a conditional expression. The conditional operator is also sometimes referred to as the ternary operator. The syntax is as given below −\n" +
                        "\n" +
                        "Test ? expr1 : expr2\n" +
                        "Test − refers to the conditional expression\n" +
                        "\n" +
                        "expr1 − value returned if the condition is true\n" +
                        "\n" +
                        "expr2 − value returned if the condition is false\n" +
                        "\n" +
                        "Let’s take a look at the following code −\n" +
                        "\n" +
                        "var num:number = -2 \n" +
                        "var result = num > 0 ?\"positive\":\"non-positive\" \n" +
                        "console.log(result)\n\n" +
                        "Line 2 checks whether the value in the variable num is greater than zero. If num is set to a value greater than zero, it returns the string “positive” else the string “non-positive” is returned.\n" +
                        "\n" +
                        "On compiling, it will generate following JavaScript code.\n" +
                        "\n" +
                        "//Generated by typescript 1.8.10\n" +
                        "var num = -2;\n" +
                        "var result = num > 0 ? \"positive\" : \"non-positive\";\n" +
                        "console.log(result);",
                "var num:number = -2 \n" +
                        "var result = num > 0 ?\"positive\":\"non-positive\" \n" +
                        "console.log(result)",
                "non-positive"
        );

        final LearnDetailsModel l10 = new LearnDetailsModel(
                "Type Operators",
                "typeof operator\n" +
                        "It is a unary operator. This operator returns the data type of the operand. Take a look at the following example −\n" +
                        "\n" +
                        "var num = 12 \n" +
                        "console.log(typeof num);   //output: number\n\n" +
                        "On compiling, it will generate following JavaScript code.\n" +
                        "\n" +
                        "//Generated by typescript 1.8.10\n" +
                        "var num = 12;\n" +
                        "console.log(typeof num);   //output: number",
                "var num = 12 \n" +
                        "console.log(typeof num);",
                "number"
        );
        final LearnDetailsModel l11 = new LearnDetailsModel(
                "instanceof",
                "This operator can be used to test if an object is of a specified type or not. The use of instanceof operator is discussed in the chapter classes.",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        list.add(l8);
        list.add(l9);
        list.add(l10);
        list.add(l11);
        return list;
    }

    //TypeScript Decision Making
    private static List<LearnDetailsModel> TypeScriptDecisionMaking() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "TypeScript Decision Making",
                "Decision-making structures require that the programmer specifies one or more conditions to be evaluated or tested by the program, along with a statement or statements to be executed if the condition is determined to be true, and optionally, other statements to be executed if the condition is determined to be false.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Statements",
                "A decision-making construct evaluates a condition before the instructions are executed. Decision-making constructs in TypeScript are classified as follows −" +
                        "\n\n" +
                        "1.if statement\n" +
                        "An ‘if’ statement consists of a Boolean expression followed by one or more statements.\n" +
                        "\n" +
                        "2.if...else statement\n" +
                        "An ‘if’ statement can be followed by an optional ‘else’ statement, which executes when the Boolean expression is false.\n" +
                        "\n" +
                        "3.else…if and nested if statements\n" +
                        "You can use one ‘if’ or ‘else if’ statement inside another ‘if’ or ‘else if’ statement(s).\n" +
                        "\n" +
                        "4.switch statement\n" +
                        "A ‘switch’ statement allows a variable to be tested against a list of values.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //TypeScript Loops
    private static List<LearnDetailsModel> TypeScriptLoops() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "TypeScript Loops",
                "You may encounter situations, when a block of code needs to be executed several number of times. " +
                        "In general, statements are executed sequentially: The first statement in a function is executed first, followed by the second, and so on.\n" +
                        "\n" +
                        "Programming languages provide various control structures that allow for more complicated execution paths.\n" +
                        "A loop statement allows us to execute a statement or group of statements multiple times.\n" +
                        "TypeScript provides different types of loops to handle looping requirements.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Definite Loop",
                "A loop whose number of iterations are definite/fixed is termed as a definite loop. The for loop is an implementation of a definite loop." +
                        "\n\n" +
                        "1. for loop\n" +
                        "The for loop is an implementation of a definite loop.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Indefinite Loop",
                "An indefinite loop is used when the number of iterations in a loop is indeterminate or unknown.\n" +
                        "\n" +
                        "Indefinite loops can be implemented using −" +
                        "\n\n" +
                        "1. while loop\n" +
                        "The while loop executes the instructions each time the condition specified evaluates to true.\n" +
                        "\n" +
                        "2. do… while\n" +
                        "The do…while loop is similar to the while loop except that the do...while loop doesn't evaluate the condition for the first time the loop executes.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Example: while versus do..while",
                "The example initially declares a while loop. The loop is entered only if the expression passed to while evaluates to true. In this example, the value of n is not greater than zero, hence the expression returns false and the loop is skipped.\n" +
                        "\n" +
                        "On the other hand, the do…while loop executes statement once. This is because the initial iteration does not consider the Boolean expression. However, for the subsequent iteration, the while checks the condition and takes the control out of the loop.",
                "var n:number = 5 \n" +
                        "while(n > 5) { \n" +
                        "   console.log(\"Entered while\") \n" +
                        "} \n" +
                        "do { \n" +
                        "   console.log(\"Entered do…while\") \n" +
                        "} \n" +
                        "while(n>5)",
                "Entered do…while"
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "The break Statement",
                "The break statement is used to take the control out of a construct. Using break in a loop causes the program to exit the loop. Its syntax is as follows −\n" +
                        "\n" +
                        "Syntax: " +
                        "break" +
                        "\n\n" +
                        "Example\n" +
                        "Now, take a look at the following example code −\n" +
                        "\n" +
                        "var i:number = 1 \n" +
                        "while(i<=10) { \n" +
                        "   if (i % 5 == 0) {   \n" +
                        "      console.log (\"The first multiple of 5  between 1 and 10 is : \"+i) \n" +
                        "      break     //exit the loop if the first multiple is found \n" +
                        "   } \n" +
                        "   i++ \n" +
                        "}  //outputs 5 and exits the loop",
                "var i:number = 1 \n" +
                        "while(i<=10) { \n" +
                        "   if (i % 5 == 0) {   \n" +
                        "      console.log (\"The first multiple of 5  between 1 and 10 is : \"+i) \n" +
                        "      break\n" +
                        "   } \n" +
                        "   i++ \n" +
                        "}",
                "The first multiple of 5  between 1 and 10 is : 5"
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "The continue Statement",
                "The continue statement skips the subsequent statements in the current iteration and takes the control back to the beginning of the loop. Unlike the break statement, the continue doesn’t exit the loop. It terminates the current iteration and starts the subsequent iteration.\n" +
                        "\n" +
                        "Syntax: " +
                        "continue" +
                        "\n\n" +
                        "Example\n" +
                        "An example of the continue statement is given below −\n" +
                        "\n" +
                        "var num:number = 0\n" +
                        "var count:number = 0;\n" +
                        "\n" +
                        "for(num=0;num<=20;num++) {\n" +
                        "   if (num % 2==0) {\n" +
                        "      continue\n" +
                        "   }\n" +
                        "   count++\n" +
                        "}\n" +
                        "console.log (\" The count of odd values between 0 and 20 is: \"+count)    //outputs 10 \n\n" +
                        "The above example displays the number of odd values between 0 and 20. The loop exits the current iteration if the number is even. This is achieved using the continue statement.\n" +
                        "\n" +
                        "On compiling, it will generate following JavaScript code.\n" +
                        "\n" +
                        "//Generated by typescript 1.8.10\n" +
                        "var num = 0;\n" +
                        "var count = 0;\n" +
                        "\n" +
                        "for (num = 0; num <= 20; num++) {\n" +
                        "   if (num % 2 == 0) {\n" +
                        "      continue;\n" +
                        "   }\n" +
                        "   count++;\n" +
                        "}\n" +
                        "console.log(\" The count of odd values between 0 and 20 is: \" + count);     //outputs 10",
                "var num:number = 0\n" +
                        "var count:number = 0;\n" +
                        "\n" +
                        "for(num=0;num<=20;num++) {\n" +
                        "   if (num % 2==0) {\n" +
                        "      continue\n" +
                        "   }\n" +
                        "   count++\n" +
                        "}\n" +
                        "console.log (\" The count of odd values between 0 and 20 is: \"+count)",
                "The count of odd values between 0 and 20 is: 10"
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "The Infinite Loop",
                "An infinite loop is a loop that runs endlessly. The for loop and the while loop can be used to make an endless loop.\n" +
                        "\n" +
                        "Syntax: Infinite Loop using for loop\n" +
                        "for(;;) { \n" +
                        "   //statements \n" +
                        "}\n\n" +
                        "Example: Infinite loop using for loop\n" +
                        "for(;;) { \n" +
                        "   console.log(“This is an endless loop”) \n" +
                        "}\n\n" +
                        "Syntax: Infinite loop using while loop\n" +
                        "while(true) { \n" +
                        "   //statements \n" +
                        "} \n\n" +
                        "Example: Infinite loop using while loop\n" +
                        "while(true) { \n" +
                        "   console.log(“This is an endless loop”) \n" +
                        "}",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        return list;
    }

    //TypeScript Functions
    private static List<LearnDetailsModel> TypeScriptFunctions() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "TypeScript Functions",
                "Functions are the building blocks of readable, maintainable, and reusable code. A function is a set of statements to perform a specific task. Functions organize the program into logical blocks of code. Once defined, functions may be called to access code. This makes the code reusable. Moreover, functions make it easy to read and maintain the program’s code.\n" +
                        "\n" +
                        "A function declaration tells the compiler about a function's name, return type, and parameters. A function definition provides the actual body of the function." +
                        "\n\n" +
                        "1. Defining a Function\n" +
                        "A function definition specifies what and how a specific task would be done.\n" +
                        "\n" +
                        "2. Calling a Function\n" +
                        "A function must be called so as to execute it.\n" +
                        "\n" +
                        "3. Returning Functions\n" +
                        "Functions may also return value along with control, back to the caller.\n" +
                        "\n" +
                        "4. Parameterized Function\n" +
                        "Parameters are a mechanism to pass values to functions.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Optional Parameters",
                "Optional parameters can be used when arguments need not be compulsorily passed for a function’s execution. A parameter can be marked optional by appending a question mark to its name. The optional parameter should be set as the last argument in a function. The syntax to declare a function with optional parameter is as given below −\n" +
                        "\n" +
                        "function function_name (param1[:type], param2[:type], param3[:type])",
                "function disp_details(id:number,name:string,mail_id?:string) { \n" +
                        "   console.log(\"ID:\", id); \n" +
                        "   console.log(\"Name\",name); \n" +
                        "   \n" +
                        "   if(mail_id!=undefined)  \n" +
                        "   console.log(\"Email Id\",mail_id); \n" +
                        "}\n" +
                        "disp_details(123,\"Anne\");\n" +
                        "disp_details(111,\"Luke\",\"luke@xyz.com\");",
                "ID:123 \n" +
                        "Name Anne \n" +
                        "ID: 111 \n" +
                        "Name  Luke \n" +
                        "Email Id luke@xyz.com"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Rest Parameters",
                "Rest parameters are similar to variable arguments in Java. Rest parameters don’t restrict the number of values that you can pass to a function. However, the values passed must all be of the same type. In other words, rest parameters act as placeholders for multiple arguments of the same type.\n" +
                        "\n" +
                        "To declare a rest parameter, the parameter name is prefixed with three periods. Any nonrest parameter should come before the rest parameter.",
                "function addNumbers(...nums:number[]) {  \n" +
                        "   var i;   \n" +
                        "   var sum:number = 0; \n" +
                        "   \n" +
                        "   for(i = 0;i<nums.length;i++) { \n" +
                        "      sum = sum + nums[i]; \n" +
                        "   } \n" +
                        "   console.log(\"sum of the numbers\",sum) \n" +
                        "} \n" +
                        "addNumbers(1,2,3) \n" +
                        "addNumbers(10,10,10,10,10)",
                "sum of numbers 6\n" +
                        "sum of numbers 50"
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Default Parameters",
                "Function parameters can also be assigned values by default. However, such parameters can also be explicitly passed values.\n" +
                        "\n" +
                        "Syntax:\n" +
                        "function function_name(param1[:type],param2[:type] = default_value) { \n" +
                        "}\n" +
                        "Note − A parameter cannot be declared optional and default at the same time.",
                "function calculate_discount(price:number,rate:number = 0.50) { \n" +
                        "   var discount = price * rate; \n" +
                        "   console.log(\"Discount Amount: \",discount); \n" +
                        "} \n" +
                        "calculate_discount(1000) \n" +
                        "calculate_discount(1000,0.30)",
                "Discount amount : 500 \n" +
                        "Discount amount : 300"
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Anonymous Function",
                "Functions that are not bound to an identifier (function name) are called as anonymous functions. These functions are dynamically declared at runtime. Anonymous functions can accept inputs and return outputs, just as standard functions do. An anonymous function is usually not accessible after its initial creation.\n" +
                        "\n" +
                        "Variables can be assigned an anonymous function. Such an expression is called a function expression.\n" +
                        "\n" +
                        "Syntax:\n" +
                        "var res = function( [arguments] ) { ... }",
                "var msg = function() { \n" +
                        "   return \"hello world\";  \n" +
                        "} \n" +
                        "console.log(msg())",
                "hello world"
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "The Function Constructor",
                "ypeScript also supports defining a function with the built-in JavaScript constructor called Function ().\n" +
                        "\n" +
                        "Syntax:\n" +
                        "var res = new Function( [arguments] ) { ... }.",
                "var myFunction = new Function(\"a\", \"b\", \"return a * b\"); \n" +
                        "var x = myFunction(4, 3); \n" +
                        "console.log(x);",
                "12"
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Recursion and TypeScript Functions",
                "Recursion is a technique for iterating over an operation by having a function call to itself repeatedly until it arrives at a result. Recursion is best applied when you need to call the same function repeatedly with different parameters from within a loop.",
                "function factorial(number) {\n" +
                        "   if (number <= 0) {\n" +
                        "      return 1; \n" +
                        "   } else {     \n" +
                        "      return (number * factorial(number - 1));\n" +
                        "   } \n" +
                        "}; \n" +
                        "console.log(factorial(6));",
                "720"
        );
        final LearnDetailsModel l8 = new LearnDetailsModel(
                "Lambda Functions",
                "Lambda refers to anonymous functions in programming. Lambda functions are a concise mechanism to represent anonymous functions. These functions are also called as Arrow functions.\n" +
                        "\n" +
                        "Lambda Function - Anatomy\n" +
                        "There are 3 parts to a Lambda function −\n" +
                        "\n" +
                        "Parameters − A function may optionally have parameters\n" +
                        "\n" +
                        "The fat arrow notation/lambda notation (=>) − It is also called as the goes to operator\n" +
                        "\n" +
                        "Statements − represent the function’s instruction set\n" +
                        "\n" +
                        "Tip − By convention, the use of single letter parameter is encouraged for a compact and precise function declaration.\n" +
                        "\n" +
                        "Lambda Expression\n" +
                        "It is an anonymous function expression that points to a single line of code. Its syntax is as follows −\n" +
                        "\n" +
                        "( [param1, parma2,…param n] )=>statement;",
                "var foo = (x:number)=>10 + x \n" +
                        "console.log(foo(100))",
                "110"
        );
        final LearnDetailsModel l9 = new LearnDetailsModel(
                "Function Overloads",
                "Functions have the capability to operate differently on the basis of the input provided to them. In other words, a program can have multiple methods with the same name with different implementation. This mechanism is termed as Function Overloading. TypeScript provides support for function overloading.\n" +
                        "\n" +
                        "To overload a function in TypeScript, you need to follow the steps given below −\n" +
                        "\n" +
                        "Step 1 − Declare multiple functions with the same name but different function signature. Function signature includes the following.\n" +
                        "\n" +
                        "The data type of the parameter\n" +
                        "\n" +
                        "function disp(string):void; \n" +
                        "function disp(number):void;\n" +
                        "The number of parameters\n" +
                        "\n" +
                        "function disp(n1:number):void; \n" +
                        "function disp(x:number,y:number):void;\n" +
                        "The sequence of parameters\n" +
                        "\n" +
                        "function disp(n1:number,s1:string):void; \n" +
                        "function disp(s:string,n:number):void;\n" +
                        "Note − The function signature doesn't include the function’s return type.\n" +
                        "\n" +
                        "Step 2 − The declaration must be followed by the function definition. The parameter types should be set to any if the parameter types differ during overload. Additionally, for case b explained above, you may consider marking one or more parameters as optional during the function definition.\n" +
                        "\n" +
                        "Step 3 − Finally, you must invoke the function to make it functional.",
                "function disp(s1:string):void; \n" +
                        "function disp(n1:number,s1:string):void; \n" +
                        "\n" +
                        "function disp(x:any,y?:any):void { \n" +
                        "   console.log(x); \n" +
                        "   console.log(y); \n" +
                        "} \n" +
                        "disp(\"abc\") \n" +
                        "disp(1,\"xyz\");",
                "abc\n" +
                        "1\n" +
                        "xyz"
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        list.add(l8);
        list.add(l9);

        return list;
    }

    //TypeScript Numbers
    private static List<LearnDetailsModel> TypeScriptNumbers() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "TypeScript Numbers",
                "TypeScript like JavaScript supports numeric values as Number objects. A number object converts numeric literal to an instance of the number class. The Number class acts as a wrapper and enables manipulation of numeric literals as they were objects.\n" +
                        "\n" +
                        "Syntax\n" +
                        "var var_name = new Number(value)\n" +
                        "In case a non-numeric argument is passed as an argument to the Number’s constructor, it returns NaN (Not–a–Number)",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Example: MAX_VALUE & MIN_VALUE",
                "On compiling, it will generate the same code in JavaScript.",
                "console.log(\"TypeScript Number Properties: \"); \n" +
                        "console.log(\"Maximum value that a number variable can hold: \" + Number.MAX_VALUE); \n" +
                        "console.log(\"The least value that a number variable can hold: \" + Number.MIN_VALUE); \n" +
                        "console.log(\"Value of Negative Infinity: \" + Number.NEGATIVE_INFINITY); \n" +
                        "console.log(\"Value of Negative Infinity:\" + Number.POSITIVE_INFINITY);",
                "TypeScript Number Properties:  \n" +
                        "Maximum value that a number variable can hold: 1.7976931348623157e+308 \n" +
                        "The least value that a number variable can hold: 5e-324 \n" +
                        "Value of Negative Infinity: -Infinity \n" +
                        "Value of Negative Infinity:Infinity"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Example: NaN",
                "On compiling, it will generate the same code in JavaScript.",
                "var month = 0 \n" +
                        "if( month<=0 || month >12) { \n" +
                        "   month = Number.NaN \n" +
                        "   console.log(\"Month is \"+ month) \n" +
                        "} else { \n" +
                        "   console.log(\"Value Accepted..\") \n" +
                        "}",
                "Month is NaN"
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Example: prototype",
                "On compiling, it will generate the following JavaScript code −",
                "function employee(id:number,name:string) { \n" +
                        "   this.id = id \n" +
                        "   this.name = name \n" +
                        "} \n" +
                        "\n" +
                        "var emp = new employee(123,\"Smith\") \n" +
                        "employee.prototype.email = \"smith@abc.com\" \n" +
                        "\n" +
                        "console.log(\"Employee 's Id: \"+emp.id) \n" +
                        "console.log(\"Employee's name: \"+emp.name) \n" +
                        "console.log(\"Employee's Email ID: \"+emp.email)",
                "Employee’s Id: 123 \n" +
                        "Employee's name: Smith \n" +
                        "Employee’s Email ID: smith@abc.com"
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Number Methods",
                "The Number object contains only the default methods that are a part of every object's definition. Some of the commonly used methods are listed below −" +
                        "\n\n" +
                        "1.toExponential()\n" +
                        "Forces a number to display in exponential notation, even if the number is in the range in which JavaScript normally uses standard notation.\n" +
                        "\n" +
                        "2.toFixed()\n" +
                        "Formats a number with a specific number of digits to the right of the decimal.\n" +
                        "\n" +
                        "3.toLocaleString()\n" +
                        "Returns a string value version of the current number in a format that may vary according to a browser's local settings.\n" +
                        "\n" +
                        "4.toPrecision()\n" +
                        "Defines how many total digits (including digits to the left and right of the decimal) to display of a number. A negative precision will throw an error.\n" +
                        "\n" +
                        "5.toString()\n" +
                        "Returns the string representation of the number's value. The function is passed the radix, an integer between 2 and 36 specifying the base to use for representing numeric values.\n" +
                        "\n" +
                        "6.valueOf()\n" +
                        "Returns the number's primitive value.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }

    //TypeScript Strings
    private static List<LearnDetailsModel> TypeScriptStrings() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "TypeScript Strings",
                "The String object lets you work with a series of characters. It wraps the string primitive data type with a number of helper methods.\n" +
                        "\n" +
                        "Syntax\n" +
                        "var var_name = new String(string);" +
                        "\n\n" +
                        "A list of the methods available in String object along with their description is given below −" +
                        "\n\n" +
                        "1.Constructor\n" +
                        "Returns a reference to the String function that created the object.\n" +
                        "\n" +
                        "2.Length\n" +
                        "Returns the length of the string.\n" +
                        "\n" +
                        "3.Prototype\n" +
                        "The prototype property allows you to add properties and methods to an object.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "String Methods",
                "A list of the methods available in String object along with their description is given below −" +
                        "\n\n" +
                        "1.charAt()\n" +
                        "Returns the character at the specified index.\n" +
                        "\n" +
                        "2.charCodeAt()\n" +
                        "Returns a number indicating the Unicode value of the character at the given index.\n" +
                        "\n" +
                        "3.concat()\n" +
                        "Combines the text of two strings and returns a new string.\n" +
                        "\n" +
                        "4.indexOf()\n" +
                        "Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found.\n" +
                        "\n" +
                        "5.lastIndexOf()\n" +
                        "Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found.\n" +
                        "\n" +
                        "6.localeCompare()\n" +
                        "Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.\n" +
                        "\n" +
                        "7.match()\n" +
                        "Used to match a regular expression against a string.\n" +
                        "\n" +
                        "8.replace()\n" +
                        "Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring.\n" +
                        "\n" +
                        "9.search()\n" +
                        "Executes the search for a match between a regular expression and a specified string.\n" +
                        "\n" +
                        "10.slice()\n" +
                        "Extracts a section of a string and returns a new string.\n" +
                        "\n" +
                        "11.split()\n" +
                        "Splits a String object into an array of strings by separating the string into substrings.\n" +
                        "\n" +
                        "12.substr()\n" +
                        "Returns the characters in a string beginning at the specified location through the specified number of characters.\n" +
                        "\n" +
                        "13.substring()\n" +
                        "Returns the characters in a string between two indexes into the string.\n" +
                        "\n" +
                        "14.toLocaleLowerCase()\n" +
                        "The characters within a string are converted to lower case while respecting the current locale.\n" +
                        "\n" +
                        "15.toLocaleUpperCase()\n" +
                        "The characters within a string are converted to upper case while respecting the current locale.\n" +
                        "\n" +
                        "16.toLowerCase()\n" +
                        "Returns the calling string value converted to lower case.\n" +
                        "\n" +
                        "17.toString()\n" +
                        "Returns a string representing the specified object.\n" +
                        "\n" +
                        "18.toUpperCase()\n" +
                        "Returns the calling string value converted to uppercase.\n" +
                        "\n" +
                        "19.valueOf()\n" +
                        "Returns the primitive value of the specified object.",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        return list;
    }

    //TypeScript Arrays
    private static List<LearnDetailsModel> TypeScriptArrays() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "TypeScript Arrays",
                "The use of variables to store values poses the following limitations −\n" +
                        "\n" +
                        "Variables are scalar in nature. In other words, a variable declaration can only contain a single at a time. This means that to store n values in a program n variable declarations will be needed. Hence, the use of variables is not feasible when one needs to store a larger collection of values.\n" +
                        "\n" +
                        "Variables in a program are allocated memory in random order, thereby making it difficult to retrieve/read the values in the order of their declaration.\n" +
                        "\n" +
                        "TypeScript introduces the concept of arrays to tackle the same. An array is a homogenous collection of values. To simplify, an array is a collection of values of the same data type. It is a user defined type." +
                        "\n\n" +
                        "Features of an Array\n\n" +
                        "Here is a list of the features of an array −\n" +
                        "\n" +
                        "An array declaration allocates sequential memory blocks.\n" +
                        "\n" +
                        "Arrays are static. This means that an array once initialized cannot be resized.\n" +
                        "\n" +
                        "Each memory block represents an array element.\n" +
                        "\n" +
                        "Array elements are identified by a unique integer called as the subscript / index of the element.\n" +
                        "\n" +
                        "Like variables, arrays too, should be declared before they are used. Use the var keyword to declare an array.\n" +
                        "\n" +
                        "Array initialization refers to populating the array elements.\n" +
                        "\n" +
                        "Array element values can be updated or modified but cannot be deleted.\n" +
                        "\n" +
                        "Declaring and Initializing Arrays\n\n" +
                        "To declare an initialize an array in Typescript use the following syntax −\n" +
                        "\n" +
                        "Syntax:\n" +
                        "var array_name[:datatype];        //declaration \n" +
                        "array_name = [val1,val2,valn..]   //initialization\n" +
                        "An array declaration without the data type is deemed to be of the type any. The type of such an array is inferred from the data type of the array’s first element during initialization.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Accessing Array Elements",
                "The array name followed by the subscript is used refer to an array element. Its syntax is as follows −\n" +
                        "\n" +
                        "array_name[subscript] = value",
                "var alphas:string[]; \n" +
                        "alphas = [\"1\",\"2\",\"3\",\"4\"] \n" +
                        "console.log(alphas[0]); \n" +
                        "console.log(alphas[1]);",
                "1\n" +
                        "2 "
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Array Object",
                "An array can also be created using the Array object. The Array constructor can be passed.\n" +
                        "\n" +
                        "A numeric value that represents the size of the array or\n" +
                        "\n" +
                        "A list of comma separated values.\n" +
                        "\n" +
                        "The following example shows how to create an array using this method.",
                "var arr_names:number[] = new Array(4)  \n" +
                        "\n" +
                        "for(var i = 0;i<arr_names.length;i++) { \n" +
                        "   arr_names[i] = i * 2 \n" +
                        "   console.log(arr_names[i]) \n" +
                        "}",
                "0 \n" +
                        "2 \n" +
                        "4 \n" +
                        "6"
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Array Methods",
                "A list of the methods of the Array object along with their description is given below." +
                        "\n\n" +
                        "1.concat()\n" +
                        "Returns a new array comprised of this array joined with other array(s) and/or value(s).\n" +
                        "\n" +
                        "2.every()\n" +
                        "Returns true if every element in this array satisfies the provided testing function.\n" +
                        "\n" +
                        "3.filter()\n" +
                        "Creates a new array with all of the elements of this array for which the provided filtering function returns true.\n" +
                        "\n" +
                        "4.forEach()\n" +
                        "Calls a function for each element in the array.\n" +
                        "\n" +
                        "5.indexOf()\n" +
                        "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.\n" +
                        "\n" +
                        "6.join()\n" +
                        "Joins all elements of an array into a string.\n" +
                        "\n" +
                        "7.lastIndexOf()\n" +
                        "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.\n" +
                        "\n" +
                        "8.map()\n" +
                        "Creates a new array with the results of calling a provided function on every element in this array.\n" +
                        "\n" +
                        "9.pop()\n" +
                        "Removes the last element from an array and returns that element.\n" +
                        "\n" +
                        "10.push()\n" +
                        "Adds one or more elements to the end of an array and returns the new length of the array.\n" +
                        "\n" +
                        "11.reduce()\n" +
                        "Apply a function simultaneously against two values of the array (from left-to-right) as to reduce it to a single value.\n" +
                        "\n" +
                        "12.reduceRight()\n" +
                        "Apply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value.\n" +
                        "\n" +
                        "13.reverse()\n" +
                        "Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first.\n" +
                        "\n" +
                        "14.shift()\n" +
                        "Removes the first element from an array and returns that element.\n" +
                        "\n" +
                        "15.slice()\n" +
                        "Extracts a section of an array and returns a new array.\n" +
                        "\n" +
                        "16.some()\n" +
                        "Returns true if at least one element in this array satisfies the provided testing function.\n" +
                        "\n" +
                        "17.sort()\n" +
                        "Sorts the elements of an array.\n" +
                        "\n" +
                        "18.splice()\n" +
                        "Adds and/or removes elements from an array.\n" +
                        "\n" +
                        "19.toString()\n" +
                        "Returns a string representing the array and its elements.\n" +
                        "\n" +
                        "20.unshift()\n" +
                        "Adds one or more elements to the front of an array and returns the new length of the array.",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Array Destructuring",
                "Refers to breaking up the structure of an entity. TypeScript supports destructuring when used in the context of an array.",
                "var arr:number[] = [12,13] \n" +
                        "var[x,y] = arr \n" +
                        "console.log(x) \n" +
                        "console.log(y)",
                "12 \n" +
                        "13"
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Array Traversal using for…in loop",
                "One can use the for…in loop to traverse through an array.",
                "var j:any; \n" +
                        "var nums:number[] = [1001,1002,1003,1004] \n" +
                        "\n" +
                        "for(j in nums) { \n" +
                        "   console.log(nums[j]) \n" +
                        "}",
                "1001 \n" +
                        "1002 \n" +
                        "1003 \n" +
                        "1004"
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Arrays in TypeScript",
                "TypeScript supports the following concepts in arrays −",
                "1.Multi-dimensional arrays\n" +
                        "TypeScript supports multidimensional arrays. The simplest form of the multidimensional array is the twodimensional array.\n" +
                        "\n" +
                        "2.Passing arrays to functions\n" +
                        "You can pass to the function a pointer to an array by specifying the array's name without an index.\n" +
                        "\n" +
                        "3.Return array from functions\n" +
                        "Allows a function to return an array",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        return list;
    }

    //TypeScript Tuples
    private static List<LearnDetailsModel> TypeScriptTuples() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "TypeScript Tuples",
                "At times, there might be a need to store a collection of values of varied types. Arrays will not serve this purpose. TypeScript gives us a data type called tuple that helps to achieve such a purpose.\n" +
                        "\n" +
                        "It represents a heterogeneous collection of values. In other words, tuples enable storing multiple fields of different types. Tuples can also be passed as parameters to functions.\n" +
                        "\n" +
                        "Syntax:\n" +
                        "var tuple_name = [value1,value2,value3,…value n]",
                "var myTuple = [10,\"Hello\"];",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Accessing values in Tuples",
                "Tuple values are individually called items. Tuples are index based. This means that items in a tuple can be accessed using their corresponding numeric index. Tuple item’s index starts from zero and extends up to n-1(where n is the tuple’s size).\n" +
                        "\n" +
                        "Syntax:\n" +
                        "tuple_name[index]",
                "var myTuple = [10,\"Hello\"];\n" +
                        "console.log(myTuple[0]) \n" +
                        "console.log(myTuple[1])",
                "10 \n" +
                        "Hello"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Tuple Operations",
                "Tuples in TypeScript supports various operations like pushing a new item, removing an item from the tuple, etc." +
                        "\n\n" +
                        "The push() appends an item to the tuple\n" +
                        "\n" +
                        "The pop() removes and returns the last value in the tuple",
                "var myTuple = [10,\"Hello\",\"World\",\"typeScript\"]; \n" +
                        "console.log(\"Items before push \"+myTuple.length)\n" +
                        "\n" +
                        "myTuple.push(12)\n" +
                        "console.log(\"Items after push \"+myTuple.length) \n" +
                        "console.log(\"Items before pop \"+myTuple.length) \n" +
                        "console.log(myTuple.pop()+\" popped from the tuple\")\n" +
                        "  \n" +
                        "console.log(\"Items after pop \"+myTuple.length)",
                "Items before push 4 \n" +
                        "Items after push 5 \n" +
                        "Items before pop 5 \n" +
                        "12 popped from the tuple \n" +
                        "Items after pop 4"
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Updating Tuples",
                "Tuples are mutable which means you can update or change the values of tuple elements.",
                "var mytuple = [10,\"Hello\",\"World\",\"typeScript\"];\n" +
                        "console.log(\"Tuple value at index 0 \"+mytuple[0]) \n" +
                        "\n" +
                        "mytuple[0] = 121     \n" +
                        "console.log(\"Tuple value at index 0 changed to   \"+mytuple[0])",
                "Tuple value at index 0 10 \n" +
                        "Tuple value at index 0 changed to 121"
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Destructuring a Tuple",
                "Destructuring refers to breaking up the structure of an entity. TypeScript supports destructuring when used in the context of a tuple.",
                "var a =[10,\"hello\"] \n" +
                        "var [b,c] = a \n" +
                        "console.log( b )\n" +
                        "console.log( c )",
                "10 \n" +
                        "hello"
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }

    //TypeScript Union
    private static List<LearnDetailsModel> TypeScriptUnion() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "TypeScript Union",
                "TypeScript 1.4 gives programs the ability to combine one or two types. Union types are a powerful way to express a value that can be one of the several types. Two or more data types are combined using the pipe symbol (|) to denote a Union Type. In other words, a union type is written as a sequence of types separated by vertical bars.\n" +
                        "\n" +
                        "Syntax: Union literal\n" +
                        "Type1|Type2|Type3 ",
                "var val:string|number \n" +
                        "val = 12 \n" +
                        "console.log(\"numeric value of val \"+val) \n" +
                        "val = \"This is a string\" \n" +
                        "console.log(\"string value of val \"+val)",
                "numeric value of val  12 \n" +
                        "string value of val this is a string"
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Example: Union Type and function parameter",
                "The function disp() can accept argument either of the type string or a string array.",
                "function disp(name:string|string[]) { \n" +
                        "   if(typeof name == \"string\") { \n" +
                        "      console.log(name) \n" +
                        "   } else { \n" +
                        "      var i; \n" +
                        "      \n" +
                        "      for(i = 0;i<name.length;i++) { \n" +
                        "         console.log(name[i])\n" +
                        "      } \n" +
                        "   } \n" +
                        "} \n" +
                        "disp(\"anne\") \n" +
                        "console.log(\"Printing names array....\") \n" +
                        "disp([\"Mark\",\"Tom\",\"Mary\",\"John\"])",
                "anne \n" +
                        "Printing names array…. \n" +
                        "anne \n" +
                        "Tom\n" +
                        "Mary\n" +
                        "John"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Union Type and Arrays",
                "Union types can also be applied to arrays, properties and interfaces. The following illustrates the use of union type with an array.",
                "var arr:number[]|string[]; \n" +
                        "var i:number; \n" +
                        "arr = [1,2,4] \n" +
                        "console.log(\"**numeric array**\")  \n" +
                        "\n" +
                        "for(i = 0;i<arr.length;i++) { \n" +
                        "   console.log(arr[i]) \n" +
                        "}  \n" +
                        "\n" +
                        "arr = [\"USA\",\"UK\",\"Paris\"] \n" +
                        "console.log(\"**string array**\")  \n" +
                        "\n" +
                        "for(i = 0;i<arr.length;i++) { \n" +
                        "   console.log(arr[i]) \n" +
                        "}",
                "**numeric array** \n" +
                        "1 \n" +
                        "2 \n" +
                        "4 \n" +
                        "**string array** \n" +
                        "USA \n" +
                        "UK \n" +
                        "Paris"
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //TypeScript Interfaces
    private static List<LearnDetailsModel> TypeScriptInterfaces() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "TypeScript Interfaces",
                "An interface is a syntactical contract that an entity should conform to. In other words, an interface defines the syntax that any entity must adhere to.\n" +
                        "\n" +
                        "Interfaces define properties, methods, and events, which are the members of the interface. Interfaces contain only the declaration of the members. It is the responsibility of the deriving class to define the members. It often helps in providing a standard structure that the deriving classes would follow.",
                "var person = { \n" +
                        "   FirstName:\"Anne\", \n" +
                        "   LastName:\"Moore\", \n" +
                        "   sayHi: ()=>{ return \"Hi\"} \n" +
                        "};",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Declaring Interfaces",
                "The interface keyword is used to declare an interface. Here is the syntax to declare an interface −\n" +
                        "\n" +
                        "Syntax:\n" +
                        "interface interface_name { \n" +
                        "}" +
                        "\n\n" +
                        "The example defines an interface. The customer object is of the type IPerson. Hence, it will now be binding on the object to define all properties as specified by the interface.\n" +
                        "\n" +
                        "Another object with following signature, is still considered as IPerson because that object is treated by its size or signature.",
                "interface IPerson { \n" +
                        "   firstName:string, \n" +
                        "   lastName:string, \n" +
                        "   sayHi: ()=>string \n" +
                        "} \n" +
                        "\n" +
                        "var customer:IPerson = { \n" +
                        "   firstName:\"Anne\",\n" +
                        "   lastName:\"Moore\", \n" +
                        "   sayHi: ():string =>{return \"Hi there\"} \n" +
                        "} \n" +
                        "\n" +
                        "console.log(\"Customer Object \") \n" +
                        "console.log(customer.firstName) \n" +
                        "console.log(customer.lastName) \n" +
                        "console.log(customer.sayHi())  \n" +
                        "\n" +
                        "var employee:IPerson = { \n" +
                        "   firstName:\"Emma\",\n" +
                        "   lastName:\"Watson\", \n" +
                        "   sayHi: ():string =>{return \"Hello!!!\"} \n" +
                        "} \n" +
                        "  \n" +
                        "console.log(\"Employee  Object \") \n" +
                        "console.log(employee.firstName);\n" +
                        "console.log(employee.lastName);",
                "Customer object \n" +
                        "Anne \n" +
                        "Moore \n" +
                        "Hi there \n" +
                        "Employee  object \n" +
                        "Emma  \n" +
                        "Watson \n" +
                        "Hello!!!"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Union Type and Interface",
                "The following example shows the use of Union Type and Interface −",
                "interface RunOptions { \n" +
                        "   program:string; \n" +
                        "   commandline:string[]|string|(()=>string); \n" +
                        "} \n" +
                        "\n" +
                        "var options:RunOptions = {program:\"test1\",commandline:\"Hello\"}; \n" +
                        "console.log(options.commandline)  \n" +
                        "\n" +
                        "options = {program:\"test1\",commandline:[\"Hello\",\"World\"]}; \n" +
                        "console.log(options.commandline[0]); \n" +
                        "console.log(options.commandline[1]);  \n" +
                        "\n" +
                        "options = {program:\"test1\",commandline:()=>{return \"**Hello World**\";}}; \n" +
                        "\n" +
                        "var fn:any = options.commandline; \n" +
                        "console.log(fn());",
                "Hello \n" +
                        "Hello \n" +
                        "World \n" +
                        "**Hello World**"
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Interfaces and Arrays",
                "Interface can define both the kind of key an array uses and the type of entry it contains. Index can be of type string or type number.",
                "interface namelist { \n" +
                        "   [index:number]:string \n" +
                        "} \n" +
                        "\n" +
                        "var list2:namelist = [\"Anne\",1,\"Bran\"] //Error. 1 is not type string  \n" +
                        "interface ages { \n" +
                        "   [index:string]:number \n" +
                        "} \n" +
                        "\n" +
                        "var agelist:ages; \n" +
                        "agelist[\"Anne\"] = 15   // Ok \n" +
                        "agelist[2] = \"nine\"   // Error",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Interfaces and Inheritance",
                "An interface can be extended by other interfaces. In other words, an interface can inherit from other interface. Typescript allows an interface to inherit from multiple interfaces.\n" +
                        "\n" +
                        "Use the extends keyword to implement inheritance among interfaces.\n" +
                        "\n" +
                        "Syntax: Single Interface Inheritance\n\n" +
                        "Child_interface_name extends super_interface_name\n\n" +
                        "Syntax: Multiple Interface Inheritance\n\n" +
                        "Child_interface_name extends super_interface1_name, \n" +
                        "super_interface2_name,…,super_interfaceN_name",
                "",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Simple Interface Inheritance",
                "Example: Simple Interface Inheritance",
                "interface Person { \n" +
                        "   age:number \n" +
                        "} \n" +
                        "\n" +
                        "interface Musician extends Person { \n" +
                        "   instrument:string \n" +
                        "} \n" +
                        "\n" +
                        "var guitar = <Musician>{}; \n" +
                        "guitar.age = 21 \n" +
                        "guitar.instrument = \"Guitar\" \n" +
                        "console.log(\"Age:  \"+guitar.age) console.log(\"Instrument:  \"+guitar.instrument)",
                "Age: 21 \n" +
                        "Instrument: Guitar"
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Multiple Interface Inheritance",
                "Example: Multiple Interface Inheritance" +
                        "\n\n" +
                        "The object Iobj is of the type interface leaf. The interface leaf by the virtue of inheritance now has two attributes- v1 and v2 respectively. Hence, the object Iobj must now contain these attributes.",
                "interface IParent1 { \n" +
                        "   v1:number \n" +
                        "} \n" +
                        "\n" +
                        "interface IParent2 { \n" +
                        "   v2:number \n" +
                        "} \n" +
                        "\n" +
                        "interface Child extends IParent1, IParent2 { } \n" +
                        "var Iobj:Child = { v1:12, v2:23} \n" +
                        "console.log(\"value 1: \"+this.v1+\" value 2: \"+this.v2)",
                "value 1: 12   value 2: 23"
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        return list;
    }

    //TypeScript Classes
    private static List<LearnDetailsModel> TypeScriptClasses() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "TypeScript Classes",
                "TypeScript is object oriented JavaScript. TypeScript supports object-oriented programming features like classes, interfaces, etc. A class in terms of OOP is a blueprint for creating objects. A class encapsulates data for the object. Typescript gives built in support for this concept called class. JavaScript ES5 or earlier didn’t support classes. Typescript gets this feature from ES6.\n" +
                        "\n" +
                        "Creating classes\n" +
                        "Use the class keyword to declare a class in TypeScript. The syntax for the same is given below −\n" +
                        "\n" +
                        "Syntax\n" +
                        "class class_name { \n" +
                        "   //class scope \n" +
                        "}\n" +
                        "The class keyword is followed by the class name. The rules for identifiers must be considered while naming a class.\n" +
                        "\n" +
                        "A class definition can include the following −\n" +
                        "\n" +
                        "Fields − A field is any variable declared in a class. Fields represent data pertaining to objects\n" +
                        "\n" +
                        "Constructors − Responsible for allocating memory for the objects of the class\n" +
                        "\n" +
                        "Functions − Functions represent actions an object can take. They are also at times referred to as methods\n" +
                        "\n" +
                        "These components put together are termed as the data members of the class.\n" +
                        "\n" +
                        "Consider a class Person in typescript.\n" +
                        "\n" +
                        "class Person {\n" +
                        "}",
                "class Car { \n" +
                        "   //field \n" +
                        "   engine:string; \n" +
                        " \n" +
                        "   //constructor \n" +
                        "   constructor(engine:string) { \n" +
                        "      this.engine = engine \n" +
                        "   }  \n" +
                        "\n" +
                        "   //function \n" +
                        "   disp():void { \n" +
                        "      console.log(\"Engine is  :   \"+this.engine) \n" +
                        "   } \n" +
                        "}",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Creating Instance objects",
                "To create an instance of the class, use the new keyword followed by the class name. The syntax for the same is given below −\n" +
                        "\n" +
                        "Syntax\n" +
                        "var object_name = new class_name([ arguments ])\n" +
                        "The new keyword is responsible for instantiation.\n" +
                        "\n" +
                        "The right-hand side of the expression invokes the constructor. The constructor should be passed values if it is parameterized.\n" +
                        "\n" +
                        "Example: Instantiating a class\n" +
                        "var obj = new Car(\"Engine 1\")",
                "var obj = new Car(\"Engine 1\")",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Accessing Attributes and Functions",
                "A class’s attributes and functions can be accessed through the object. Use the ‘ . ’ dot notation (called as the period) to access the data members of a class.\n" +
                        "\n" +
                        "//accessing an attribute \n" +
                        "obj.field_name \n" +
                        "\n" +
                        "//accessing a function \n" +
                        "obj.function_name()",
                "class Car { \n" +
                        "   //field \n" +
                        "   engine:string; \n" +
                        "   \n" +
                        "   //constructor \n" +
                        "   constructor(engine:string) { \n" +
                        "      this.engine = engine \n" +
                        "   }  \n" +
                        "   \n" +
                        "   //function \n" +
                        "   disp():void { \n" +
                        "      console.log(\"Function displays Engine is  :   \"+this.engine) \n" +
                        "   } \n" +
                        "} \n" +
                        "\n" +
                        "//create an object \n" +
                        "var obj = new Car(\"XXSY1\")\n" +
                        "\n" +
                        "//access the field \n" +
                        "console.log(\"Reading attribute value Engine as :  \"+obj.engine)  \n" +
                        "\n" +
                        "//access the function\n" +
                        "obj.disp()",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Class Inheritance",
                "TypeScript supports the concept of Inheritance. Inheritance is the ability of a program to create new classes from an existing class. The class that is extended to create newer classes is called the parent class/super class. The newly created classes are called the child/sub classes.\n" +
                        "\n" +
                        "A class inherits from another class using the ‘extends’ keyword. Child classes inherit all properties and methods except private members and constructors from the parent class.\n" +
                        "\n" +
                        "Syntax\n" +
                        "class child_class_name extends parent_class_name",
                "class Shape { \n" +
                        "   Area:number \n" +
                        "   \n" +
                        "   constructor(a:number) { \n" +
                        "      this.Area = a \n" +
                        "   } \n" +
                        "} \n" +
                        "\n" +
                        "class Circle extends Shape { \n" +
                        "   disp():void { \n" +
                        "      console.log(\"Area of the circle:  \"+this.Area) \n" +
                        "   } \n" +
                        "}\n" +
                        "  \n" +
                        "var obj = new Circle(223); \n" +
                        "obj.disp()",
                "Area of the Circle: 223"
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Class inheritance and Method Overriding",
                "Method Overriding is a mechanism by which the child class redefines the superclass’s method. The following example illustrates the same −" +
                        "\n\n" +
                        "The super keyword is used to refer to the immediate parent of a class. The keyword can be used to refer to the super class version of a variable, property or method. Line 13 invokes the super class version of the doWork() function." +
                        "",
                "class PrinterClass { \n" +
                        "   doPrint():void {\n" +
                        "      console.log(\"doPrint() from Parent called…\") \n" +
                        "   } \n" +
                        "} \n" +
                        "\n" +
                        "class StringPrinter extends PrinterClass { \n" +
                        "   doPrint():void { \n" +
                        "      super.doPrint() \n" +
                        "      console.log(\"doPrint() is printing a string…\")\n" +
                        "   } \n" +
                        "} \n" +
                        "\n" +
                        "var obj = new StringPrinter() \n" +
                        "obj.doPrint()",
                "doPrint() from Parent called… \n" +
                        "doPrint() is printing a string…"
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "The static Keyword",
                "The static keyword can be applied to the data members of a class. A static variable retains its values till the program finishes execution. Static members are referenced by the class name.",
                "class StaticMem {  \n" +
                        "   static num:number; \n" +
                        "   \n" +
                        "   static disp():void { \n" +
                        "      console.log(\"The value of num is\"+ StaticMem.num) \n" +
                        "   } \n" +
                        "} \n" +
                        "\n" +
                        "StaticMem.num = 12\n" +
                        "StaticMem.disp()",
                "The value of num is 12"
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "The instanceof operator",
                "The instanceof operator returns true if the object belongs to the specified type.",
                "class Person{ } \n" +
                        "var obj = new Person() \n" +
                        "var isPerson = obj instanceof Person; \n" +
                        "console.log(\" obj is an instance of Person \" + isPerson);",
                "obj is an instance of Person True"
        );
        final LearnDetailsModel l8 = new LearnDetailsModel(
                "Data Hiding",
                "A class can control the visibility of its data members to members of other classes. This capability is termed as Data Hiding or Encapsulation.\n" +
                        "\n" +
                        "Object Orientation uses the concept of access modifiers or access specifiers to implement the concept of Encapsulation. The access specifiers/modifiers define the visibility of a class’s data members outside its defining class.\n" +
                        "\n" +
                        "The access modifiers supported by TypeScript are −" +
                        "\n\n" +
                        "1.public\n" +
                        "\n" +
                        "A public data member has universal accessibility. Data members in a class are public by default.\n" +
                        "\n" +
                        "2.private\n" +
                        "\n" +
                        "Private data members are accessible only within the class that defines these members. If an external class member tries to access a private member, the compiler throws an error.\n" +
                        "\n" +
                        "3.protected\n" +
                        "\n" +
                        "A protected data member is accessible by the members within the same class as that of the former and also by the members of the child classes.",
                "class Encapsulate { \n" +
                        "   str:string = \"hello\" \n" +
                        "   private str2:string = \"world\" \n" +
                        "}\n" +
                        " \n" +
                        "var obj = new Encapsulate() \n" +
                        "console.log(obj.str)     //accessible \n" +
                        "console.log(obj.str2)   //compilation Error as str2 is private",
                ""
        );
        final LearnDetailsModel l9 = new LearnDetailsModel(
                "Classes and Interfaces",
                "Classes can also implement interfaces.The class AgriLoan implements the interface Loan. Hence, it is now binding on the class to include the property interest as its member.",
                "interface ILoan { \n" +
                        "   interest:number \n" +
                        "} \n" +
                        "\n" +
                        "class AgriLoan implements ILoan { \n" +
                        "   interest:number \n" +
                        "   rebate:number \n" +
                        "   \n" +
                        "   constructor(interest:number,rebate:number) { \n" +
                        "      this.interest = interest \n" +
                        "      this.rebate = rebate \n" +
                        "   } \n" +
                        "} \n" +
                        "\n" +
                        "var obj = new AgriLoan(10,1) \n" +
                        "console.log(\"Interest is : \"+obj.interest+\" Rebate is : \"+obj.rebate )",
                "Interest is : 10 Rebate is : 1"
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        list.add(l8);
        list.add(l9);

        return list;
    }

    //TypeScript Objects
    private static List<LearnDetailsModel> TypeScriptObjects() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "TypeScript Objects",
                "An object is an instance which contains set of key value pairs. The values can be scalar values or functions or even array of other objects. The syntax is given below −\n" +
                        "\n" +
                        "Syntax:\n" +
                        "var object_name = { \n" +
                        "   key1: “value1”, //scalar value \n" +
                        "   key2: “value”,  \n" +
                        "   key3: function() {\n" +
                        "      //functions \n" +
                        "   }, \n" +
                        "   key4:[“content1”, “content2”] //collection  \n" +
                        "};\n" +
                        "As shown above, an object can contain scalar values, functions and structures like arrays and tuples.",
                "var person = { \n" +
                        "   firstname:\"Anne\", \n" +
                        "   lastname:\"Moore\" \n" +
                        "}; \n" +
                        "console.log(person.firstname) \n" +
                        "console.log(person.lastname)",
                "Anne\n" +
                        "Moore"
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "TypeScript Type Template",
                "Let’s say you created an object literal in JavaScript as −\n" +
                        "\n" +
                        "var person = { \n" +
                        "   firstname:\"Tom\", \n" +
                        "   lastname:\"Hanks\" \n" +
                        "};\n" +
                        "In case you want to add some value to an object, JavaScript allows you to make the necessary modification. Suppose we need to add a function to the person object later this is the way you can do this.\n" +
                        "\n" +
                        "person.sayHello = function(){ return \"hello\";}\n" +
                        "If you use the same code in Typescript the compiler gives an error. This is because in Typescript, concrete objects should have a type template. Objects in Typescript must be an instance of a particular type.\n" +
                        "\n" +
                        "You can solve this by using a method template in declaration.",
                "var person = {\n" +
                        "   firstName:\"Anne\", \n" +
                        "   lastName:\"Moore\", \n" +
                        "   sayHello:function() {  }\n" +
                        "} \n" +
                        "person.sayHello = function() {  \n" +
                        "   console.log(\"hello \"+person.firstName)\n" +
                        "}  \n" +
                        "person.sayHello()",
                "hello Anne"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Objects as function parameters",
                "Example: Objects as function parameters.The example declares an object literal. The function expression is invoked passing person object.",
                "var person = { \n" +
                        "   firstname:\"Anne\", \n" +
                        "   lastname:\"Moore\" \n" +
                        "}; \n" +
                        "var invokeperson = function(obj: { firstname:string, lastname :string }) { \n" +
                        "   console.log(\"first name :\"+obj.firstname) \n" +
                        "   console.log(\"last name :\"+obj.lastname) \n" +
                        "} \n" +
                        "invokeperson(person)",
                "first name :Anne \n" +
                        "last name :Moore"
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Anonymous Object",
                "Example: Anonymous Object",
                "var invokeperson = function(obj:{ firstname:string, lastname :string}) { \n" +
                        "   console.log(\"first name :\"+obj.firstname) \n" +
                        "   console.log(\"last name :\"+obj.lastname) \n" +
                        "} \n" +
                        "invokeperson({firstname:\"Harry\",lastname:\"Potter\"});",
                "first name :Harry \n" +
                        "last name :Potter"
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Duck-typing",
                "In duck-typing, two objects are considered to be of the same type if both share the same set of properties. Duck-typing verifies the presence of certain properties in the objects, rather than their actual type, to check their suitability. The concept is generally explained by the following phrase −\n" +
                        "\n" +
                        "“When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.”\n" +
                        "\n" +
                        "The TypeScript compiler implements the duck-typing system that allows object creation on the fly while keeping type safety. The following example shows how we can pass objects that don’t explicitly implement an interface but contain all of the required members to a function.",
                "interface IPoint { \n" +
                        "   x:number \n" +
                        "   y:number \n" +
                        "} \n" +
                        "function addPoints(p1:IPoint,p2:IPoint):IPoint { \n" +
                        "   var x = p1.x + p2.x \n" +
                        "   var y = p1.y + p2.y \n" +
                        "   return {x:x,y:y} \n" +
                        "} \n" +
                        "\n" +
                        "//Valid \n" +
                        "var newPoint = addPoints({x:3,y:4},{x:5,y:1})  \n" +
                        "\n" +
                        "//Error \n" +
                        "var newPoint2 = addPoints({x:1},{x:4,y:3})",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);

        return list;
    }

    //TypeScript Namespaces
    private static List<LearnDetailsModel> TypeScriptNamespaces() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "TypeScript Namespaces",
                "A namespace is a way to logically group related code. This is inbuilt into TypeScript unlike in JavaScript where variables declarations go into a global scope and if multiple JavaScript files are used within same project there will be possibility of overwriting or misconstruing the same variables, which will lead to the “global namespace pollution problem” in JavaScript.\n" +
                        "\n" +
                        "Defining a Namespace\n" +
                        "A namespace definition begins with the keyword namespace followed by the namespace name as follows −\n" +
                        "\n" +
                        "namespace SomeNameSpaceName { \n" +
                        "   export interface ISomeInterfaceName {      }  \n" +
                        "   export class SomeClassName {      }  \n" +
                        "} \n" +
                        "The classes or interfaces which should be accessed outside the namespace should be marked with keyword export.\n" +
                        "\n" +
                        "To access the class or interface in another namespace, the syntax will be namespaceName.className\n" +
                        "\n" +
                        "SomeNameSpaceName.SomeClassName;\n" +
                        "If the first namespace is in separate TypeScript file, then it should be referenced using triple slash reference syntax.\n" +
                        "\n" +
                        "/// <reference path = \"SomeFileName.ts\" />",
                "FileName :IShape.ts \n" +
                        "---------- \n" +
                        "namespace Drawing { \n" +
                        "   export interface IShape { \n" +
                        "      draw(); \n" +
                        "   }\n" +
                        "}  \n" +
                        "\n" +
                        "FileName :Circle.ts \n" +
                        "---------- \n" +
                        "/// <reference path = \"IShape.ts\" /> \n" +
                        "namespace Drawing { \n" +
                        "   export class Circle implements IShape { \n" +
                        "      public draw() { \n" +
                        "         console.log(\"Circle is drawn\"); \n" +
                        "      }  \n" +
                        "      \n" +
                        "      FileName :Triangle.ts \n" +
                        "      ---------- \n" +
                        "      /// <reference path = \"IShape.ts\" /> \n" +
                        "      namespace Drawing { \n" +
                        "         export class Triangle implements IShape { \n" +
                        "            public draw() { \n" +
                        "               console.log(\"Triangle is drawn\"); \n" +
                        "            } \n" +
                        "         } \n" +
                        "         \n" +
                        "         FileName : TestShape.ts \n" +
                        "         /// <reference path = \"IShape.ts\" />   \n" +
                        "         /// <reference path = \"Circle.ts\" /> \n" +
                        "         /// <reference path = \"Triangle.ts\" />  \n" +
                        "         function drawAllShapes(shape:Drawing.IShape) { \n" +
                        "            shape.draw(); \n" +
                        "         } \n" +
                        "         drawAllShapes(new Drawing.Circle());\n" +
                        "         drawAllShapes(new Drawing.Triangle());\n" +
                        "      }\n" +
                        "   }\n" +
                        "}",
                "Circle is drawn \n" +
                        "Triangle is drawn"
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Nested Namespaces",
                "You can define one namespace inside another namespace as follows −",
                "namespace namespace_name1 { \n" +
                        "   export namespace namespace_name2 {\n" +
                        "      export class class_name {    } \n" +
                        "   } \n" +
                        "}",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //TypeScript Modules
    private static List<LearnDetailsModel> TypeScriptModules() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "TypeScript Modules",
                "A module is designed with the idea to organize code written in TypeScript. Modules are broadly divided into −\n" +
                        "\n" +
                        "Internal Modules\n" +
                        "External Modules",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Internal Module",
                "Internal modules came in earlier version of Typescript. This was used to logically group classes, interfaces, functions into one unit and can be exported in another module. This logical grouping is named namespace in latest version of TypeScript. So internal modules are obsolete instead we can use namespace. Internal modules are still supported, but its recommended to use namespace over internal modules.\n" +
                        "\n" +
                        "Internal Module Syntax (Old)\n" +
                        "module shrCreation { \n" +
                        "   export function add(x, y) {  \n" +
                        "      console.log(x+y); \n" +
                        "   } \n" +
                        "}\n" +
                        "Namespace Syntax (New)\n" +
                        "namespace shrCreation { \n" +
                        "   export function add(x, y) { console.log(x + y);} \n" +
                        "}",
                "var shrCreation; \n" +
                        "(function (shrCreation) { \n" +
                        "   function add(x, y) { \n" +
                        "      console.log(x + y); \n" +
                        "   } \n" +
                        "   shrCreation.add = add; \n" +
                        "})(shrCreation || (shrCreation = {}));",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "External Module",
                "External modules in TypeScript exists to specify and load dependencies between multiple external js files. If there is only one js file used, then external modules are not relevant. Traditionally dependency management between JavaScript files was done using browser script tags (<script></script>). But that’s not extendable, as its very linear while loading modules. That means instead of loading files one after other there is no asynchronous option to load modules. When you are programming js for the server for example NodeJs you don’t even have script tags.\n" +
                        "\n" +
                        "There are two scenarios for loading dependents js files from a single main JavaScript file.\n" +
                        "\n" +
                        "Client Side - RequireJs\n" +
                        "Server Side - NodeJs\n" +
                        "Selecting a Module Loader\n" +
                        "To support loading external JavaScript files, we need a module loader. This will be another js library. For browser the most common library used is RequieJS. This is an implementation of AMD (Asynchronous Module Definition) specification. Instead of loading files one after the other, AMD can load them all separately, even when they are dependent on each other.\n" +
                        "\n" +
                        "Defining External Module\n" +
                        "When defining external module in TypeScript targeting CommonJS or AMD, each file is considered as a module. So it’s optional to use internal module with in external module.\n" +
                        "\n" +
                        "If you are migrating TypeScript from AMD to CommonJs module systems, then there is no additional work needed. The only thing you need to change is just the compiler flag Unlike in JavaScript there is an overhead in migrating from CommonJs to AMD or vice versa.\n" +
                        "\n" +
                        "The syntax for declaring an external module is using keyword ‘export’ and ‘import’.\n" +
                        "\n" +
                        "Syntax\n" +
                        "//FileName : SomeInterface.ts \n" +
                        "export interface SomeInterface { \n" +
                        "   //code declarations \n" +
                        "}\n" +
                        "To use the declared module in another file, an import keyword is used as given below. The file name is only specified no extension used.\n" +
                        "\n" +
                        "import someInterfaceRef = require(“./SomeInterface”);",
                "// IShape.ts \n" +
                        "export interface IShape { \n" +
                        "   draw(); \n" +
                        "}\n" +
                        "\n" +
                        "// Circle.ts \n" +
                        "import shape = require(\"./IShape\"); \n" +
                        "export class Circle implements shape.IShape { \n" +
                        "   public draw() { \n" +
                        "      console.log(\"Cirlce is drawn (external module)\"); \n" +
                        "   } \n" +
                        "} \n" +
                        "\n" +
                        "// Triangle.ts \n" +
                        "import shape = require(\"./IShape\"); \n" +
                        "export class Triangle implements shape.IShape { \n" +
                        "   public draw() { \n" +
                        "      console.log(\"Triangle is drawn (external module)\"); \n" +
                        "   } \n" +
                        "}\n" +
                        "   \n" +
                        "// TestShape.ts \n" +
                        "import shape = require(\"./IShape\"); \n" +
                        "import circle = require(\"./Circle\"); \n" +
                        "import triangle = require(\"./Triangle\");  \n" +
                        "\n" +
                        "function drawAllShapes(shapeToDraw: shape.IShape) {\n" +
                        "   shapeToDraw.draw(); \n" +
                        "} \n" +
                        "\n" +
                        "drawAllShapes(new circle.Circle()); \n" +
                        "drawAllShapes(new triangle.Triangle()); ",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //AngularJS
    //AngularJS Introduction
    private static List<LearnDetailsModel> AngularJSIntroduction() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Why to Learn AngularJS?",
                "AngularJS is an open-source web application framework. It was originally developed in 2009 by Misko Hevery and Adam Abrons. It is now maintained by Google. Its latest version is 1.2.21.\n" +
                        "\n" +
                        "AngularJS is a efficient framework that can create Rich Internet Applications (RIA).\n" +
                        "\n" +
                        "AngularJS provides developers an options to write client side applications using JavaScript in a clean Model View Controller (MVC) way.\n" +
                        "\n" +
                        "Applications written in AngularJS are cross-browser compliant. AngularJS automatically handles JavaScript code suitable for each browser.\n" +
                        "\n" +
                        "AngularJS is open source, completely free, and used by thousands of developers around the world. It is licensed under the Apache license version 2.0.\n" +
                        "\n" +
                        "Overall, AngularJS is a framework to build large scale, high-performance, and easyto-maintain web applications.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Hello World using AngularJS.",
                "Just to give you a little excitement about AngularJS, I'm going to give you a small conventional AngularJS Hello World program, You can try it using Demo link.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>AngularJS First Application</title>\n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>\n" +
                        "      <h1>Sample Application</h1>\n" +
                        "      \n" +
                        "      <div ng-app = \"\">\n" +
                        "         <p>Enter your Name: <input type = \"text\" ng-model = \"name\"></p>\n" +
                        "         <p>Hello <span ng-bind = \"name\"></span>!</p>\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\">\n" +
                        "      </script>\n" +
                        "      \n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "General Features",
                "The general features of AngularJS are as follows −\n" +
                        "\n" +
                        "AngularJS is a efficient framework that can create Rich Internet Applications (RIA).\n" +
                        "\n" +
                        "AngularJS provides developers an options to write client side applications using JavaScript in a clean Model View Controller (MVC) way.\n" +
                        "\n" +
                        "Applications written in AngularJS are cross-browser compliant. AngularJS automatically handles JavaScript code suitable for each browser.\n" +
                        "\n" +
                        "AngularJS is open source, completely free, and used by thousands of developers around the world. It is licensed under the Apache license version 2.0.\n" +
                        "\n" +
                        "Overall, AngularJS is a framework to build large scale, high-performance, and easyto-maintain web applications.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Core Features",
                "The core features of AngularJS are as follows −\n" +
                        "\n" +
                        "Data-binding − It is the automatic synchronization of data between model and view components.\n" +
                        "\n" +
                        "Scope − These are objects that refer to the model. They act as a glue between controller and view.\n" +
                        "\n" +
                        "Controller − These are JavaScript functions bound to a particular scope.\n" +
                        "\n" +
                        "Services − AngularJS comes with several built-in services such as $http to make a XMLHttpRequests. These are singleton objects which are instantiated only once in app.\n" +
                        "\n" +
                        "Filters − These select a subset of items from an array and returns a new array.\n" +
                        "\n" +
                        "Directives − Directives are markers on DOM elements such as elements, attributes, css, and more. These can be used to create custom HTML tags that serve as new, custom widgets. AngularJS has built-in directives such as ngBind, ngModel, etc.\n" +
                        "\n" +
                        "Templates − These are the rendered view with information from the controller and model. These can be a single file (such as index.html) or multiple views in one page using partials.\n" +
                        "\n" +
                        "Routing − It is concept of switching views.\n" +
                        "\n" +
                        "Model View Whatever − MVW is a design pattern for dividing an application into different parts called Model, View, and Controller, each with distinct responsibilities. AngularJS does not implement MVC in the traditional sense, but rather something closer to MVVM (Model-View-ViewModel). The Angular JS team refers it humorously as Model View Whatever.\n" +
                        "\n" +
                        "Deep Linking − Deep linking allows to encode the state of application in the URL so that it can be bookmarked. The application can then be restored from the URL to the same state.\n" +
                        "\n" +
                        "Dependency Injection − AngularJS has a built-in dependency injection subsystem that helps the developer to create, understand, and test the applications easily.",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Advantages of AngularJS",
                "The advantages of AngularJS are −\n" +
                        "\n" +
                        "It provides the capability to create Single Page Application in a very clean and maintainable way.\n" +
                        "\n" +
                        "It provides data binding capability to HTML. Thus, it gives user a rich and responsive experience.\n" +
                        "\n" +
                        "AngularJS code is unit testable.\n" +
                        "\n" +
                        "AngularJS uses dependency injection and make use of separation of concerns.\n" +
                        "\n" +
                        "AngularJS provides reusable components.\n" +
                        "\n" +
                        "With AngularJS, the developers can achieve more functionality with short code.\n" +
                        "\n" +
                        "In AngularJS, views are pure html pages, and controllers written in JavaScript do the business processing.\n" +
                        "\n" +
                        "On the top of everything, AngularJS applications can run on all major browsers and smart phones, including Android and iOS based phones/tablets.",
                "",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Disadvantages of AngularJS",
                "Though AngularJS comes with a lot of merits, here are some points of concern −\n" +
                        "\n" +
                        "Not Secure − Being JavaScript only framework, application written in AngularJS are not safe. Server side authentication and authorization is must to keep an application secure.\n" +
                        "\n" +
                        "Not degradable − If the user of your application disables JavaScript, then nothing would be visible, except the basic page.",
                "",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "AngularJS Directives",
                "The AngularJS framework can be divided into three major parts −\n" +
                        "\n" +
                        "ng-app − This directive defines and links an AngularJS application to HTML.\n" +
                        "\n" +
                        "ng-model − This directive binds the values of AngularJS application data to HTML input controls.\n" +
                        "\n" +
                        "ng-bind − This directive binds the AngularJS application data to HTML tags.",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);

        return list;
    }

    //AngularJS MVC Architecture
    private static List<LearnDetailsModel> AngularJSMVCArchitecture() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "AngularJS MVC Architecture",
                "Model View Controller or MVC as it is popularly called, is a software design pattern for developing web applications. A Model View Controller pattern is made up of the following three parts −\n" +
                        "\n" +
                        "Model − It is the lowest level of the pattern responsible for maintaining data.\n" +
                        "\n" +
                        "View − It is responsible for displaying all or a portion of the data to the user.\n" +
                        "\n" +
                        "Controller − It is a software Code that controls the interactions between the Model and View.\n" +
                        "\n" +
                        "MVC is popular because it isolates the application logic from the user interface layer and supports separation of concerns. The controller receives all requests for the application and then works with the model to prepare any data needed by the view. The view then uses the data prepared by the controller to generate a final presentable response. The MVC abstraction can be graphically represented.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "The Model",
                "The model is responsible for managing application data. It responds to the request from view and to the instructions from controller to update itself.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "The View",
                "A presentation of data in a particular format, triggered by the controller's decision to present the data. They are script-based template systems such as JSP, ASP, PHP and very easy to integrate with AJAX technology.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "The Controller",
                "The controller responds to user input and performs interactions on the data model objects. The controller receives input, validates it, and then performs business operations that modify the state of the data model.\n" +
                        "\n" +
                        "AngularJS is a MVC based framework. In the coming chapters, we will see how AngularJS uses MVC methodology.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        return list;
    }

    //AngularJS First Application
    private static List<LearnDetailsModel> AngularJSFirstApplication() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "AngularJS First Application",
                "Before creating actual Hello World ! application using AngularJS, let us see the parts of a AngularJS application. An AngularJS application consists of following three important parts −\n" +
                        "\n" +
                        "ng-app − This directive defines and links an AngularJS application to HTML.\n" +
                        "\n" +
                        "ng-model − This directive binds the values of AngularJS application data to HTML input controls.\n" +
                        "\n" +
                        "ng-bind − This directive binds the AngularJS Application data to HTML tags.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Creating AngularJS Application",
                "Step 1: Load framework\n" +
                        "Being a pure JavaScript framework, it can be added using <Script> tag.\n" +
                        "\n" +
                        "<script \n" +
                        "   src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\">\n" +
                        "</script>\n\n" +
                        "Step 2: Define AngularJS application using ng-app directive\n" +
                        "<div ng-app = \"\">\n" +
                        "   ...\n" +
                        "</div>\n\n" +
                        "Step 3: Define a model name using ng-model directive\n" +
                        "<p>Enter your Name: <input type = \"text\" ng-model = \"name\"></p>\n\n" +
                        "Step 4: Bind the value of above model defined using ng-bind directive\n" +
                        "<p>Hello <span ng-bind = \"name\"></span>!</p>",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Executing AngularJS Application",
                "Use the above-mentioned three steps in an HTML page.\n" +
                        "\n" +
                        "testAngularJS.htm",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>AngularJS First Application</title>\n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>\n" +
                        "      <h1>Sample Application</h1>\n" +
                        "      \n" +
                        "      <div ng-app = \"\">\n" +
                        "         <p>Enter your Name: <input type = \"text\" ng-model = \"name\"></p>\n" +
                        "         <p>Hello <span ng-bind = \"name\"></span>!</p>\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\">\n" +
                        "      </script>\n" +
                        "      \n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "How AngularJS Integrates with HTML",
                "The ng-app directive indicates the start of AngularJS application.\n" +
                        "\n" +
                        "The ng-model directive creates a model variable named name, which can be used with the HTML page and within the div having ng-app directive.\n" +
                        "\n" +
                        "The ng-bind then uses the name model to be displayed in the HTML <span> tag whenever user enters input in the text box.\n" +
                        "\n" +
                        "Closing</div> tag indicates the end of AngularJS application.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        return list;
    }

    //AngularJS Directives
    private static List<LearnDetailsModel> AngularJSDirectives() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "AngularJS Directives",
                "AngularJS directives are used to extend HTML. They are special attributes starting with ng-prefix. Let us discuss the following directives −\n" +
                        "\n" +
                        "ng-app − This directive starts an AngularJS Application.\n" +
                        "\n" +
                        "ng-init − This directive initializes application data.\n" +
                        "\n" +
                        "ng-model − This directive defines the model that is variable to be used in AngularJS.\n" +
                        "\n" +
                        "ng-repeat − This directive repeats HTML elements for each item in a collection.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "ng-app directive",
                "The ng-app directive starts an AngularJS Application. It defines the root element. It automatically initializes or bootstraps the application when the web page containing AngularJS Application is loaded. It is also used to load various AngularJS modules in AngularJS Application. In the following example, we define a default AngularJS application using ng-app attribute of a <div> element.",
                "<div ng-app = \"\">\n" +
                        "   ...\n" +
                        "</div>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "ng-init directive",
                "The ng-init directive initializes an AngularJS Application data. It is used to assign values to the variables. In the following example, we initialize an array of countries. We use JSON syntax to define the array of countries.",
                "<div ng-app = \"\" ng-init = \"countries = [{locale:'en-US',name:'United States'}, \n" +
                        "   {locale:'en-GB',name:'United Kingdom'}, {locale:'en-FR',name:'France'}]\">\n" +
                        "   ...\n" +
                        "</div>",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "ng-model directive",
                "The ng-model directive defines the model/variable to be used in AngularJS Application. In the following example, we define a model named name.",
                "<div ng-app = \"\">\n" +
                        "   ...\n" +
                        "   <p>Enter your Name: <input type = \"text\" ng-model = \"name\"></p>\n" +
                        "</div>",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "ng-repeat directive",
                "The ng-repeat directive repeats HTML elements for each item in a collection. In the following example, we iterate over the array of countries.",
                "<div ng-app = \"\">\n" +
                        "   ...\n" +
                        "   <p>List of Countries with locale:</p>\n" +
                        "   \n" +
                        "   <ol>\n" +
                        "      <li ng-repeat = \"country in countries\">\n" +
                        "         {{ 'Country: ' + country.name + ', Locale: ' + country.locale }}\n" +
                        "      </li>\n" +
                        "   </ol>\n" +
                        "</div>",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }

    //AngularJS Expressions
    private static List<LearnDetailsModel> AngularJSExpressions() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "AngularJS Expressions",
                "Expressions are used to bind application data to HTML. Expressions are written inside double curly braces such as in {{ expression}}. Expressions behave similar to ngbind directives. AngularJS expressions are pure JavaScript expressions and output the data where they are used.\n" +
                        "\n" +
                        "Using numbers\n" +
                        "<p>Expense on Books : {{cost * quantity}} Rs</p>\n\n" +
                        "Using Strings\n" +
                        "<p>Hello {{student.firstname + \" \" + student.lastname}}!</p>\n\n" +
                        "Using Object\n" +
                        "<p>Roll No: {{student.rollno}}</p>\n\n" +
                        "Using Array\n" +
                        "<p>Marks(Math): {{marks[3]}}</p>",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Example",
                "The following example shows the use of all the above-mentioned expressions −\n" +
                        "\n" +
                        "testAngularJS.htm",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>AngularJS Expressions</title>\n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>\n" +
                        "      <h1>Sample Application</h1>\n" +
                        "      \n" +
                        "      <div ng-app = \"\" ng-init = \"quantity = 1;cost = 24; \n" +
                        "         student = {firstname:'Anne',lastname:'Moore',rollno:101};\n" +
                        "         marks = [80,90,75,73,60]\">\n" +
                        "         <p>Hello {{student.firstname + \" \" + student.lastname}}!</p>\n" +
                        "         <p>Expense on Books : {{cost * quantity}} USD</p>\n" +
                        "         <p>Roll No: {{student.rollno}}</p>\n" +
                        "         <p>Marks(Math): {{marks[3]}}</p>\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\">\n" +
                        "      </script>\n" +
                        "      \n" +
                        "   </body>\n" +
                        "</html>",
                "Open the file testAngularJS.htm in a web browser and see the result."
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //AngularJS Controllers
    private static List<LearnDetailsModel> AngularJSControllers() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "AngularJS Controllers",
                "AngularJS application mainly relies on controllers to control the flow of data in the application. A controller is defined using ng-controller directive. A controller is a JavaScript object that contains attributes/properties, and functions. Each controller accepts $scope as a parameter, which refers to the application/module that the controller needs to handle.\n" +
                        "\n" +
                        "<div ng-app = \"\" ng-controller = \"studentController\">\n" +
                        "   ...\n" +
                        "</div>\n" +
                        "Here, we declare a controller named studentController, using the ng-controller directive. We define it as follows −\n" +
                        "\n" +
                        "<script>\n" +
                        "   function studentController($scope) {\n" +
                        "      $scope.student = {\n" +
                        "         firstName: \"Mahesh\",\n" +
                        "         lastName: \"Parashar\",\n" +
                        "         \n" +
                        "         fullName: function() {\n" +
                        "            var studentObject;\n" +
                        "            studentObject = $scope.student;\n" +
                        "            return studentObject.firstName + \" \" + studentObject.lastName;\n" +
                        "         }\n" +
                        "      };\n" +
                        "   }\n" +
                        "</script>\n" +
                        "The studentController is defined as a JavaScript object with $scope as an argument.\n" +
                        "\n" +
                        "The $scope refers to application which uses the studentController object.\n" +
                        "\n" +
                        "The $scope.student is a property of studentController object.\n" +
                        "\n" +
                        "The firstName and the lastName are two properties of $scope.student object. We pass the default values to them.\n" +
                        "\n" +
                        "The property fullName is the function of $scope.student object, which returns the combined name.\n" +
                        "\n" +
                        "In the fullName function, we get the student object and then return the combined name.\n" +
                        "\n" +
                        "As a note, we can also define the controller object in a separate JS file and refer that file in the HTML page.\n" +
                        "\n" +
                        "Now we can use studentController's student property using ng-model or using expressions as follows −\n" +
                        "\n" +
                        "Enter first name: <input type = \"text\" ng-model = \"student.firstName\"><br>\n" +
                        "Enter last name: <input type = \"text\" ng-model = \"student.lastName\"><br>\n" +
                        "<br>\n" +
                        "You are entering: {{student.fullName()}}\n" +
                        "We bound student.firstName and student.lastname to two input boxes.\n" +
                        "\n" +
                        "We bound student.fullName() to HTML.\n" +
                        "\n" +
                        "Now whenever you type anything in first name and last name input boxes, you can see the full name getting updated automatically.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Example",
                "The following example shows the use of controller −\n" +
                        "\n" +
                        "testAngularJS.htm",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>Angular JS Controller</title>\n" +
                        "      <script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\">\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>\n" +
                        "      <h2>AngularJS Sample Application</h2>\n" +
                        "      \n" +
                        "      <div ng-app = \"mainApp\" ng-controller = \"studentController\">\n" +
                        "         Enter first name: <input type = \"text\" ng-model = \"student.firstName\"><br>\n" +
                        "         <br>\n" +
                        "         Enter last name: <input type = \"text\" ng-model = \"student.lastName\"><br>\n" +
                        "         <br>\n" +
                        "         You are entering: {{student.fullName()}}\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <script>\n" +
                        "         var mainApp = angular.module(\"mainApp\", []);\n" +
                        "         \n" +
                        "         mainApp.controller('studentController', function($scope) {\n" +
                        "            $scope.student = {\n" +
                        "               firstName: \"Anne\",\n" +
                        "               lastName: \"Moore\",\n" +
                        "               \n" +
                        "               fullName: function() {\n" +
                        "                  var studentObject;\n" +
                        "                  studentObject = $scope.student;\n" +
                        "                  return studentObject.firstName + \" \" + studentObject.lastName;\n" +
                        "               }\n" +
                        "            };\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "      \n" +
                        "   </body>\n" +
                        "</html>",
                "Open the file testAngularJS.htm in a web browser and see the result."
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //AngularJS Filters
    private static List<LearnDetailsModel> AngularJSFilters() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "AngularJS Filters",
                "Filters are used to modify the data. They can be clubbed in expression or directives using pipe (|) character. The following list shows the commonly used filters." +
                        "\n\n" +
                        "1. uppercase\n" +
                        "\n" +
                        "converts a text to upper case text.\n" +
                        "\n" +
                        "2. lowercase\n" +
                        "\n" +
                        "converts a text to lower case text.\n" +
                        "\n" +
                        "3. currency\n" +
                        "\n" +
                        "formats text in a currency format.\n" +
                        "\n" +
                        "4. filter\n" +
                        "\n" +
                        "filter the array to a subset of it based on provided criteria.\n" +
                        "\n" +
                        "5. orderby\n" +
                        "\n" +
                        "orders the array based on provided criteria.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Uppercase Filter",
                "Add uppercase filter to an expression using pipe character. Here we've added uppercase filter to print student name in all capital letters.",
                "Enter first name:<input type = \"text\" ng-model = \"student.firstName\">\n" +
                        "Enter last name: <input type = \"text\" ng-model = \"student.lastName\">\n" +
                        "Name in Upper Case: {{student.fullName() | uppercase}}",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Lowercase Filter",
                "Add lowercase filter to an expression using pipe character. Here we've added lowercase filter to print student name in all lowercase letters.",
                "Enter first name:<input type = \"text\" ng-model = \"student.firstName\">\n" +
                        "Enter last name: <input type = \"text\" ng-model = \"student.lastName\">\n" +
                        "Name in Lower Case: {{student.fullName() | lowercase}}",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Currency Filter",
                "Add currency filter to an expression returning number using pipe character. Here we've added currency filter to print fees using currency format.",
                "Enter fees: <input type = \"text\" ng-model = \"student.fees\">\n" +
                        "fees: {{student.fees | currency}}",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Filter",
                "To display only required subjects, we use subjectName as filter.",
                "Enter subject: <input type = \"text\" ng-model = \"subjectName\">\n" +
                        "Subject:\n" +
                        "<ul>\n" +
                        "   <li ng-repeat = \"subject in student.subjects | filter: subjectName\">\n" +
                        "      {{ subject.name + ', marks:' + subject.marks }}\n" +
                        "   </li>\n" +
                        "</ul>",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "OrderBy Filter",
                "To order subjects by marks, we use orderBy marks.",
                "Subject:\n" +
                        "<ul>\n" +
                        "   <li ng-repeat = \"subject in student.subjects | orderBy:'marks'\">\n" +
                        "      {{ subject.name + ', marks:' + subject.marks }}\n" +
                        "   </li>\n" +
                        "</ul>",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Example",
                "The following example shows use of all the above mentioned filters.\n" +
                        "\n" +
                        "testAngularJS.htm",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>Angular JS Filters</title>\n" +
                        "      <script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\">\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>\n" +
                        "      <h2>AngularJS Sample Application</h2>\n" +
                        "      \n" +
                        "      <div ng-app = \"mainApp\" ng-controller = \"studentController\">\n" +
                        "         <table border = \"0\">\n" +
                        "            <tr>\n" +
                        "               <td>Enter first name:</td>\n" +
                        "               <td><input type = \"text\" ng-model = \"student.firstName\"></td>\n" +
                        "            </tr>\n" +
                        "            <tr>\n" +
                        "               <td>Enter last name: </td>\n" +
                        "               <td><input type = \"text\" ng-model = \"student.lastName\"></td>\n" +
                        "            </tr>\n" +
                        "            <tr>\n" +
                        "               <td>Enter fees: </td>\n" +
                        "               <td><input type = \"text\" ng-model = \"student.fees\"></td>\n" +
                        "            </tr>\n" +
                        "            <tr>\n" +
                        "               <td>Enter subject: </td>\n" +
                        "               <td><input type = \"text\" ng-model = \"subjectName\"></td>\n" +
                        "            </tr>\n" +
                        "         </table>\n" +
                        "         <br/>\n" +
                        "         \n" +
                        "         <table border = \"0\">\n" +
                        "            <tr>\n" +
                        "               <td>Name in Upper Case: </td><td>{{student.fullName() | uppercase}}</td>\n" +
                        "            </tr>\n" +
                        "            <tr>\n" +
                        "               <td>Name in Lower Case: </td><td>{{student.fullName() | lowercase}}</td>\n" +
                        "            </tr>\n" +
                        "            <tr>\n" +
                        "               <td>fees: </td><td>{{student.fees | currency}}\n" +
                        "               </td>\n" +
                        "            </tr>\n" +
                        "            <tr>\n" +
                        "               <td>Subject:</td>\n" +
                        "               <td>\n" +
                        "                  <ul>\n" +
                        "                     <li ng-repeat = \"subject in student.subjects | filter: subjectName |orderBy:'marks'\">\n" +
                        "                        {{ subject.name + ', marks:' + subject.marks }}\n" +
                        "                     </li>\n" +
                        "                  </ul>\n" +
                        "               </td>\n" +
                        "            </tr>\n" +
                        "         </table>\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <script>\n" +
                        "         var mainApp = angular.module(\"mainApp\", []);\n" +
                        "         \n" +
                        "         mainApp.controller('studentController', function($scope) {\n" +
                        "            $scope.student = {\n" +
                        "               firstName: \"Anne\",\n" +
                        "               lastName: \"Moore\",\n" +
                        "               fees:500,\n" +
                        "               \n" +
                        "               subjects:[\n" +
                        "                  {name:'Physics',marks:70},\n" +
                        "                  {name:'Chemistry',marks:80},\n" +
                        "                  {name:'Math',marks:65}\n" +
                        "               ],\n" +
                        "               fullName: function() {\n" +
                        "                  var studentObject;\n" +
                        "                  studentObject = $scope.student;\n" +
                        "                  return studentObject.firstName + \" \" + studentObject.lastName;\n" +
                        "               }\n" +
                        "            };\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "      \n" +
                        "   </body>\n" +
                        "</html>",
                "Open the file testAngularJS.htm in a web browser. See the result.\n\n" +
                        "Name in Upper Case:\tANNE MOORE\n" +
                        "Name in Lower Case:\tanne moore\n" +
                        "fees:\t$500.00\n" +
                        "Subject:\t\n" +
                        "Math, marks:65\n" +
                        "Physics, marks:70\n" +
                        "Chemistry, marks:80\n"
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        return list;
    }

    //AngularJS Tables
    private static List<LearnDetailsModel> AngularJSTables() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "AngularJS Tables",
                "Table data is generally repeatable. The ng-repeat directive can be used to draw table easily. The following example shows the use of ng-repeat directive to draw a table −",
                "<table>\n" +
                        "   <tr>\n" +
                        "      <th>Name</th>\n" +
                        "      <th>Marks</th>\n" +
                        "   </tr>\n" +
                        "   \n" +
                        "   <tr ng-repeat = \"subject in student.subjects\">\n" +
                        "      <td>{{ subject.name }}</td>\n" +
                        "      <td>{{ subject.marks }}</td>\n" +
                        "   </tr>\n" +
                        "</table>" +
                        "\n\n\n" +
                        "<style>\n" +
                        "   table, th , td {\n" +
                        "      border: 1px solid grey;\n" +
                        "      border-collapse: collapse;\n" +
                        "      padding: 5px;\n" +
                        "   }\n" +
                        "   table tr:nth-child(odd) {\n" +
                        "      background-color: #f2f2f2;\n" +
                        "   }\n" +
                        "   table tr:nth-child(even) {\n" +
                        "      background-color: #ffffff;\n" +
                        "   }\n" +
                        "</style>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Example",
                "The following example shows the use of all the above-mentioned directives.\n" +
                        "\n" +
                        "testAngularJS.htm",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>Angular JS Table</title>\n" +
                        "      <script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\"></script>\n" +
                        "      \n" +
                        "      <style>\n" +
                        "         table, th , td {\n" +
                        "            border: 1px solid grey;\n" +
                        "            border-collapse: collapse;\n" +
                        "            padding: 5px;\n" +
                        "         }\n" +
                        "         table tr:nth-child(odd) {\n" +
                        "            background-color: #f2f2f2;\n" +
                        "         }\n" +
                        "         table tr:nth-child(even) {\n" +
                        "            background-color: #ffffff;\n" +
                        "         }\n" +
                        "      </style>\n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>\n" +
                        "      <h2>AngularJS Sample Application</h2>\n" +
                        "      <div ng-app = \"mainApp\" ng-controller = \"studentController\">\n" +
                        "         \n" +
                        "         <table border = \"0\">\n" +
                        "            <tr>\n" +
                        "               <td>Enter first name:</td>\n" +
                        "               <td><input type = \"text\" ng-model = \"student.firstName\"></td>\n" +
                        "            </tr>\n" +
                        "            <tr>\n" +
                        "               <td>Enter last name: </td>\n" +
                        "               <td>\n" +
                        "                  <input type = \"text\" ng-model = \"student.lastName\">\n" +
                        "               </td>\n" +
                        "            </tr>\n" +
                        "            <tr>\n" +
                        "               <td>Name: </td>\n" +
                        "               <td>{{student.fullName()}}</td>\n" +
                        "            </tr>\n" +
                        "            <tr>\n" +
                        "               <td>Subject:</td>\n" +
                        "               \n" +
                        "               <td>\n" +
                        "                  <table>\n" +
                        "                     <tr>\n" +
                        "                        <th>Name</th>.\n" +
                        "                        <th>Marks</th>\n" +
                        "                     </tr>\n" +
                        "                     <tr ng-repeat = \"subject in student.subjects\">\n" +
                        "                        <td>{{ subject.name }}</td>\n" +
                        "                        <td>{{ subject.marks }}</td>\n" +
                        "                     </tr>\n" +
                        "                  </table>\n" +
                        "               </td>\n" +
                        "            </tr>\n" +
                        "         </table>\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <script>\n" +
                        "         var mainApp = angular.module(\"mainApp\", []);\n" +
                        "         \n" +
                        "         mainApp.controller('studentController', function($scope) {\n" +
                        "            $scope.student = {\n" +
                        "               firstName: \"Anne\",\n" +
                        "               lastName: \"Moore\",\n" +
                        "               fees:500,\n" +
                        "               \n" +
                        "               subjects:[\n" +
                        "                  {name:'Physics',marks:70},\n" +
                        "                  {name:'Chemistry',marks:80},\n" +
                        "                  {name:'Math',marks:65},\n" +
                        "                  {name:'English',marks:75},\n" +
                        "                  {name:'Hindi',marks:67}\n" +
                        "               ],\n" +
                        "               fullName: function() {\n" +
                        "                  var studentObject;\n" +
                        "                  studentObject = $scope.student;\n" +
                        "                  return studentObject.firstName + \" \" + studentObject.lastName;\n" +
                        "               }\n" +
                        "            };\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "      \n" +
                        "   </body>\n" +
                        "</html>",
                "Open the file testAngularJS.htm in a web browser and see the result."
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //AngularJS HTML DOM
    private static List<LearnDetailsModel> AngularJSHTMLDOM() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "AngularJS HTML DOM",
                "The following directives are used to bind application data to the attributes of HTML DOM elements −" +
                        "\n\n" +
                        "1. ng-disabled\n" +
                        "\n" +
                        "disables a given control.\n" +
                        "\n" +
                        "2. ng-show\n" +
                        "\n" +
                        "shows a given control.\n" +
                        "\n" +
                        "3. ng-hide\n" +
                        "\n" +
                        "hides a given control.\n" +
                        "\n" +
                        "4. ng-click\n" +
                        "\n" +
                        "represents a AngularJS click event.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "ng-disabled Directive",
                "Add ng-disabled attribute to an HTML button and pass it a model. Bind the model to a checkbox and see the variation.",
                "<input type = \"checkbox\" ng-model = \"enableDisableButton\">Disable Button\n" +
                        "<button ng-disabled = \"enableDisableButton\">Click Me!</button>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "ng-show Directive",
                "Add ng-show attribute to an HTML button and pass it a model. Bind the model to a checkbox and see the variation.",
                "<input type = \"checkbox\" ng-model = \"showHide1\">Show Button\n" +
                        "<button ng-show = \"showHide1\">Click Me!</button>",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "ng-hide Directive",
                "Add ng-hide attribute to an HTML button and pass it a model. Bind the model to a checkbox and see the variation.",
                "<input type = \"checkbox\" ng-model = \"showHide2\">Hide Button\n" +
                        "<button ng-hide = \"showHide2\">Click Me!</button>",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "ng-click Directive",
                "Add ng-click attribute to an HTML button and update a model. Bind the model to HTML and see the variation.",
                "<p>Total click: {{ clickCounter }}</p>\n" +
                        "<button ng-click = \"clickCounter = clickCounter + 1\">Click Me!</button>",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Example",
                "The following example shows use of all the above mentioned directives.\n" +
                        "\n" +
                        "testAngularJS.htm",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>AngularJS HTML DOM</title>\n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>\n" +
                        "      <h2>AngularJS Sample Application</h2>\n" +
                        "      \n" +
                        "      <div ng-app = \"\">\n" +
                        "         <table border = \"0\">\n" +
                        "            <tr>\n" +
                        "               <td><input type = \"checkbox\" ng-model = \"enableDisableButton\">Disable Button</td>\n" +
                        "               <td><button ng-disabled = \"enableDisableButton\">Click Me!</button></td>\n" +
                        "            </tr>\n" +
                        "            <tr>\n" +
                        "               <td><input type = \"checkbox\" ng-model = \"showHide1\">Show Button</td>\n" +
                        "               <td><button ng-show = \"showHide1\">Click Me!</button></td>\n" +
                        "            </tr>\n" +
                        "            <tr>\n" +
                        "               <td><input type = \"checkbox\" ng-model = \"showHide2\">Hide Button</td>\n" +
                        "               <td><button ng-hide = \"showHide2\">Click Me!</button></td>\n" +
                        "            </tr>\n" +
                        "            <tr>\n" +
                        "               <td><p>Total click: {{ clickCounter }}</p></td>\n" +
                        "               <td><button ng-click = \"clickCounter = clickCounter + 1\">Click Me!</button></td>\n" +
                        "            </tr>\n" +
                        "         </table>\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\">\n" +
                        "      </script>\n" +
                        "      \n" +
                        "   </body>\n" +
                        "</html>",
                "Open the file testAngularJS.htm in a web browser and see the result."
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        return list;
    }

    //AngularJS Modules
    private static List<LearnDetailsModel> AngularJSModules() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "AngularJS Modules",
                "AngularJS supports modular approach. Modules are used to separate logic such as services, controllers, application etc. from the code and maintain the code clean. We define modules in separate js files and name them as per the module.js file. In the following example, we are going to create two modules −\n" +
                        "\n" +
                        "Application Module − used to initialize an application with controller(s).\n" +
                        "\n" +
                        "Controller Module − used to define the controller.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Application Module",
                "Here is a file named mainApp.js that contains the following code −" +
                        "\n\n" +
                        "Here, we declare an application mainApp module using angular.module function and pass an empty array to it. This array generally contains dependent modules.",
                "var mainApp = angular.module(\"mainApp\", []);",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Controller Module",
                "Here, we declare a controller studentController module using mainApp.controller function." +
                        "\n" +
                        "studentController.js",
                "mainApp.controller(\"studentController\", function($scope) {\n" +
                        "   $scope.student = {\n" +
                        "      firstName: \"Anne\",\n" +
                        "      lastName: \"Moore\",\n" +
                        "      fees:500,\n" +
                        "      \n" +
                        "      subjects:[\n" +
                        "         {name:'Physics',marks:70},\n" +
                        "         {name:'Chemistry',marks:80},\n" +
                        "         {name:'Math',marks:65},\n" +
                        "         {name:'English',marks:75},\n" +
                        "         {name:'Hindi',marks:67}\n" +
                        "      ],\n" +
                        "      fullName: function() {\n" +
                        "         var studentObject;\n" +
                        "         studentObject = $scope.student;\n" +
                        "         return studentObject.firstName + \" \" + studentObject.lastName;\n" +
                        "      }\n" +
                        "   };\n" +
                        "});",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Use Modules",
                "Here, we use application module using ng-app directive, and controller using ngcontroller directive. We import the mainApp.js and studentController.js in the main HTML page.",
                "<div ng-app = \"mainApp\" ng-controller = \"studentController\">\n" +
                        "   ...\n" +
                        "   <script src = \"mainApp.js\"></script>\n" +
                        "   <script src = \"studentController.js\"></script>\n" +
                        "\t\n" +
                        "</div>",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        return list;
    }

    //AngularJS Forms
    private static List<LearnDetailsModel> AngularJSForms() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "AngularJS Forms",
                "AngularJS enriches form filling and validation. We can use ng-click event to handle the click button and use $dirty and $invalid flags to do the validation in a seamless way. Use novalidate with a form declaration to disable any browser-specific validation. The form controls make heavy use of AngularJS events. Let us have a look at the events first.\n" +
                        "\n" +
                        "Events\n" +
                        "AngularJS provides multiple events associated with the HTML controls. For example, ng-click directive is generally associated with a button. AngularJS supports the following events −\n" +
                        "\n" +
                        "ng-click\n" +
                        "ng-dbl-click\n" +
                        "ng-mousedown\n" +
                        "ng-mouseup\n" +
                        "ng-mouseenter\n" +
                        "ng-mouseleave\n" +
                        "ng-mousemove\n" +
                        "ng-mouseover\n" +
                        "ng-keydown\n" +
                        "ng-keyup\n" +
                        "ng-keypress\n" +
                        "ng-change",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "ng-click",
                "Reset data of a form using on-click directive of a button.",
                "<input name = \"firstname\" type = \"text\" ng-model = \"firstName\" required>\n" +
                        "<input name = \"lastname\" type = \"text\" ng-model = \"lastName\" required>\n" +
                        "<input name = \"email\" type = \"email\" ng-model = \"email\" required>\n" +
                        "<button ng-click = \"reset()\">Reset</button>\n" +
                        "\n" +
                        "<script>\n" +
                        "   function studentController($scope) { \n" +
                        "      $scope.reset = function() {\n" +
                        "         $scope.firstName = \"Anne\";\n" +
                        "         $scope.lastName = \"Moore\";\n" +
                        "         $scope.email = \"AnneMoore@shrcreation.com\";\n" +
                        "      }   \n" +
                        "      \n" +
                        "      $scope.reset();\n" +
                        "   }\n" +
                        "</script>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Validate Data",
                "The following can be used to track error.\n" +
                        "\n" +
                        "$dirty − states that value has been changed.\n" +
                        "\n" +
                        "$invalid − states that value entered is invalid.\n" +
                        "\n" +
                        "$error − states the exact error.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Example",
                "The following example will showcase all the above-mentioned directives.\n" +
                        "\n" +
                        "testAngularJS.htm",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>Angular JS Forms</title>\n" +
                        "      <script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\"></script>\n" +
                        "      \n" +
                        "      <style>\n" +
                        "         table, th , td {\n" +
                        "            border: 1px solid grey;\n" +
                        "            border-collapse: collapse;\n" +
                        "            padding: 5px;\n" +
                        "         }\n" +
                        "         table tr:nth-child(odd) {\n" +
                        "            background-color: #f2f2f2;\n" +
                        "         }\n" +
                        "         table tr:nth-child(even) {\n" +
                        "            background-color: #ffffff;\n" +
                        "         }\n" +
                        "      </style>\n" +
                        "      \n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      \n" +
                        "      <h2>AngularJS Sample Application</h2>\n" +
                        "      <div ng-app = \"mainApp\" ng-controller = \"studentController\">\n" +
                        "         \n" +
                        "         <form name = \"studentForm\" novalidate>\n" +
                        "            <table border = \"0\">\n" +
                        "               <tr>\n" +
                        "                  <td>Enter first name:</td>\n" +
                        "                  <td><input name = \"firstname\" type = \"text\" ng-model = \"firstName\" required>\n" +
                        "                     <span style = \"color:red\" ng-show = \"studentForm.firstname.$dirty && studentForm.firstname.$invalid\">\n" +
                        "                        <span ng-show = \"studentForm.firstname.$error.required\">First Name is required.</span>\n" +
                        "                     </span>\n" +
                        "                  </td>\n" +
                        "               </tr>\n" +
                        "               \n" +
                        "               <tr>\n" +
                        "                  <td>Enter last name: </td>\n" +
                        "                  <td><input name = \"lastname\"  type = \"text\" ng-model = \"lastName\" required>\n" +
                        "                     <span style = \"color:red\" ng-show = \"studentForm.lastname.$dirty && studentForm.lastname.$invalid\">\n" +
                        "                        <span ng-show = \"studentForm.lastname.$error.required\">Last Name is required.</span>\n" +
                        "                     </span>\n" +
                        "                  </td>\n" +
                        "               </tr>\n" +
                        "               \n" +
                        "               <tr>\n" +
                        "                  <td>Email: </td><td><input name = \"email\" type = \"email\" ng-model = \"email\" length = \"100\" required>\n" +
                        "                     <span style = \"color:red\" ng-show = \"studentForm.email.$dirty && studentForm.email.$invalid\">\n" +
                        "                        <span ng-show = \"studentForm.email.$error.required\">Email is required.</span>\n" +
                        "                        <span ng-show = \"studentForm.email.$error.email\">Invalid email address.</span>\n" +
                        "                     </span>\n" +
                        "                  </td>\n" +
                        "               </tr>\n" +
                        "               \n" +
                        "               <tr>\n" +
                        "                  <td>\n" +
                        "                     <button ng-click = \"reset()\">Reset</button>\n" +
                        "                  </td>\n" +
                        "                  <td>\n" +
                        "                     <button ng-disabled = \"studentForm.firstname.$dirty &&\n" +
                        "                        studentForm.firstname.$invalid || studentForm.lastname.$dirty &&\n" +
                        "                        studentForm.lastname.$invalid || studentForm.email.$dirty &&\n" +
                        "                        studentForm.email.$invalid\" ng-click=\"submit()\">Submit</button>\n" +
                        "                  </td>\n" +
                        "               </tr>\n" +
                        "\t\t\t\t\t\n" +
                        "            </table>\n" +
                        "         </form>\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <script>\n" +
                        "         var mainApp = angular.module(\"mainApp\", []);\n" +
                        "         \n" +
                        "         mainApp.controller('studentController', function($scope) {\n" +
                        "            $scope.reset = function() {\n" +
                        "               $scope.firstName = \"Anne\";\n" +
                        "               $scope.lastName = \"Moore\";\n" +
                        "               $scope.email = \"AnneMoore@shrcreation.com\";\n" +
                        "            }\n" +
                        "            \n" +
                        "            $scope.reset();\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "      \n" +
                        "   </body>\n" +
                        "</html>",
                "Open the file testAngularJS.htm in a web browser and see the result."
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        return list;
    }

    //AngularJS Includes
    private static List<LearnDetailsModel> AngularJSIncludes() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "AngularJS Includes",
                "HTML does not support embedding HTML pages within the HTML page. To achieve this functionality, we can use one of the following options −\n" +
                        "\n" +
                        "Using Ajax − Make a server call to get the corresponding HTML page and set it in the innerHTML of HTML control.\n" +
                        "\n" +
                        "Using Server Side Includes − JSP, PHP and other web side server technologies can include HTML pages within a dynamic page.\n" +
                        "\n" +
                        "Using AngularJS, we can embed HTML pages within an HTML page using ng-include directive.",
                "<div ng-app = \"\" ng-controller = \"studentController\">\n" +
                        "   <div ng-include = \"'main.htm'\"></div>\n" +
                        "   <div ng-include = \"'subjects.htm'\"></div>\n" +
                        "</div>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Example",
                "The following example will showcase all the case." +
                        "\n\n" +
                        "main.htm\n\n" +
                        "<table border = \"0\">\n" +
                        "   <tr>\n" +
                        "      <td>Enter first name:</td>\n" +
                        "      <td><input type = \"text\" ng-model = \"student.firstName\"></td>\n" +
                        "   </tr>\n" +
                        "   \n" +
                        "   <tr>\n" +
                        "      <td>Enter last name: </td>\n" +
                        "      <td><input type = \"text\" ng-model = \"student.lastName\"></td>\n" +
                        "   </tr>\n" +
                        "   \n" +
                        "   <tr>\n" +
                        "      <td>Name: </td>\n" +
                        "      <td>{{student.fullName()}}</td>\n" +
                        "   </tr>\n" +
                        "</table>" +
                        "\n\n" +
                        "subjects.htm\n\n" +
                        "<p>Subjects:</p>\n" +
                        "<table>\n" +
                        "   <tr>\n" +
                        "      <th>Name</th>\n" +
                        "      <th>Marks</th>\n" +
                        "   </tr>\n" +
                        "   \n" +
                        "   <tr ng-repeat = \"subject in student.subjects\">\n" +
                        "      <td>{{ subject.name }}</td>\n" +
                        "      <td>{{ subject.marks }}</td>\n" +
                        "   </tr>\n" +
                        "</table>",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>Angular JS Includes</title>\n" +
                        "      <script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\">\n" +
                        "      </script>\n" +
                        "      \n" +
                        "      <style>\n" +
                        "         table, th , td {\n" +
                        "            border: 1px solid grey;\n" +
                        "            border-collapse: collapse;\n" +
                        "            padding: 5px;\n" +
                        "         }\n" +
                        "         table tr:nth-child(odd) {\n" +
                        "            background-color: #f2f2f2;\n" +
                        "         }\n" +
                        "         table tr:nth-child(even) {\n" +
                        "            background-color: #ffffff;\n" +
                        "         }\n" +
                        "      </style>\n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>\n" +
                        "      <h2>AngularJS Sample Application</h2>\n" +
                        "      \n" +
                        "      <div ng-app = \"mainApp\" ng-controller = \"studentController\">\n" +
                        "         <div ng-include = \"'/angularjs/src/include/main.htm'\"></div>\n" +
                        "         <div ng-include = \"'/angularjs/src/include/subjects.htm'\"></div>\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <script>\n" +
                        "         var mainApp = angular.module(\"mainApp\", []);\n" +
                        "         \n" +
                        "         mainApp.controller('studentController', function($scope) {\n" +
                        "            $scope.student = {\n" +
                        "               firstName: \"Anne\",\n" +
                        "               lastName: \"Moore\",\n" +
                        "               fees:500,\n" +
                        "               \n" +
                        "               subjects:[\n" +
                        "                  {name:'Physics',marks:70},\n" +
                        "                  {name:'Chemistry',marks:80},\n" +
                        "                  {name:'Math',marks:65},\n" +
                        "                  {name:'English',marks:75},\n" +
                        "                  {name:'Hindi',marks:67}\n" +
                        "               ],\n" +
                        "               fullName: function() {\n" +
                        "                  var studentObject;\n" +
                        "                  studentObject = $scope.student;\n" +
                        "                  return studentObject.firstName + \" \" + studentObject.lastName;\n" +
                        "               }\n" +
                        "            };\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "      \n" +
                        "   </body>\n" +
                        "</html>",
                "To execute this example, you need to deploy testAngularJS.htm, \n" +
                        "main.htm, and subjects.htm to a web server. Open the file \n" +
                        "testAngularJS.htm using the URL of your server in a web browser and see the result."
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //AngularJS Ajax
    private static List<LearnDetailsModel> AngularJSAjax() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "AngularJS Ajax",
                "AngularJS provides $http control which works as a service to read data from the server. The server makes a database call to get the desired records. AngularJS needs data in JSON format. Once the data is ready, $http can be used to get the data from server in the following manner −" +
                        "\n\n" +
                        "Here, the file data.txt contains student records. $http service makes an ajax call and sets response to its property students. students model can be used to draw tables in HTML.",
                "function studentController($scope,$https:) {\n" +
                        "   var url = \"data.txt\";\n" +
                        "\n" +
                        "   $https:.get(url).success( function(response) {\n" +
                        "      $scope.students = response; \n" +
                        "   });\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Examples",
                "The following example will showcase all the case.\n\n" +
                        "data.txt\n" +
                        "[\n" +
                        "   {\n" +
                        "      \"Name\" : \"Anne Moore\",\n" +
                        "      \"RollNo\" : 101,\n" +
                        "      \"Percentage\" : \"80%\"\n" +
                        "   },\n" +
                        "   {\n" +
                        "      \"Name\" : \"Emma Watson\",\n" +
                        "      \"RollNo\" : 201,\n" +
                        "      \"Percentage\" : \"70%\"\n" +
                        "   },\n" +
                        "   {\n" +
                        "      \"Name\" : \"Robert\",\n" +
                        "      \"RollNo\" : 191,\n" +
                        "      \"Percentage\" : \"75%\"\n" +
                        "   },\n" +
                        "   {\n" +
                        "      \"Name\" : \"Duke Joe\",\n" +
                        "      \"RollNo\" : 111,\n" +
                        "      \"Percentage\" : \"77%\"\n" +
                        "   }\n" +
                        "]",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>Angular JS Includes</title>\n" +
                        "      \n" +
                        "      <style>\n" +
                        "         table, th , td {\n" +
                        "            border: 1px solid grey;\n" +
                        "            border-collapse: collapse;\n" +
                        "            padding: 5px;\n" +
                        "         }\n" +
                        "         table tr:nth-child(odd) {\n" +
                        "            background-color: #f2f2f2;\n" +
                        "         }\n" +
                        "         table tr:nth-child(even) {\n" +
                        "            background-color: #ffffff;\n" +
                        "         }\n" +
                        "      </style>\n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>\n" +
                        "      <h2>AngularJS Sample Application</h2>\n" +
                        "      <div ng-app = \"\" ng-controller = \"studentController\">\n" +
                        "      \n" +
                        "         <table>\n" +
                        "            <tr>\n" +
                        "               <th>Name</th>\n" +
                        "               <th>Roll No</th>\n" +
                        "               <th>Percentage</th>\n" +
                        "            </tr>\n" +
                        "         \n" +
                        "            <tr ng-repeat = \"student in students\">\n" +
                        "               <td>{{ student.Name }}</td>\n" +
                        "               <td>{{ student.RollNo }}</td>\n" +
                        "               <td>{{ student.Percentage }}</td>\n" +
                        "            </tr>\n" +
                        "         </table>\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <script>\n" +
                        "         function studentController($scope,$http) {\n" +
                        "            var url = \"/data.txt\";\n" +
                        "\n" +
                        "            $http.get(url).then( function(response) {\n" +
                        "               $scope.students = response.data;\n" +
                        "            });\n" +
                        "         }\n" +
                        "      </script>\n" +
                        "      \n" +
                        "      <script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.2.15/angular.min.js\">\n" +
                        "      </script>\n" +
                        "      \n" +
                        "   </body>\n" +
                        "</html>",
                "To execute this example, you need to deploy testAngularJS." +
                        "\nhtm and data.txt file to a web server. Open the file testAngularJS." +
                        "\nhtm using the URL of your server in a web browser and see the result."
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //AngularJS Views
    private static List<LearnDetailsModel> AngularJSViews() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "AngularJS Views",
                "AngularJS supports Single Page Application via multiple views on a single page. To do this, AngularJS has provided ng-view and ng-template directives, and $routeProvider services.\n" +
                        "\n" +
                        "ng-view Directive\n" +
                        "The ng-view directive simply creates a place holder where a corresponding view (HTML or ng-template view) can be placed based on the configuration.\n" +
                        "\n" +
                        "Usage\n" +
                        "Define a div with ng-view within the main module.",
                "<div ng-app = \"mainApp\">\n" +
                        "   ...\n" +
                        "   <div ng-view></div>\n" +
                        "\n" +
                        "</div> ",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "ng-template Directive",
                "The ng-template directive is used to create an HTML view using script tag. It contains id attribute which is used by $routeProvider to map a view with a controller.\n" +
                        "\n" +
                        "Usage\n" +
                        "Define a script block with type as ng-template within the main module.",
                "<div ng-app = \"mainApp\">\n" +
                        "   ...\n" +
                        "\t\n" +
                        "   <script type = \"text/ng-template\" id = \"addStudent.htm\">\n" +
                        "      <h2> Add Student </h2>\n" +
                        "      {{message}}\n" +
                        "   </script>\n" +
                        "\n" +
                        "</div>  ",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "$routeProvider Service",
                "The $routeProvider is a key service which sets the configuration of URLs, maps them with the corresponding HTML page or ng-template, and attaches a controller with the same.\n" +
                        "\n" +
                        "Usage\n" +
                        "Define a script block with type as ng-template within the main module.",
                "<div ng-app = \"mainApp\"> \n" +
                        "   ... \n" +
                        "   <script type = \"text/ng-template\" id = \"addStudent.htm\"> \n" +
                        "      <h2> Add Student </h2> \n" +
                        "      {{message}} \n" +
                        "   </script>  \n" +
                        "</div>",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Example",
                "The following example shows the use of all the above-mentioned directives.\n" +
                        "\n" +
                        "testAngularJS.htm",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>Angular JS Views</title>\n" +
                        "      <script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\"></script>\n" +
                        "      <script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular-route.min.js\">\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>\n" +
                        "      <h2>AngularJS Sample Application</h2>\n" +
                        "      <div ng-app = \"mainApp\">\n" +
                        "         <p><a href = \"#addStudent\">Add Student</a></p>\n" +
                        "         <p><a href = \"#viewStudents\">View Students</a></p>\n" +
                        "         <div ng-view></div>\n" +
                        "         \n" +
                        "         <script type = \"text/ng-template\" id = \"addStudent.htm\">\n" +
                        "            <h2> Add Student </h2>\n" +
                        "            {{message}}\n" +
                        "         </script>\n" +
                        "         \n" +
                        "         <script type = \"text/ng-template\" id = \"viewStudents.htm\">\n" +
                        "            <h2> View Students </h2>\n" +
                        "            {{message}}\n" +
                        "         </script>\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <script>\n" +
                        "         var mainApp = angular.module(\"mainApp\", ['ngRoute']);\n" +
                        "         mainApp.config(['$routeProvider', function($routeProvider) {\n" +
                        "            $routeProvider\n" +
                        "            \n" +
                        "            .when('/addStudent', {\n" +
                        "               templateUrl: 'addStudent.htm',\n" +
                        "               controller: 'AddStudentController'\n" +
                        "            })\n" +
                        "            .when('/viewStudents', {\n" +
                        "               templateUrl: 'viewStudents.htm',\n" +
                        "               controller: 'ViewStudentsController'\n" +
                        "            })\n" +
                        "            .otherwise({\n" +
                        "               redirectTo: '/addStudent'\n" +
                        "            });\n" +
                        "         }]);\n" +
                        "         mainApp.controller('AddStudentController', function($scope) {\n" +
                        "            $scope.message = \"This page will be used to display add student form\";\n" +
                        "         });\n" +
                        "         mainApp.controller('ViewStudentsController', function($scope) {\n" +
                        "            $scope.message = \"This page will be used to display all the students\";\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "      \n" +
                        "   </body>\n" +
                        "</html>",
                "Open the file testAngularJS.htm in a web browser and see the result."
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        return list;
    }

    //AngularJS Scopes
    private static List<LearnDetailsModel> AngularJSScopes() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "AngularJS Scopes",
                "Scope is a special JavaScript object that connects controller with views. Scope contains model data. In controllers, model data is accessed via $scope object." +
                        "\n\n" +
                        "The following important points are considered in above example −\n" +
                        "\n" +
                        "The $scope is passed as first argument to controller during its constructor definition.\n" +
                        "\n" +
                        "The $scope.message and $scope.type are the models which are used in the HTML page.\n" +
                        "\n" +
                        "We assign values to models that are reflected in the application module, whose controller is shapeController.\n" +
                        "\n" +
                        "We can define functions in $scope.",
                "<script>\n" +
                        "   var mainApp = angular.module(\"mainApp\", []);\n" +
                        "   \n" +
                        "   mainApp.controller(\"shapeController\", function($scope) {\n" +
                        "      $scope.message = \"In shape controller\";\n" +
                        "      $scope.type = \"Shape\";\n" +
                        "   });\n" +
                        "</script>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Scope Inheritance",
                "Scope is controller-specific. If we define nested controllers, then the child controller inherits the scope of its parent controller." +
                        "\n\n" +
                        "The following important points are considered in above example −\n" +
                        "\n" +
                        "We assign values to the models in shapeController.\n" +
                        "\n" +
                        "We override message in child controller named circleController. When message is used within the module of controller named circleController, the overridden message is used.",
                "<script>\n" +
                        "   var mainApp = angular.module(\"mainApp\", []);\n" +
                        "   \n" +
                        "   mainApp.controller(\"shapeController\", function($scope) {\n" +
                        "      $scope.message = \"In shape controller\";\n" +
                        "      $scope.type = \"Shape\";\n" +
                        "   });\n" +
                        "   mainApp.controller(\"circleController\", function($scope) {\n" +
                        "      $scope.message = \"In circle controller\";\n" +
                        "   });\n" +
                        "\t\n" +
                        "</script>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Example",
                "The following example shows use of all the above mentioned directives.\n" +
                        "\n" +
                        "testAngularJS.htm",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>Angular JS Forms</title>\n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>\n" +
                        "      <h2>AngularJS Sample Application</h2>\n" +
                        "      \n" +
                        "      <div ng-app = \"mainApp\" ng-controller = \"shapeController\">\n" +
                        "         <p>{{message}} <br/> {{type}} </p>\n" +
                        "         \n" +
                        "         <div ng-controller = \"circleController\">\n" +
                        "            <p>{{message}} <br/> {{type}} </p>\n" +
                        "         </div>\n" +
                        "         \n" +
                        "         <div ng-controller = \"squareController\">\n" +
                        "            <p>{{message}} <br/> {{type}} </p>\n" +
                        "         </div>\n" +
                        "\t\t\t\n" +
                        "      </div>\n" +
                        "      <script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\">\n" +
                        "      </script>\n" +
                        "      \n" +
                        "      <script>\n" +
                        "         var mainApp = angular.module(\"mainApp\", []);\n" +
                        "         \n" +
                        "         mainApp.controller(\"shapeController\", function($scope) {\n" +
                        "            $scope.message = \"In shape controller\";\n" +
                        "            $scope.type = \"Shape\";\n" +
                        "         });\n" +
                        "         mainApp.controller(\"circleController\", function($scope) {\n" +
                        "            $scope.message = \"In circle controller\";\n" +
                        "         });\n" +
                        "         mainApp.controller(\"squareController\", function($scope) {\n" +
                        "            $scope.message = \"In square controller\";\n" +
                        "            $scope.type = \"Square\";\n" +
                        "         });\n" +
                        "\t\t\t\n" +
                        "      </script>\n" +
                        "      \n" +
                        "   </body>\n" +
                        "</html>",
                "Open the file testAngularJS.htm in a web browser and see the result."
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //AngularJS Services
    private static List<LearnDetailsModel> AngularJSServices() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "AngularJS Services",
                "AngularJS supports the concept of Separation of Concerns using services architecture. Services are JavaScript functions, which are responsible to perform only specific tasks. This makes them individual entities which are maintainable and testable. The controllers and filters can call them on requirement basis. Services are normally injected using the dependency injection mechanism of AngularJS.\n" +
                        "\n" +
                        "AngularJS provides many inbuilt services. For example, $http, $route, $window, $location, etc. Each service is responsible for a specific task such as the $http is used to make ajax call to get the server data, the $route is used to define the routing information, and so on. The inbuilt services are always prefixed with $ symbol.\n" +
                        "\n" +
                        "There are two ways to create a service −\n" +
                        "\n" +
                        "Factory\n" +
                        "Service",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Using Factory Method",
                "In this method, we first define a factory and then assign method to it.",
                "var mainApp = angular.module(\"mainApp\", []);\n" +
                        "mainApp.factory('MathService', function() {\n" +
                        "   var factory = {};\n" +
                        "   \n" +
                        "   factory.multiply = function(a, b) {\n" +
                        "      return a * b\n" +
                        "   }\n" +
                        "   \n" +
                        "   return factory;\n" +
                        "}); ",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Using Service Method",
                "In this method, we define a service and then assign method to it. We also inject an already available service to it.",
                "mainApp.service('CalcService', function(MathService) {\n" +
                        "   this.square = function(a) {\n" +
                        "      return MathService.multiply(a,a);\n" +
                        "   }\n" +
                        "});",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Example",
                "The following example shows use of all the above mentioned directives −\n" +
                        "\n" +
                        "testAngularJS.htm",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>Angular JS Services</title>\n" +
                        "      <script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\">\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>\n" +
                        "      <h2>AngularJS Sample Application</h2>\n" +
                        "      \n" +
                        "      <div ng-app = \"mainApp\" ng-controller = \"CalcController\">\n" +
                        "         <p>Enter a number: <input type = \"number\" ng-model = \"number\" /></p>\n" +
                        "         <button ng-click = \"square()\">X<sup>2</sup></button>\n" +
                        "         <p>Result: {{result}}</p>\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <script>\n" +
                        "         var mainApp = angular.module(\"mainApp\", []);\n" +
                        "         \n" +
                        "         mainApp.factory('MathService', function() {\n" +
                        "            var factory = {};\n" +
                        "            \n" +
                        "            factory.multiply = function(a, b) {\n" +
                        "               return a * b\n" +
                        "            }\n" +
                        "            return factory;\n" +
                        "         });\n" +
                        "         mainApp.service('CalcService', function(MathService) {\n" +
                        "            this.square = function(a) {\n" +
                        "               return MathService.multiply(a,a);\n" +
                        "            }\n" +
                        "         });\n" +
                        "         mainApp.controller('CalcController', function($scope, CalcService) {\n" +
                        "            $scope.square = function() {\n" +
                        "               $scope.result = CalcService.square($scope.number);\n" +
                        "            }\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "      \n" +
                        "   </body>\n" +
                        "</html>",
                "Open the file testAngularJS.htm in a web browser and see the result."
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        return list;
    }

    //AngularJS Dependency Injection
    private static List<LearnDetailsModel> AngularJSInjection() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "AngularJS Dependency Injection",
                "Dependency Injection is a software design in which components are given their dependencies instead of hard coding them within the component. It relieves a component from locating the dependency and makes dependencies configurable. It also helps in making components reusable, maintainable and testable.\n" +
                        "\n" +
                        "AngularJS provides a supreme Dependency Injection mechanism. It provides following core components which can be injected into each other as dependencies.\n" +
                        "\n" +
                        "Value\n" +
                        "Factory\n" +
                        "Service\n" +
                        "Provider\n" +
                        "Constant",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Value",
                "Value is a simple JavaScript object, which is required to pass values to the controller during config phase (config phase is when AngularJS bootstraps itself).",
                "//define a module\n" +
                        "var mainApp = angular.module(\"mainApp\", []);\n" +
                        "\n" +
                        "//create a value object as \"defaultInput\" and pass it a data.\n" +
                        "mainApp.value(\"defaultInput\", 5);\n" +
                        "...\n" +
                        "\n" +
                        "//inject the value in the controller using its name \"defaultInput\"\n" +
                        "mainApp.controller('CalcController', function($scope, CalcService, defaultInput) {\n" +
                        "   $scope.number = defaultInput;\n" +
                        "   $scope.result = CalcService.square($scope.number);\n" +
                        "   \n" +
                        "   $scope.square = function() {\n" +
                        "      $scope.result = CalcService.square($scope.number);\n" +
                        "   }\n" +
                        "});",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Factory",
                "Factory is a function which is used to return value. It creates a value on demand whenever a service or a controller requires it. It generally uses a factory function to calculate and return the value.",
                "//define a module\n" +
                        "var mainApp = angular.module(\"mainApp\", []);\n" +
                        "\n" +
                        "//create a factory \"MathService\" which provides a method multiply to return multiplication of two numbers\n" +
                        "mainApp.factory('MathService', function() {\n" +
                        "   var factory = {};\n" +
                        "   \n" +
                        "   factory.multiply = function(a, b) {\n" +
                        "      return a * b\n" +
                        "   }\n" +
                        "   return factory;\n" +
                        "}); \n" +
                        "\n" +
                        "//inject the factory \"MathService\" in a service to utilize the multiply method of factory.\n" +
                        "mainApp.service('CalcService', function(MathService) {\n" +
                        "   this.square = function(a) {\n" +
                        "      return MathService.multiply(a,a);\n" +
                        "   }\n" +
                        "});\n" +
                        "...",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Service",
                "Service is a singleton JavaScript object containing a set of functions to perform certain tasks. Service is defined using service() function and it is then injected into the controllers.",
                "//define a module\n" +
                        "var mainApp = angular.module(\"mainApp\", []);\n" +
                        "...\n" +
                        "\n" +
                        "//create a service which defines a method square to return square of a number.\n" +
                        "mainApp.service('CalcService', function(MathService) {\n" +
                        "   this.square = function(a) {\n" +
                        "      return MathService.multiply(a,a); \n" +
                        "   }\n" +
                        "});\n" +
                        "\n" +
                        "//inject the service \"CalcService\" into the controller\n" +
                        "mainApp.controller('CalcController', function($scope, CalcService, defaultInput) {\n" +
                        "   $scope.number = defaultInput;\n" +
                        "   $scope.result = CalcService.square($scope.number);\n" +
                        "   \n" +
                        "   $scope.square = function() {\n" +
                        "      $scope.result = CalcService.square($scope.number);\n" +
                        "   }\n" +
                        "});",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Provider",
                "Provider is used by AngularJS internally to create services, factory, etc. during the config phase. The following script can be used to create MathService that we created earlier. Provider is a special factory method with get() method which is used to return the value/service/factory.",
                "//define a module\n" +
                        "var mainApp = angular.module(\"mainApp\", []);\n" +
                        "...\n" +
                        "\n" +
                        "//create a service using provider which defines a method square to return square of a number.\n" +
                        "mainApp.config(function($provide) {\n" +
                        "   $provide.provider('MathService', function() {\n" +
                        "      this.$get = function() {\n" +
                        "         var factory = {};  \n" +
                        "         \n" +
                        "         factory.multiply = function(a, b) {\n" +
                        "            return a * b; \n" +
                        "         }\n" +
                        "         return factory;\n" +
                        "      };\n" +
                        "   });\n" +
                        "});",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Constant",
                "Constants are used to pass values at the config phase considering the fact that value cannot be used during the config phase.",
                "mainApp.constant(\"configParam\", \"constant value\");",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Example",
                "The following example shows the use of all the above-mentioned directives −\n" +
                        "\n" +
                        "testAngularJS.htm",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>AngularJS Dependency Injection</title>\n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>\n" +
                        "      <h2>AngularJS Sample Application</h2>\n" +
                        "      \n" +
                        "      <div ng-app = \"mainApp\" ng-controller = \"CalcController\">\n" +
                        "         <p>Enter a number: <input type = \"number\" ng-model = \"number\" /></p>\n" +
                        "         <button ng-click = \"square()\">X<sup>2</sup></button>\n" +
                        "         <p>Result: {{result}}</p>\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\">\n" +
                        "      </script>\n" +
                        "      \n" +
                        "      <script>\n" +
                        "         var mainApp = angular.module(\"mainApp\", []);\n" +
                        "         \n" +
                        "         mainApp.config(function($provide) {\n" +
                        "            $provide.provider('MathService', function() {\n" +
                        "               this.$get = function() {\n" +
                        "                  var factory = {};\n" +
                        "                  \n" +
                        "                  factory.multiply = function(a, b) {\n" +
                        "                     return a * b;\n" +
                        "                  }\n" +
                        "                  return factory;\n" +
                        "               };\n" +
                        "            });\n" +
                        "         });\n" +
                        "\t\t\t\n" +
                        "         mainApp.value(\"defaultInput\", 5);\n" +
                        "         \n" +
                        "         mainApp.factory('MathService', function() {\n" +
                        "            var factory = {};\n" +
                        "            \n" +
                        "            factory.multiply = function(a, b) {\n" +
                        "               return a * b;\n" +
                        "            }\n" +
                        "            return factory;\n" +
                        "         });\n" +
                        "         mainApp.service('CalcService', function(MathService) {\n" +
                        "            this.square = function(a) {\n" +
                        "               return MathService.multiply(a,a);\n" +
                        "            }\n" +
                        "         });\n" +
                        "         mainApp.controller('CalcController', function($scope, CalcService, defaultInput) {\n" +
                        "            $scope.number = defaultInput;\n" +
                        "            $scope.result = CalcService.square($scope.number);\n" +
                        "\n" +
                        "            $scope.square = function() {\n" +
                        "               $scope.result = CalcService.square($scope.number);\n" +
                        "            }\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "      \n" +
                        "   </body>\n" +
                        "</html>",
                "Open testAngularJS.htm in a web browser and see the result."
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        return list;
    }

    //AngularJS Custom Directives
    private static List<LearnDetailsModel> AngularJSCustomDirectives() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "AngularJS Custom Directives",
                "Custom directives are used in AngularJS to extend the functionality of HTML. Custom directives are defined using \"directive\" function. A custom directive simply replaces the element for which it is activated. AngularJS application during bootstrap finds the matching elements and do one time activity using its compile() method of the custom directive then process the element using link() method of the custom directive based on the scope of the directive. AngularJS provides support to create custom directives for following type of elements.\n" +
                        "\n" +
                        "Element directives − Directive activates when a matching element is encountered.\n" +
                        "\n" +
                        "Attribute − Directive activates when a matching attribute is encountered.\n" +
                        "\n" +
                        "CSS − Directive activates when a matching css style is encountered.\n" +
                        "\n" +
                        "Comment − Directive activates when a matching comment is encountered.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Understanding Custom Directive",
                "Define custom html tags.\n" +
                        "\n" +
                        "<student name = \"Anne\"></student><br/>\n" +
                        "<student name = \"Emma\"></student>" +
                        "\n\n" +
                        "Define controller to update the scope for directive. Here we are using name attribute's value as scope's child.\n" +
                        "\n" +
                        "mainApp.controller('StudentController', function($scope) {\n" +
                        "   $scope.Mahesh = {};\n" +
                        "   $scope.Mahesh.name = \"Mahesh Parashar\";\n" +
                        "   $scope.Mahesh.rollno  = 1;\n" +
                        "   \n" +
                        "   $scope.Piyush = {};\n" +
                        "   $scope.Piyush.name = \"Piyush Parashar\";\n" +
                        "   $scope.Piyush.rollno  = 2;\n" +
                        "});" +
                        "\n\n" +
                        "Define custom directive to handle above custom html tags bellow codes.",
                "var mainApp = angular.module(\"mainApp\", []);\n" +
                        "\n" +
                        "//Create a directive, first parameter is the html element to be attached.\t  \n" +
                        "//We are attaching student html tag. \n" +
                        "//This directive will be activated as soon as any student element is encountered in html\n" +
                        "\n" +
                        "mainApp.directive('student', function() {\n" +
                        "   //define the directive object\n" +
                        "   var directive = {};\n" +
                        "   \n" +
                        "   //restrict = E, signifies that directive is Element directive\n" +
                        "   directive.restrict = 'E';\n" +
                        "   \n" +
                        "   //template replaces the complete element with its text. \n" +
                        "   directive.template = \"Student: <b>{{student.name}}</b> , \n" +
                        "      Roll No: <b>{{student.rollno}}</b>\";\n" +
                        "   \n" +
                        "   //scope is used to distinguish each student element based on criteria.\n" +
                        "   directive.scope = {\n" +
                        "      student : \"=name\"\n" +
                        "   }\n" +
                        "   \n" +
                        "   //compile is called during application initialization. AngularJS calls \n" +
                        "      it once when html page is loaded.\n" +
                        "\t\n" +
                        "   directive.compile = function(element, attributes) {\n" +
                        "      element.css(\"border\", \"1px solid #cccccc\");\n" +
                        "      \n" +
                        "      //linkFunction is linked with each element with scope to get the element specific data.\n" +
                        "      var linkFunction = function($scope, element, attributes) {\n" +
                        "         element.html(\"Student: <b>\"+$scope.student.name +\"</b> , \n" +
                        "            Roll No: <b>\"+$scope.student.rollno+\"</b><br/>\");\n" +
                        "         element.css(\"background-color\", \"#ff00ff\");\n" +
                        "      }\n" +
                        "      return linkFunction;\n" +
                        "   }\n" +
                        "   \n" +
                        "   return directive;\n" +
                        "});",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Example",
                "The following example shows the use of all the above-mentioned directives",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>Angular JS Custom Directives</title>\n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>\n" +
                        "      <h2>AngularJS Sample Application</h2>\n" +
                        "      \n" +
                        "      <div ng-app = \"mainApp\" ng-controller = \"StudentController\">\n" +
                        "         <student name = \"Mahesh\"></student><br/>\n" +
                        "         <student name = \"Piyush\"></student>\n" +
                        "      </div>\n" +
                        "\t\t\n" +
                        "      <script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\">\n" +
                        "      </script>\n" +
                        "      \n" +
                        "      <script>\n" +
                        "         var mainApp = angular.module(\"mainApp\", []);\n" +
                        "         \n" +
                        "         mainApp.directive('student', function() {\n" +
                        "            var directive = {};\n" +
                        "            directive.restrict = 'E';\n" +
                        "            directive.template = \"Student: <b>{{student.name}}</b> , \n" +
                        "               Roll No: <b>{{student.rollno}}</b>\";\n" +
                        "            \n" +
                        "            directive.scope = {\n" +
                        "               student : \"=name\"\n" +
                        "            }\n" +
                        "            directive.compile = function(element, attributes) {\n" +
                        "               element.css(\"border\", \"1px solid #cccccc\");\n" +
                        "               \n" +
                        "               var linkFunction = function($scope, element, attributes) {\n" +
                        "                  element.html(\"Student: <b>\"+$scope.student.name +\"</b> , \n" +
                        "                     Roll No: <b>\"+$scope.student.rollno+\"</b><br/>\");\n" +
                        "                  element.css(\"background-color\", \"#ff00ff\");\n" +
                        "               }\n" +
                        "               return linkFunction;\n" +
                        "            }\n" +
                        "            \n" +
                        "            return directive;\n" +
                        "         });\n" +
                        "         mainApp.controller('StudentController', function($scope) {\n" +
                        "            $scope.Mahesh = {};\n" +
                        "            $scope.Mahesh.name = \"Mahesh Parashar\";\n" +
                        "            $scope.Mahesh.rollno  = 1;\n" +
                        "\n" +
                        "            $scope.Piyush = {};\n" +
                        "            $scope.Piyush.name = \"Piyush Parashar\";\n" +
                        "            $scope.Piyush.rollno  = 2;\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "      \n" +
                        "   </body>\n" +
                        "</html>",
                "Open textAngularJS.htm in a web browser. See the result."
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //VueJs
    //VueJs Introduction
    private static List<LearnDetailsModel> VueJsIntroduction() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "VueJs Introduction",
                "VueJS is an open source progressive JavaScript framework used to develop interactive web interfaces. It is one of the famous frameworks used to simplify web development. VueJS focusses on the view layer. It can be easily integrated into big projects for front-end development without any issues.\n" +
                        "\n" +
                        "The installation for VueJS is very easy to start with. Any developer can easily understand and build interactive web interfaces in a matter of time. VueJS is created by Evan You, an ex-employee from Google. The first version of VueJS was released in Feb 2014. It recently has clocked to 64,828 stars on GitHub, making it very popular.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Features",
                "Following are the features available with VueJS.\n" +
                        "\n" +
                        "Virtual DOM\n" +
                        "VueJS makes the use of virtual DOM, which is also used by other frameworks such as React, Ember, etc. The changes are not made to the DOM, instead a replica of the DOM is created which is present in the form of JavaScript data structures. Whenever any changes are to be made, they are made to the JavaScript data structures and the latter is compared with the original data structure. The final changes are then updated to the real DOM, which the user will see changing. This is good in terms of optimization, it is less expensive and the changes can be made at a faster rate.\n" +
                        "\n" +
                        "Data Binding\n" +
                        "The data binding feature helps manipulate or assign values to HTML attributes, change the style, assign classes with the help of binding directive called v-bind available with VueJS.\n" +
                        "\n" +
                        "Components\n" +
                        "Components are one of the important features of VueJS that helps create custom elements, which can be reused in HTML.\n" +
                        "\n" +
                        "Event Handling\n" +
                        "v-on is the attribute added to the DOM elements to listen to the events in VueJS.\n" +
                        "\n" +
                        "Animation/Transition\n" +
                        "VueJS provides various ways to apply transition to HTML elements when they are added/updated or removed from the DOM. VueJS has a built-in transition component that needs to be wrapped around the element for transition effect. We can easily add third party animation libraries and also add more interactivity to the interface.\n" +
                        "\n" +
                        "Computed Properties\n" +
                        "This is one of the important features of VueJS. It helps to listen to the changes made to the UI elements and performs the necessary calculations. There is no need of additional coding for this.\n" +
                        "\n" +
                        "Templates\n" +
                        "VueJS provides HTML-based templates that bind the DOM with the Vue instance data. Vue compiles the templates into virtual DOM Render functions. We can make use of the template of the render functions and to do so we have to replace the template with the render function.\n" +
                        "\n" +
                        "Directives\n" +
                        "VueJS has built-in directives such as v-if, v-else, v-show, v-on, v-bind, and v-model, which are used to perform various actions on the frontend.\n" +
                        "\n" +
                        "Watchers\n" +
                        "Watchers are applied to data that changes. For example, form input elements. Here, we don’t have to add any additional events. Watcher takes care of handling any data changes making the code simple and fast.\n" +
                        "\n" +
                        "Routing\n" +
                        "Navigation between pages is performed with the help of vue-router.\n" +
                        "\n" +
                        "Lightweight\n" +
                        "VueJS script is very lightweight and the performance is also very fast.\n" +
                        "\n" +
                        "Vue-CLI\n" +
                        "VueJS can be installed at the command line using the vue-cli command line interface. It helps to build and compile the project easily using vue-cli.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Comparison with Other Frameworks",
                "Now let us compare VueJS with other frameworks such as React, Angular, Ember, Knockout, and Polymer.\n" +
                        "\n" +
                        "VueJS v/s React\n" +
                        "Virtual DOM\n" +
                        "\n" +
                        "Virtual DOM is a virtual representation of the DOM tree. With virtual DOM, a JavaScript object is created which is the same as the real DOM. Any time a change needs to be made to the DOM, a new JavaScript object is created and the changes are made. Later, both the JavaScript objects are compared and the final changes are updated in the real DOM.\n" +
                        "\n" +
                        "VueJS and React both use virtual DOM, which makes it faster.\n" +
                        "\n" +
                        "Template v/s JSX\n" +
                        "\n" +
                        "VueJS uses html, js and css separately. It is very easy for a beginner to understand and adopt the VueJS style. The template based approach for VueJS is very easy.\n" +
                        "\n" +
                        "React uses jsx approach. Everything is JavaScript for ReactJS. HTML and CSS are all part of JavaScript.\n" +
                        "\n" +
                        "Installation Tools\n" +
                        "\n" +
                        "React uses create react app and VueJS uses vue-cli /CDN/npm. Both are very easy to use and the project is set up with all the basic requirements. React needs webpack for the build, whereas VueJS does not. We can start with VueJS coding anywhere in jsfiddle or codepen using the cdn library.\n" +
                        "\n" +
                        "Popularity\n" +
                        "\n" +
                        "React is popular than VueJS. The job opportunity with React is more than VueJS. There is a big name behind React i.e. Facebook which makes it more popular. Since, React uses the core concept of JavaScript, it uses the best practice of JavaScript. One who works with React will definitely be a very good with all the JavaScript concepts.\n" +
                        "\n" +
                        "VueJS is a developing framework. Presently, the job opportunities with VueJS are less in comparison to React. According to a survey, many people are adapting to VueJS, which can make it more popular in comparison to React and Angular. There is a good community working on the different features of VueJS. The vue-router is maintained by this community with regular updates.\n" +
                        "\n" +
                        "VueJS has taken the good parts from Angular and React and has built a powerful library. VueJS is much faster in comparison to React/Angular because of its lightweight library.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "VueJS v/s Angular",
                "Similarities\n" +
                        "\n" +
                        "VueJS has a lot of similarities with Angular. Directives such as v-if, v-for are almost similar to ngIf, ngFor of Angular. They both have a command line interface for project installation and to build it. VueJS uses Vue-cli and Angular uses angular-cli. Both offer two-way data binding, server side rendering, etc.\n" +
                        "\n" +
                        "Complexity\n" +
                        "\n" +
                        "Vuejs is very easy to learn and start with. As discussed earlier, a beginner can take the CDN library of VueJS and get started in codepen and jsfiddle.\n" +
                        "\n" +
                        "For Angular, we need to go through a series of steps for installation and it is little difficult for beginners to get started with Angular. It uses TypeScript for coding which is difficult for people coming from core JavaScript background. However, it is easier to learn for users belonging to Java and C# background.\n" +
                        "\n" +
                        "Performance\n" +
                        "\n" +
                        "To decide the performance, it is up to the users. VueJS file size is much lighter than Angular. A comparison of the framework performance is provided in the following link http://stefankrause.net/js-frameworks-benchmark4/webdriver-ts/table.html\n" +
                        "\n" +
                        "Popularity\n" +
                        "\n" +
                        "At present, Angular is more popular than VueJS. A lot of organizations use Angular, making it very popular. Job opportunities are also more for candidates experienced in Angular. However, VueJS is taking up the place in the market and can be considered as a good competitor for Angular and React.\n" +
                        "\n" +
                        "Dependencies\n" +
                        "\n" +
                        "Angular provides a lot of built-in features. We have to import the required modules and get started with it, for example, @angular/animations, @angular/form.\n" +
                        "\n" +
                        "VueJS does not have all the built-in features as Angular and needs to depend on third party libraries to work on it.\n" +
                        "\n" +
                        "Flexibility\n" +
                        "\n" +
                        "VueJS can be easily merged with any other big project without any issues. Angular will not be that easy to start working with any other existing project.\n" +
                        "\n" +
                        "Backward Compatibility\n" +
                        "\n" +
                        "We had AngularJS, Angular2 and now Angular4. AngularJS and Angular2 have vast difference. Project application developed in AngularJS cannot be converted to Angular2 because of the core differences.\n" +
                        "\n" +
                        "The recent version of VueJS is 2.0 and it is good with backward compatibility. It provides good documentation, which is very easy to understand.\n" +
                        "\n" +
                        "Typescript\n" +
                        "\n" +
                        "Angular uses TypeScript for its coding. Users need to have knowledge of Typescript to get started with Angular. However, we can start with VueJS coding anywhere in jsfiddle or codepen using the cdn library. We can work with standard JavaScript, which is very easy to start with.",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "VueJS v/s Ember",
                "Similarities\n" +
                        "\n" +
                        "Ember provides Ember command line tool, i.e. ember-cli for easy installation and compiling for Ember projects.\n" +
                        "\n" +
                        "VueJS has also a command line tool vue-cli to start and build projects.\n" +
                        "\n" +
                        "They both have features such as router, template, and components which makes them very rich as the UI framework.\n" +
                        "\n" +
                        "Performance\n" +
                        "\n" +
                        "VueJS has better performance in comparison to Ember. Ember has added a glimmer rendering engine with the aim of improving the re-render performance, which is a similar concept as VueJS and React using virtual DOM. However, VueJS has a better performance when compared to Ember.",
                "",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "VueJS v/s Knockout",
                "Knockout provides a good browser support. It is supported on the lower version of the IE whereas VueJS is not supported on IE8 and below. Knockout development has slowed down over time. There is not much popularity for the same in recent times.\n" +
                        "\n" +
                        "On the other hand, VueJS has started gaining popularity with the Vue team providing regular updates.",
                "",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "VueJS v/s Polymer",
                "Polymer library has been developed by Google. It is used in many Google projects such as Google I/O, Google Earth, Google Play Music, etc. It offers data binding and computed properties similar to VueJS.\n" +
                        "\n" +
                        "Polymer custom element definition comprises plain JavaScript/CSS, element properties, lifecycle callbacks, and JavaScript methods. In comparison, VueJS allows to easily use JavaScript/html and CSS.\n" +
                        "\n" +
                        "Polymer uses web component features and requires polyfills for browsers, which does not support these features. VueJS does not have such dependencies and works fine in all browsers from IE9+.",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        return list;
    }

    //VueJs First Program
    private static List<LearnDetailsModel> VueJsFirstProgram() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "VueJs First Program",
                "As Vue is basically built for frontend development, we are going to deal with lot of HTML, JavaScript and CSS files in the upcoming chapters. To understand the details, let us start with a simple example.\n" +
                        "\n" +
                        "In this example, we are going to use the development verison of vuejs.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Example",
                "Example of first program.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>VueJs Introduction</title>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue.js\"></script>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <div id = \"intro\" style = \"text-align:center;\">\n" +
                        "         <h1>{{ message }}</h1>\n" +
                        "      </div>\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         var vue_det = new Vue({\n" +
                        "            el: '#intro',\n" +
                        "            data: {\n" +
                        "               message: 'My first VueJS Task'\n" +
                        "            }\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //VueJS Instances
    private static List<LearnDetailsModel> VueJSInstances() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "VueJS Instances",
                "To start with VueJS, we need to create the instance of Vue, which is called the root Vue Instance.\n" +
                        "\n" +
                        "Syntax\n" +
                        "var app = new Vue({\n" +
                        "   // options\n" +
                        "})",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Example",
                "Let us look at an example to understand what needs to be part of the Vue constructor.\n" +
                        "\n" +
                        "<html>\n" +
                        "   <head>\n" +
                        "      <title>VueJs Instance</title>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue.js\"></script>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <div id = \"vue_det\">\n" +
                        "         <h1>Firstname : {{firstname}}</h1>\n" +
                        "         <h1>Lastname : {{lastname}}</h1>\n" +
                        "         <h1>{{mydetails()}}</h1>\n" +
                        "      </div>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue_instance.js\"></script>\n" +
                        "   </body>\n" +
                        "</html>\n\n" +
                        "For Vue, there is a parameter called el. It takes the id of the DOM element. In the above example, we have the id #vue_det. It is the id of the div element, which is present in .html.\n" +
                        "\n" +
                        "<div id = \"vue_det\"></div>\n" +
                        "Now, whatever we are going to do will affect the div element and nothing outside it.\n" +
                        "\n" +
                        "Next, we have defined the data object. It has value firstname, lastname, and address.\n" +
                        "\n" +
                        "The same is assigned inside the div. For example,\n" +
                        "\n" +
                        "<div id = \"vue_det\">\n" +
                        "   <h1>Firstname : {{firstname}}</h1>\n" +
                        "   <h1>Lastname : {{lastname}}</h1>\n" +
                        "</div>\n" +
                        "The Firstname : {{firstname}} value will be replaced inside the interpolation, i.e. {{}} with the value assigned in the data object, i.e. Ria. The same goes for last name.\n" +
                        "\n" +
                        "Next, we have methods where we have defined a function mydetails and a returning value. It is assigned inside the div as\n" +
                        "\n" +
                        "<h1>{{mydetails()}}</h1>\n" +
                        "Hence, inside {{} } the function mydetails is called. The value returned in the Vue instance will be printed inside {{}}. Check the output for reference.",
                "var  vm = new Vue({\n" +
                        "   el: '#vue_det',\n" +
                        "   data: {\n" +
                        "      firstname : \"Anne\",\n" +
                        "      lastname  : \"Moore\",\n" +
                        "      address    : \"USA\"\n" +
                        "   },\n" +
                        "   methods: {\n" +
                        "      mydetails : function() {\n" +
                        "         return \"I am \"+this.firstname +\" \"+ this.lastname;\n" +
                        "      }\n" +
                        "   }\n" +
                        "})",
                ""
        );

        list.add(l1);
        list.add(l2);
        return list;
    }

    //VueJS Template
    private static List<LearnDetailsModel> VueJSTemplate() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "VueJS Template",
                "We have learnt in the earlier chapters, how to get an output in the form of text content on the screen. In this chapter, we will learn how to get an output in the form of HTML template on the screen.\n" +
                        "\n" +
                        "To understand this, let us consider an example and see the output in the browser." +
                        "\n\n" +
                        "<html>\n" +
                        "   <head>\n" +
                        "      <title>VueJs Instance</title>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue.js\"></script>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <div id = \"vue_det\">\n" +
                        "         <h1>Firstname : {{firstname}}</h1>\n" +
                        "         <h1>Lastname : {{lastname}}</h1>\n" +
                        "         <div>{{htmlcontent}}</div>\n" +
                        "      </div>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue_template.js\"></script>\n" +
                        "   </body>\n" +
                        "</html>",
                "var vm = new Vue({\n" +
                        "   el: '#vue_det',\n" +
                        "   data: {\n" +
                        "      firstname : \"Anne\",\n" +
                        "      lastname  : \"Moore\",\n" +
                        "      htmlcontent : \"<div><h1>Vue Js Template</h1></div>\"\n" +
                        "   }\n" +
                        "})",
                ""
        );
        list.add(l1);
        return list;
    }

    //VueJS Components
    private static List<LearnDetailsModel> VueJSComponents() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "VueJS Components",
                "Vue Components are one of the important features of VueJS that creates custom elements, which can be reused in HTML.\n" +
                        "\n" +
                        "Let’s work with an example and create a component, that will give a better understanding on how components work with VueJS." +
                        "\n\n" +
                        "Example\n" +
                        "<html>\n" +
                        "   <head>\n" +
                        "      <title>VueJs Instance</title>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue.js\"></script>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <div id = \"component_test\">\n" +
                        "         <testcomponent></testcomponent>\n" +
                        "      </div>\n" +
                        "      <div id = \"component_test1\">\n" +
                        "         <testcomponent></testcomponent>\n" +
                        "      </div>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue_component.js\"></script>\n" +
                        "   </body>\n" +
                        "</html>",
                "Vue.component('testcomponent',{\n" +
                        "   template : '<div><h1>This is coming from component</h1></div>'\n" +
                        "});\n" +
                        "var vm = new Vue({\n" +
                        "   el: '#component_test'\n" +
                        "});\n" +
                        "var vm1 = new Vue({\n" +
                        "   el: '#component_test1'\n" +
                        "});",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Dynamic Components",
                "Dynamic components are created using the keyword <component></component> and it is bound using a property as shown in the following example.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>VueJs Instance</title>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue.js\"></script>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <div id = \"databinding\">\n" +
                        "         <component v-bind:is = \"view\"></component>\n" +
                        "      </div>\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         var vm = new Vue({\n" +
                        "            el: '#databinding',\n" +
                        "            data: {\n" +
                        "               view: 'component1'\n" +
                        "            },\n" +
                        "            components: {\n" +
                        "               'component1': {\n" +
                        "                  template: '<div><span style = \"font-size:25;color:red;\">Dynamic Component</span></div>'\n" +
                        "               }\n" +
                        "            }\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //VueJS Computed Properties
    private static List<LearnDetailsModel> VueJSComputedProperties() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "VueJS Computed Properties",
                "We have already seen methods for Vue instance and for components. Computed properties are like methods but with some difference in comparison to methods, which we will discuss in this chapter.\n" +
                        "\n" +
                        "At the end of this chapter, we will be able to make a decision on when to use methods and when to use computed properties.\n" +
                        "\n" +
                        "Let’s understand computed properties using an example." +
                        "\n\n" +
                        "Example\n" +
                        "<html>\n" +
                        "   <head>\n" +
                        "      <title>VueJs Instance</title>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue.js\"></script>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <div id = \"computed_props\">\n" +
                        "         FirstName : <input type = \"text\" v-model = \"firstname\" /> <br/><br/>\n" +
                        "         LastName : <input type = \"text\" v-model = \"lastname\"/> <br/><br/>\n" +
                        "         <h1>My name is {{firstname}} {{lastname}}</h1>\n" +
                        "         <h1>Using computed method : {{getfullname}}</h1>\n" +
                        "      </div>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue_computedprops.js\"></script>\n" +
                        "   </body>\n" +
                        "</html>" +
                        "\n\n" +
                        "Here, we have created .html file with firstname and lastname. Firstname and Lastname is a textbox which are bound using properties firstname and lastname.\n" +
                        "\n" +
                        "We are calling the computed method getfullname, which returns the firstname and the lastname entered.\n" +
                        "\n" +
                        "computed :{\n" +
                        "   getfullname : function(){\n" +
                        "      return this.firstname +\" \"+ this.lastname;\n" +
                        "   }\n" +
                        "}",
                "var vm = new Vue({\n" +
                        "   el: '#computed_props',\n" +
                        "   data: {\n" +
                        "      firstname :\"\",\n" +
                        "      lastname :\"\",\n" +
                        "      birthyear : \"\"\n" +
                        "   },\n" +
                        "   computed :{\n" +
                        "      getfullname : function(){\n" +
                        "         return this.firstname +\" \"+ this.lastname;\n" +
                        "      }\n" +
                        "   }\n" +
                        "})",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Get/Set in Computed Properties",
                "We have defined one input box which is bound to fullname, which is a computed property. It returns a function called get, which gives the fullname, i.e. the first name and the lastname. Also, we have displayed the firstname and lastname as −\n" +
                        "\n" +
                        "<h1>{{firstName}}</h1>\n" +
                        "<h1>{{lastName}}</h1>",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>VueJs Instance</title>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue.js\"></script>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <div id = \"computed_props\">\n" +
                        "         <input type = \"text\" v-model = \"fullname\" />\n" +
                        "         <h1>{{firstName}}</h1>\n" +
                        "         <h1>{{lastName}}</h1>\n" +
                        "      </div>\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         var vm = new Vue({\n" +
                        "            el: '#computed_props',\n" +
                        "            data: {\n" +
                        "               firstName : \"Terry\",\n" +
                        "               lastName : \"Ben\"\n" +
                        "            },\n" +
                        "            methods: {\n" +
                        "            },\n" +
                        "            computed :{\n" +
                        "               fullname : {\n" +
                        "                  get : function() {\n" +
                        "                     return this.firstName+\" \"+this.lastName;\n" +
                        "                  }\n" +
                        "               }\n" +
                        "            }\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //VueJS Binding
    private static List<LearnDetailsModel> VueJSBinding() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "VueJS Binding",
                "In this chapter will learn how to manipulate or assign values to HTML attributes, change the style, and assign classes with the help of binding directive called v-bind available with VueJS.\n" +
                        "\n" +
                        "Let’s consider an example to understand why we need and when to use v-bind directive for data binding." +
                        "\n\n" +
                        "In bellow example, we have displayed a title variable and three anchor links. We have also assigned a value to the href from the data object." +
                        "\n\n" +
                        "The first clickme shows the href as hreflink, and the second one shows it in {{hreflink}}, while the last one displays the correct url as we require.\n" +
                        "\n" +
                        "Hence, to assign values to HTML attributes, we need to bind it with the directive v-bind as follows.\n" +
                        "\n" +
                        "<a v-bind:href = \"hreflink\" target = \"_blank\">Click Me </a>\n" +
                        "VueJS also provides a shorthand for v-bind as follows.\n" +
                        "\n" +
                        "<a :href = \"hreflink\" target = \"_blank\">Click Me </a>\n" +
                        "If we see the inspect element in the browser, the anchor tag does not show the v-bind attribute, however, it displays the plain HTML. None of the VueJS properties are seen when we inpsect the DOM.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>VueJs Instance</title>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue.js\"></script>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <div id = \"databinding\">\n" +
                        "         {{title}}<br/>\n" +
                        "         <a href = \"hreflink\" target = \"_blank\"> Click Me </a> <br/>\n" +
                        "         <a href = \"{{hreflink}}\" target = \"_blank\">Click Me </a>  <br/>\n" +
                        "         <a v-bind:href = \"hreflink\" target = \"_blank\">Click Me </a>   <br/>\n" +
                        "      </div>\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         var vm = new Vue({\n" +
                        "            el: '#databinding',\n" +
                        "            data: {\n" +
                        "               title : \"DATA BINDING\",\n" +
                        "               hreflink : \"http://www.google.com\"\n" +
                        "            }\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Binding HTML Classes",
                "To bind HTML class, we need to use v-bind: class. Let’s consider an example and bind classes in it." +
                        "\n\n" +
                        "There is a div created with v-bind: class=” {active: isactive}”.\n" +
                        "\n" +
                        "Here, isactive is a variable which is based on true or false. It will apply the class active to the div. In the data object, we have assigned the isactive variable as true. There is a class defined in the style .active with the background color as red.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>VueJs Instance</title>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue.js\"></script>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <style>\n" +
                        "         .active {\n" +
                        "            background: red;\n" +
                        "         }\n" +
                        "      </style>\n" +
                        "      <div id = \"classbinding\">\n" +
                        "         <div v-bind:class = \"{active:isactive}\"><b>{{title}}</b></div>\n" +
                        "      </div>\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         var vm = new Vue({\n" +
                        "            el: '#classbinding',\n" +
                        "            data: {\n" +
                        "               title : \"CLASS BINDING\",\n" +
                        "               isactive : true\n" +
                        "            }\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //VueJS Events
    private static List<LearnDetailsModel> VueJSEvents() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Click Event",
                "v-on is the attribute added to the DOM elements to listen to the events in VueJS.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>VueJs Instance</title>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue.js\"></script>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <div id = \"databinding\">\n" +
                        "         <button v-on:click = \"displaynumbers\">Click ME</button>\n" +
                        "         <h2> Add Number 100 + 200 = {{total}}</h2>\n" +
                        "      </div>\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         var vm = new Vue({\n" +
                        "            el: '#databinding',\n" +
                        "            data: {\n" +
                        "               num1: 100,\n" +
                        "               num2 : 200,\n" +
                        "               total : ''\n" +
                        "            },\n" +
                        "            methods : {\n" +
                        "               displaynumbers : function(event) {\n" +
                        "                  console.log(event);\n" +
                        "                  return this.total =  this.num1+ this.num2;\n" +
                        "               }\n" +
                        "            },\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Event Modifiers",
                "Vue has event modifiers available on v-on attribute. Following are the modifiers available −\n" +
                        "\n" +
                        ".once\n" +
                        "Allows the event to execute only once.\n" +
                        "\n" +
                        "Syntax\n" +
                        "<button v-on:click.once = \"buttonclicked\">Click Once</button>\n" +
                        "We need to add dot operator while calling the modifiers as shown in the syntax above. Let us use it in an example and understand the working of the once modifier.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>VueJs Instance</title>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue.js\"></script>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <div id = \"databinding\">\n" +
                        "         <button v-on:click.once = \"buttonclickedonce\" v-bind:style = \"styleobj\">Click Once</button>\n" +
                        "         Output:{{clicknum}}\n" +
                        "         <br/><br/>\n" +
                        "         <button v-on:click = \"buttonclicked\"  v-bind:style = \"styleobj\">Click Me</button>\n" +
                        "         Output:{{clicknum1}}\n" +
                        "      </div>\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         var vm = new Vue({\n" +
                        "            el: '#databinding',\n" +
                        "            data: {\n" +
                        "               clicknum : 0,\n" +
                        "               clicknum1 :0,\n" +
                        "               styleobj: {\n" +
                        "                  backgroundColor: '#2196F3!important',\n" +
                        "                  cursor: 'pointer',\n" +
                        "                  padding: '8px 16px',\n" +
                        "                  verticalAlign: 'middle',\n" +
                        "               }\n" +
                        "            },\n" +
                        "            methods : {\n" +
                        "               buttonclickedonce : function() {\n" +
                        "                  this.clicknum++;\n" +
                        "               },\n" +
                        "               buttonclicked : function() {\n" +
                        "                  this.clicknum1++;\n" +
                        "               }\n" +
                        "            }\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Event - Key Modifiers",
                "VueJS offers key modifiers based on which we can control the event handling. Consider we have a textbox and we want the method to be called only when we press Enter. We can do so by adding key modifiers to the events as follows.\n" +
                        "\n" +
                        "Syntax\n" +
                        "<input type = \"text\"  v-on:keyup.enter = \"showinputvalue\"/>\n" +
                        "The key that we want to apply to our event is V-on.eventname.keyname (as shown above)\n" +
                        "\n" +
                        "We can make use of multiple keynames. For example, V-on.keyup.ctrl.enter",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>VueJs Instance</title>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue.js\"></script>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <div id = \"databinding\">\n" +
                        "         <input type = \"text\" v-on:keyup.enter = \"showinputvalue\" v-bind:style = \"styleobj\" placeholder = \"Enter your name\"/>\n" +
                        "         <h3> {{name}}</h3>\n" +
                        "      </div>\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         var vm = new Vue({\n" +
                        "            el: '#databinding',\n" +
                        "            data: {\n" +
                        "               name:'',\n" +
                        "               styleobj: {\n" +
                        "                  width: \"30%\",\n" +
                        "                  padding: \"12px 20px\",\n" +
                        "                  margin: \"8px 0\",\n" +
                        "                  boxSizing: \"border-box\"\n" +
                        "               }\n" +
                        "            },\n" +
                        "            methods : {\n" +
                        "               showinputvalue : function(event) {\n" +
                        "                  this.name=event.target.value;\n" +
                        "               }\n" +
                        "            }\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Custom Events",
                "Parent can pass data to its component using the prop attribute, however, we need to tell the parent when there are changes in the child component. For this, we can use custom events.\n" +
                        "\n" +
                        "The parent component can listen to the child component event using v-on attribute.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>VueJs Instance</title>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue.js\"></script>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <div id = \"databinding\">\n" +
                        "         <div id = \"counter-event-example\">\n" +
                        "            <p style = \"font-size:25px;\">Language displayed : <b>{{ languageclicked }}</b></p>\n" +
                        "            <button-counter\n" +
                        "            v-for = \"(item, index) in languages\"\n" +
                        "            v-bind:item = \"item\"\n" +
                        "            v-bind:index = \"index\"\n" +
                        "            v-on:showlanguage = \"languagedisp\"></button-counter>\n" +
                        "         </div>\n" +
                        "      </div>\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         Vue.component('button-counter', {\n" +
                        "            template: '<button v-on:click = \"displayLanguage(item)\"><span style = \"font-size:25px;\">{{ item }}</span></button>',\n" +
                        "            data: function () {\n" +
                        "               return {\n" +
                        "                  counter: 0\n" +
                        "               }\n" +
                        "            },\n" +
                        "            props:['item'],\n" +
                        "            methods: {\n" +
                        "               displayLanguage: function (lng) {\n" +
                        "                  console.log(lng);\n" +
                        "                  this.$emit('showlanguage', lng);\n" +
                        "               }\n" +
                        "            },\n" +
                        "         });\n" +
                        "         var vm = new Vue({\n" +
                        "            el: '#databinding',\n" +
                        "            data: {\n" +
                        "               languageclicked: \"\",\n" +
                        "               languages : [\"Java\", \"PHP\", \"C++\", \"C\", \"Javascript\", \"C#\", \"Python\", \"HTML\"]\n" +
                        "            },\n" +
                        "            methods: {\n" +
                        "               languagedisp: function (a) {\n" +
                        "                  this.languageclicked = a;\n" +
                        "               }\n" +
                        "            }\n" +
                        "         })\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        return list;
    }

    //VueJS Rendering
    private static List<LearnDetailsModel> VueJSRendering() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Conditional Rendering",
                "In this chapter, we will learn about conditional rendering and list rendering. In conditional rendering, we will discuss about using if, if-else, if-else-if, show, etc. In list rendering, we will discuss how to use for loop." +
                        "\n\n" +
                        "Let’s get started and work on a example first to explain the details for conditional rendering. With conditional rendering, we want to output only when the condition is met and the conditional check is done with the help of if, if-else, if-else-if, show, etc." +
                        "\n\n" +
                        "In the bellow example, we have created a button and two h1 tags with the message.\n" +
                        "\n" +
                        "A variable called show is declared and initialized to a value true. It is displayed close to the button. On the click of the button, we are calling a method showdata, which toggles the value of the variable show. This means on the click of the button, the value of the variable show will change from true to false and false to true.\n" +
                        "\n" +
                        "We have assigned if to the h1 tag as shown in the following code snippet.\n" +
                        "\n" +
                        "<button v-on:click = \"showdata\" v-bind:style = \"styleobj\">Click Me</button>\n" +
                        "<h1 v-if = \"show\">This is h1 tag</h1>",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>VueJs Instance</title>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue.js\"></script>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <div id = \"databinding\">\n" +
                        "         <button v-on:click = \"showdata\" v-bind:style = \"styleobj\">Click Me</button>\n" +
                        "         <span style = \"font-size:25px;\"><b>{{show}}</b></span>\n" +
                        "         <h1 v-if = \"show\">This is h1 tag</h1>\n" +
                        "         <h2>This is h2 tag</h2>\n" +
                        "      </div>\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         var vm = new Vue({\n" +
                        "            el: '#databinding',\n" +
                        "            data: {\n" +
                        "               show: true,\n" +
                        "               styleobj: {\n" +
                        "                  backgroundColor: '#2196F3!important',\n" +
                        "                  cursor: 'pointer',\n" +
                        "                  padding: '8px 16px',\n" +
                        "                  verticalAlign: 'middle',\n" +
                        "               }\n" +
                        "            },\n" +
                        "            methods : {\n" +
                        "               showdata : function() {\n" +
                        "                  this.show = !this.show;\n" +
                        "               }\n" +
                        "            },\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "List Rendering",
                "Let us now discuss list rendering with v-for directive.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>VueJs Instance</title>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue.js\"></script>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <div id = \"databinding\">\n" +
                        "         <input type = \"text\" v-on:keyup.enter = \"showinputvalue\"\n" +
                        "            v-bind:style = \"styleobj\" placeholder = \"Enter Fruits Names\"/>\n" +
                        "         <h1 v-if = \"items.length>0\">Display Fruits Name</h1>\n" +
                        "         <ul>\n" +
                        "            <li v-for = \"a in items\">{{a}}</li>\n" +
                        "         </ul>\n" +
                        "      </div>\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         var vm = new Vue({\n" +
                        "            el: '#databinding',\n" +
                        "            data: {\n" +
                        "               items:[],\n" +
                        "               styleobj: {\n" +
                        "                  width: \"30%\",\n" +
                        "                  padding: \"12px 20px\",\n" +
                        "                  margin: \"8px 0\",\n" +
                        "                  boxSizing: \"border-box\"\n" +
                        "               }\n" +
                        "            },\n" +
                        "            methods : {\n" +
                        "               showinputvalue : function(event) {\n" +
                        "                  this.items.push(event.target.value);\n" +
                        "               }\n" +
                        "            },\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //VueJS Animation
    private static List<LearnDetailsModel> VueJSAnimation() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "In this chapter, we will discuss the transition and animation features available in VueJS." +
                        "\n\n" +
                        "Transition\n" +
                        "VueJS provides various ways to apply transition to the HTML elements when they are added/updated in the DOM. VueJS has a built-in transition component that needs to be wrapped around the element, which needs transition.\n" +
                        "\n" +
                        "Syntax\n" +
                        "<transition name = \"nameoftransition\">\n" +
                        "   <div></div>\n" +
                        "</transition>\n" +
                        "Let us consider an example to understand the working of transition.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>VueJs Instance</title>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue.js\"></script>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <style>\n" +
                        "         .fade-enter-active, .fade-leave-active {\n" +
                        "            transition: opacity 2s\n" +
                        "         }\n" +
                        "         .fade-enter, .fade-leave-to /* .fade-leave-active below version 2.1.8 */ {\n" +
                        "            opacity: 0\n" +
                        "         }\n" +
                        "      </style>\n" +
                        "      <div id = \"databinding\">\n" +
                        "         <button v-on:click = \"show = !show\">Click Me</button>\n" +
                        "         <transition name = \"fade\">\n" +
                        "            <p v-show = \"show\" v-bind:style = \"styleobj\">Animation Example</p>\n" +
                        "         </transition>\n" +
                        "      </div>\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         var vm = new Vue({\n" +
                        "            el: '#databinding',\n" +
                        "            data: {\n" +
                        "               show:true,\n" +
                        "               styleobj :{\n" +
                        "                  fontSize:'30px',\n" +
                        "                  color:'red'\n" +
                        "               }\n" +
                        "            },\n" +
                        "            methods : {\n" +
                        "            }\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Animation",
                "Animations are applied the same way as transition is done. Animation also has classes that needs to be declared for the effect to take place.\n" +
                        "\n" +
                        "Let us consider an example to see how animation works.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>VueJs Instance</title>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue.js\"></script>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <style>\n" +
                        "         .shiftx-enter-active {\n" +
                        "            animation: shift-in 2s;\n" +
                        "         }\n" +
                        "         .shiftx-leave-active {\n" +
                        "            animation: shift-in 2s reverse;\n" +
                        "         }\n" +
                        "         @keyframes shift-in {\n" +
                        "            0%   {transform:rotateX(0deg);}\n" +
                        "            25%  {transform:rotateX(90deg);}\n" +
                        "            50%  {transform:rotateX(120deg);}\n" +
                        "            75%  {transform:rotateX(180deg);}\n" +
                        "            100% {transform:rotateX(360deg);}\n" +
                        "         }\n" +
                        "      </style>\n" +
                        "      <div id = \"databinding\">\n" +
                        "         <button v-on:click = \"show = !show\">Click Me</button>\n" +
                        "         <transition name = \"shiftx\">\n" +
                        "            <p v-show = \"show\">\n" +
                        "               <img src = \"images/img.jpg\" style = \"width:100px;height:100px;\" />\n" +
                        "            </p>\n" +
                        "         </transition>\n" +
                        "      </div>\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         var vm = new Vue({\n" +
                        "            el: '#databinding',\n" +
                        "            data: {\n" +
                        "               show:true\n" +
                        "            },\n" +
                        "            methods : {\n" +
                        "            }\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Custom Transition Classes",
                "VueJS provides a list of custom classes, which can be added as attributes to the transition element.\n" +
                        "\n" +
                        "enter-class\n" +
                        "enter-active-class\n" +
                        "leave-class\n" +
                        "leave-active-class\n" +
                        "Custom classes basically come into play when we want to use an external CSS library such as animate.css.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <link href = \"https://cdn.jsdelivr.net/npm/animate.css@3.5.1\" rel = \"stylesheet\" type = \"text/css\">\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue.js\"></script>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <div id = \"animate\" style = \"text-align:center\">\n" +
                        "         <button @click = \"show = !show\"><span style = \"font-size:25px;\">Animate</span></button>\n" +
                        "         <transition\n" +
                        "            name = \"custom-classes-transition\"\n" +
                        "            enter-active-class = \"animated swing\"\n" +
                        "            leave-active-class = \"animated bounceIn\">\n" +
                        "            <p v-if = \"show\"><span style = \"font-size:25px;\">Example</span></p>\n" +
                        "         </transition>\n" +
                        "      </div>\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         var vm =  new Vue({\n" +
                        "            el: '#animate',\n" +
                        "            data: {\n" +
                        "               show: true\n" +
                        "            }\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //VueJS Directives
    private static List<LearnDetailsModel> VueJSDirectives() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "VueJS Directives",
                "Directives are instruction for VueJS to do things in a certain way. We have already seen directives such as v-if, v-show, v-else, v-for, v-bind , v-model, v-on, etc.\n" +
                        "\n" +
                        "In this chapter, we will take a look at custom directives. We will create global directives similar to how we did for components.\n" +
                        "\n" +
                        "Syntax\n" +
                        "Vue.directive('nameofthedirective', {\n" +
                        "   bind(e1, binding, vnode) {\n" +
                        "   }\n" +
                        "})\n" +
                        "We need to create a directive using Vue.directive. It takes the name of the directive as shown above. Let us consider an example to show the details of the working of directives.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>VueJs Instance</title>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue.js\"></script>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <div id = \"databinding\">\n" +
                        "         <div v-changestyle>VueJS Directive</div>\n" +
                        "      </div>\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         Vue.directive(\"changestyle\",{\n" +
                        "            bind(e1,binding, vnode) {\n" +
                        "               console.log(e1);\n" +
                        "               e1.style.color = \"red\";\n" +
                        "               e1.style.fontSize = \"30px\";\n" +
                        "            }\n" +
                        "         });\n" +
                        "         var vm = new Vue({\n" +
                        "            el: '#databinding',\n" +
                        "            data: {\n" +
                        "            },\n" +
                        "            methods : {\n" +
                        "            },\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Filters",
                "VueJS supports filters that help with text formatting. It is used along with v-bind and interpolations ({{}}). We need a pipe symbol at the end of JavaScript expression for filters.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>VueJs Instance</title>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue.js\"></script>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <div id = \"databinding\">\n" +
                        "         <input  v-model = \"name\" placeholder = \"Enter Name\" /><br/>\n" +
                        "         <span style = \"font-size:25px;\"><b>Letter count is : {{name | countletters}}</b></span>\n" +
                        "      </div>\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         var vm = new Vue({\n" +
                        "            el: '#databinding',\n" +
                        "            data: {\n" +
                        "               name : \"\"\n" +
                        "            },\n" +
                        "            filters : {\n" +
                        "               countletters : function(value) {\n" +
                        "                  return value.length;\n" +
                        "               }\n" +
                        "            }\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //VueJS Routing
    private static List<LearnDetailsModel> VueJSRouting() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Direct Download from CDN",
                "VueJS does not have a built-in router feauture. We need to follow some additional steps to install it." +
                        "\n\n" +
                        "Direct Download from CDN\n" +
                        "The latest version of vue-router is available at https://unpkg.com/vue-router/dist/vue-router.js\n" +
                        "\n" +
                        "Unpkg.com provides npm-based cdn links. The above link is always updated to the recent version. We can download and host it, and use it with a script tag along with vue.js as follows −\n" +
                        "\n" +
                        "<script src = \"/path/to/vue.js\"></script>\n" +
                        "<script src = \"/path/to/vue-router.js\"></script>\n" +
                        "Using NPM\n" +
                        "Run the following command to install the vue-router.\n" +
                        "\n" +
                        "npm  install vue-router\n" +
                        "Using GitHub\n" +
                        "We can clone the repository from GitHub as follows −\n" +
                        "\n" +
                        "git clone https://github.com/vuejs/vue-router.git node_modules/vue-router\n" +
                        "cd node_modules/vue-router\n" +
                        "npm install\n" +
                        "npm run build\n" +
                        "Let us start with a simple example using vue-router.js.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>VueJs Instance</title>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue.js\"></script>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue-router.js\"></script>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <div id = \"app\">\n" +
                        "         <h1>Routing Example</h1>\n" +
                        "         <p>\n" +
                        "            <router-link to = \"/route1\">Router Link 1</router-link>\n" +
                        "            <router-link to = \"/route2\">Router Link 2</router-link>\n" +
                        "         </p>\n" +
                        "         <!-- route outlet -->\n" +
                        "         <!-- component matched by the route will render here -->\n" +
                        "         <router-view></router-view>\n" +
                        "      </div>\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         const Route1 = { template: '<div style = \"border-radius:20px;background-color:cyan;width:200px;height:50px;margin:10px;font-size:25px;padding:10px;\">This is router 1</div>' }\n" +
                        "         const Route2 = { template: '<div style = \"border-radius:20px;background-color:green;width:200px;height:50px;margin:10px;font-size:25px;padding:10px;\">This is router 2</div>' }\n" +
                        "         const routes = [\n" +
                        "            { path: '/route1', component: Route1 },\n" +
                        "            { path: '/route2', component: Route2 }\n" +
                        "         ];\n" +
                        "         const router = new VueRouter({\n" +
                        "            routes // short for `routes: routes`\n" +
                        "         });\n" +
                        "         var vm = new Vue({\n" +
                        "            el: '#app',\n" +
                        "            router\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );

        list.add(l1);
        return list;
    }

    //VueJS Mixins
    private static List<LearnDetailsModel> VueJSMixins() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "VueJS Mixins",
                "Mixins are basically to be used with components. They share reusable code among components. When a component uses mixin, all options of mixin become a part of the component options.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>VueJs Instance</title>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue.js\"></script>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <div id = \"databinding\"></div>\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         var vm = new Vue({\n" +
                        "            el: '#databinding',\n" +
                        "            data: {\n" +
                        "            },\n" +
                        "            methods : {\n" +
                        "            },\n" +
                        "         });\n" +
                        "         var myMixin = {\n" +
                        "            created: function () {\n" +
                        "               this.startmixin()\n" +
                        "            },\n" +
                        "            methods: {\n" +
                        "               startmixin: function () {\n" +
                        "                  alert(\"Welcome  to mixin example\");\n" +
                        "               }\n" +
                        "            }\n" +
                        "         };\n" +
                        "         var Component = Vue.extend({\n" +
                        "            mixins: [myMixin]\n" +
                        "         })\n" +
                        "         var component = new Component();\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        list.add(l1);
        return list;
    }

    //VueJS Examples
    private static List<LearnDetailsModel> VueJSExamples() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Currency Converter",
                "Example 1: Currency Converter" +
                        "\n\n" +
                        "Explanation − In the above example, we have created a currency converter that converts one value of currency to the selected value of other currency. We have created two dropdowns of currency. When we enter the amount to convert in the textbox, the same is displayed below after conversion. We are using the computed property to do the necessary calculation for currency conversion.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>VueJs Instance</title>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue.js\"></script>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <style>\n" +
                        "         #databinding{\n" +
                        "            padding: 20px 15px 15px 15px;\n" +
                        "            margin: 0 0 25px 0;\n" +
                        "            width: auto;\n" +
                        "            background-color: #e7e7e7;\n" +
                        "         }\n" +
                        "         span, option, input {\n" +
                        "            font-size:25px;\n" +
                        "         }\n" +
                        "      </style>\n" +
                        "      \n" +
                        "      <div id = \"databinding\" style = \"\">\n" +
                        "         <h1>Currency Converter</h1>\n" +
                        "         <span>Enter Amount:</span><input type = \"number\" v-model.number = \"amount\" placeholder = \"Enter Amount\" /><br/><br/>\n" +
                        "         <span>Convert From:</span>\n" +
                        "         <select v-model = \"convertfrom\" style = \"width:300px;font-size:25px;\">\n" +
                        "            <option v-for = \"(a, index) in currencyfrom\"  v-bind:value = \"a.name\">{{a.desc}}</option>\n" +
                        "         </select>\n" +
                        "         <span>Convert To:</span>\n" +
                        "         <select v-model = \"convertto\" style = \"width:300px;font-size:25px;\">\n" +
                        "            <option v-for = \"(a, index) in currencyfrom\" v-bind:value = \"a.name\">{{a.desc}}</option>\n" +
                        "         </select><br/><br/>\n" +
                        "         <span> {{amount}} {{convertfrom}} equals {{finalamount}} {{convertto}}</span>\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         var vm = new Vue({\n" +
                        "            el: '#databinding',\n" +
                        "            data: {\n" +
                        "               name:'',\n" +
                        "               currencyfrom : [\n" +
                        "                  {name : \"USD\", desc:\"US Dollar\"},\n" +
                        "                  {name:\"EUR\", desc:\"Euro\"},\n" +
                        "                  {name:\"INR\", desc:\"Indian Rupee\"},\n" +
                        "                  {name:\"BHD\", desc:\"Bahraini Dinar\"}\n" +
                        "               ],\n" +
                        "               convertfrom: \"INR\",\n" +
                        "               convertto:\"USD\",\n" +
                        "               amount :\"\"\n" +
                        "            },\n" +
                        "            computed :{\n" +
                        "               finalamount:function() {\n" +
                        "                  var to = this.convertto;\n" +
                        "                  var from = this.convertfrom;\n" +
                        "                  var final;\n" +
                        "                  switch(from) {\n" +
                        "                     case \"INR\":\n" +
                        "                     if (to == \"USD\") {\n" +
                        "                        final = this.amount * 0.016;\n" +
                        "                     }\n" +
                        "                     if (to == \"EUR\") {\n" +
                        "                        final = this.amount * 0.013;\n" +
                        "                     }\n" +
                        "                     if (to == \"INR\") {\n" +
                        "                        final = this.amount;\n" +
                        "                     }\n" +
                        "                     if (to == \"BHD\") {\n" +
                        "                        final = this.amount * 0.0059;\n" +
                        "                     }\n" +
                        "                     break;\n" +
                        "                     case \"USD\":\n" +
                        "                     if (to == \"INR\") {\n" +
                        "                        final = this.amount * 63.88;\n" +
                        "                     }\n" +
                        "                     if (to == \"EUR\") {\n" +
                        "                        final = this.amount * 0.84;\n" +
                        "                     }\n" +
                        "                     if (to == \"USD\") {\n" +
                        "                        final = this.amount;\n" +
                        "                     }\n" +
                        "                     if (to == \"BHD\") {\n" +
                        "                        final = this.amount * 0.38;\n" +
                        "                     }\n" +
                        "                     break;\n" +
                        "                     case \"EUR\":\n" +
                        "                     if (to == \"INR\") {\n" +
                        "                        final = this.amount * 76.22;\n" +
                        "                     }\n" +
                        "                     if (to == \"USD\") {\n" +
                        "                        final = this.amount * 1.19;\n" +
                        "                     }\n" +
                        "                     if (to == \"EUR\") {\n" +
                        "                        final = this.amount;\n" +
                        "                     }\n" +
                        "                     if (to == \"BHD\") {\n" +
                        "                        final = this.amount * 0.45;\n" +
                        "                     }\n" +
                        "                     break;\n" +
                        "                     case \"BHD\":\n" +
                        "                     if (to == \"INR\") {\n" +
                        "                        final = this.amount *169.44;\n" +
                        "                     }\n" +
                        "                     if (to == \"USD\") {\n" +
                        "                        final = this.amount * 2.65;\n" +
                        "                     }\n" +
                        "                     if (to == \"EUR\") {\n" +
                        "                        final = this.amount * 2.22;\n" +
                        "                     }\n" +
                        "                     if (to == \"BHD\") {\n" +
                        "                        final = this.amount;\n" +
                        "                     }\n" +
                        "                     break\n" +
                        "                  }\n" +
                        "                  return final;\n" +
                        "               }\n" +
                        "            }\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Customer Details",
                "Example 2: Customer Details" +
                        "\n\n" +
                        "Explanation − In the above example, we have three texboxes to enter - the First Name, Last Name and Address. There is an add button, which adds the values entered in the textboxes in a table format with a delete button.\n" +
                        "\n" +
                        "The table format is created using components. The click button interacts with the parent component using the emit event to delete the element from the array. The values entered are stored in the array and the same are shared with the child component using the prop property.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>VueJs Instance</title>\n" +
                        "      <script type = \"text/javascript\" src = \"js/vue.js\"></script>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <style>\n" +
                        "         #databinding{\n" +
                        "            padding: 20px 15px 15px 15px;\n" +
                        "            margin: 0 0 25px 0;\n" +
                        "            width: auto;\n" +
                        "         }\n" +
                        "         span, option, input {\n" +
                        "            font-size:20px;\n" +
                        "         }\n" +
                        "         .Table{\n" +
                        "            display: table;\n" +
                        "            width:80%;\n" +
                        "         }\n" +
                        "         .Title{\n" +
                        "            display: table-caption;\n" +
                        "            text-align: center;\n" +
                        "            font-weight: bold;\n" +
                        "            font-size: larger;\n" +
                        "         }\n" +
                        "         .Heading{\n" +
                        "            display: table-row;\n" +
                        "            font-weight: bold;\n" +
                        "            text-align: center;\n" +
                        "         }\n" +
                        "         .Row{\n" +
                        "            display: table-row;\n" +
                        "         }\n" +
                        "         .Cell{\n" +
                        "            display: table-cell;\n" +
                        "            border: solid;\n" +
                        "            border-width: thin;\n" +
                        "            padding-left: 5px;\n" +
                        "            padding-right: 5px;\n" +
                        "            width:30%;\n" +
                        "         }\n" +
                        "      </style>\n" +
                        "      \n" +
                        "      <div id = \"databinding\" style = \"\">\n" +
                        "         <h1>Customer Details</h1>\n" +
                        "         <span>First Name</span>\n" +
                        "         <input type = \"text\" placeholder = \"Enter First Name\" v-model = \"fname\"/>\n" +
                        "         <span>Last Name</span>\n" +
                        "         <input type = \"text\" placeholder = \"Enter Last Name\" v-model = \"lname\"/>\n" +
                        "         <span>Address</span>\n" +
                        "         <input type = \"text\" placeholder = \"Enter Address\" v-model = \"addr\"/>\n" +
                        "         <button v-on:click = \"showdata\" v-bind:style = \"styleobj\">Add</button>\n" +
                        "         <br/>\n" +
                        "         <br/>\n" +
                        "         <customercomponent\n" +
                        "            v-for = \"(item, index) in custdet\"\n" +
                        "            v-bind:item = \"item\"\n" +
                        "            v-bind:index = \"index\"\n" +
                        "            v-bind:itr = \"item\"\n" +
                        "            v-bind:key = \"item.fname\"\n" +
                        "            v-on:removeelement = \"custdet.splice(index, 1)\">\n" +
                        "         </customercomponent>\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         Vue.component('customercomponent',{\n" +
                        "            template : '<div class = \"Table\"><div class = \"Row\"  v-bind:style = \"styleobj\"><div class = \"Cell\"><p>{{itr.fname}}</p></div><div class = \"Cell\"><p>{{itr.lname}}</p></div><div class = \"Cell\"><p>{{itr.addr}}</p></div><div class = \"Cell\"><p><button v-on:click = \"$emit(\\'removeelement\\')\">X</button></p></div></div></div>',\n" +
                        "            props: ['itr', 'index'],\n" +
                        "            data: function() {\n" +
                        "               return {\n" +
                        "                  styleobj : {\n" +
                        "                     backgroundColor:this.getcolor(),\n" +
                        "                     fontSize : 20\n" +
                        "                  }\n" +
                        "               }\n" +
                        "            },\n" +
                        "            methods:{\n" +
                        "               getcolor : function() {\n" +
                        "                  if (this.index % 2) {\n" +
                        "                     return \"#FFE633\";\n" +
                        "                  } else {\n" +
                        "                     return \"#D4CA87\";\n" +
                        "                  }\n" +
                        "               }\n" +
                        "            }\n" +
                        "         });\n" +
                        "         var vm = new Vue({\n" +
                        "            el: '#databinding',\n" +
                        "            data: {\n" +
                        "               fname:'',\n" +
                        "               lname:'',\n" +
                        "               addr : '',\n" +
                        "               custdet:[],\n" +
                        "               styleobj: {\n" +
                        "                  backgroundColor: '#2196F3!important',\n" +
                        "                  cursor: 'pointer',\n" +
                        "                  padding: '8px 16px',\n" +
                        "                  verticalAlign: 'middle',\n" +
                        "               }\n" +
                        "            },\n" +
                        "            methods :{\n" +
                        "               showdata : function() {\n" +
                        "                  this.custdet.push({\n" +
                        "                     fname: this.fname,\n" +
                        "                     lname: this.lname,\n" +
                        "                     addr : this.addr\n" +
                        "                  });\n" +
                        "                  this.fname = \"\";\n" +
                        "                  this.lname = \"\";\n" +
                        "                  this.addr = \"\";\n" +
                        "               }\n" +
                        "            }\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //NextJs
    //NextJs Introduction
    private static List<LearnDetailsModel> NextJsIntroduction() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "NextJs Introduction",
                "The Next.js is React Based framework with server side rendering capability. It is very fast and SEO friendly. Using Next.js, you can create robust react based application quite easily and test them." +
                        "\n" +
                        "Next.js more resources... https://cutt.ly/UIqz3gR",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Overview",
                "The Next.js is React Based framework with server side rendering capability. It is very fast and SEO friendly.\n" +
                        "\n" +
                        "Using Next.js, you can create robust react based application quite easily and test them. Following are the key features of Next.js.\n" +
                        "\n" +
                        "Hot Code Reload − Next.js server detects modified files and reloads them automatically.\n" +
                        "\n" +
                        "Automatic Routing − No need to configure any url for routing. files are to be placed in pages folder. All urls will be mapped to file system. Customization can be done.\n" +
                        "\n" +
                        "Component specific styles − styled-jsx provides support for global as well as component specific styles.\n" +
                        "\n" +
                        "Server side rendering − react components are pretender on server hence loads faster on client.\n" +
                        "\n" +
                        "Node Ecosystem − Next.js being react based gels well with Node ecosystem.\n" +
                        "\n" +
                        "Automatic code split − Next.js renders pages with libraries they need. Next.js instead of creating a single large javascript file, creates multiples resources. When a page is loaded, only required javascript page is loaded with it.\n" +
                        "\n" +
                        "Prefetch − Next.js provides Link component which is used to link multiple components supports a prefetch property to prefetch page resources in background.\n" +
                        "\n" +
                        "Dynamic Components − Next.js allows to import JavaScript modules and React Components dynamically.\n" +
                        "\n" +
                        "Export Static Site − Next.js allows to export full static site from your web application.\n" +
                        "\n" +
                        "Built-in Typescript Support − Next.js is written in Typescripts and provides excellent Typescript support.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Audience",
                "This tutorial is designed for software programmers who want to learn the basics of Next.js and its concepts in a simple and easy manner. This tutorial will give you enough understanding on the various functionalities of Next.js with suitable examples.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Prerequisites",
                "Before proceeding with this tutorial, you should have a basic understanding of JavaScript and React.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        return list;
    }

    //NextJs Pages
    private static List<LearnDetailsModel> NextJsPages() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "NextJs Pages",
                "n Next.js, we can create pages and navigate between them using file system routing feature. We'll use Link component to have a client side navigation between pages.\n" +
                        "\n" +
                        "In Next.js, a page is a React Component and are exported from pages directory. Each page is associated with a route based on its file name. For example\n" +
                        "\n" +
                        "pages/index.js is linked with '/' route.\n" +
                        "\n" +
                        "pages/posts/first.js is linked with '/posts/first' route and so on.\n" +
                        "\n" +
                        "Let's update the nextjs project created in Environment Setup chapter.\n" +
                        "\n" +
                        "Create post directory and first.js within it with following contents.\n" +
                        "\n" +
                        "export default function FirstPost() {\n" +
                        "   return <h1>My First Post</h1>\n" +
                        "}\n" +
                        "Add Link Support to go back to Home page. Update first.js as follows −\n" +
                        "\n" +
                        "import Link from 'next/link'\n" +
                        "\n" +
                        "export default function FirstPost() {\n" +
                        "   return (\n" +
                        "      <>\n" +
                        "         <h1>My First Post</h1>\n" +
                        "         <h2>\n" +
                        "            <Link href=\"/\">\n" +
                        "               <a>Home</a>\n" +
                        "            </Link>\n" +
                        "         </h2>\n" +
                        "      </>\t  \n" +
                        "   )\n" +
                        "}\n" +
                        "Add Link Support to home page to navigate to first page. Update index.js as follows −\n" +
                        "\n" +
                        "import Link from 'next/link'\n" +
                        "\n" +
                        "function HomePage() {\n" +
                        "   return (\n" +
                        "      <>\n" +
                        "         <div>Welcome to Next.js!</div>\n" +
                        "         <Link href=\"/posts/first\"><a>First Post</a></Link>\n" +
                        "      </>\t    \n" +
                        "   )\n" +
                        "}\n" +
                        "\n" +
                        "export default HomePage",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Start Next.js Server",
                "Run the following command to start the server −.",
                "npm run dev\n" +
                        "> nextjs@1.0.0 dev \\Node\\nextjs\n" +
                        "> next\n" +
                        "\n" +
                        "ready - started server on http://localhost:3000\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /next/dist/pages/_error\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //NextJs Static File Serving
    private static List<LearnDetailsModel> NextJsStaticFileServing() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "NextJs Static File Serving",
                "In Next.js, we can serve static pages like images very easily by putting them in public, a top level directory. We can refer these files in similar fashion like pages in pages directory.\n" +
                        "\n" +
                        "In Next.js, a page is a React Component and are exported from pages directory. Each page is associated with a route based on its file name.\n" +
                        "\n" +
                        "Let's update the nextjs project used in Pages chapter.\n" +
                        "\n" +
                        "Create public directory and place any images within it. We've taken logo.png, TutorialsPoint Logo image.\n" +
                        "\n" +
                        "Update first.js as follows −\n" +
                        "\n" +
                        "import Link from 'next/link'\n" +
                        "\n" +
                        "export default function FirstPost() {\n" +
                        "   return (\n" +
                        "      <>\n" +
                        "         <h1>My First Post</h1>\n" +
                        "         <h2>\n" +
                        "            <Link href=\"/\">\n" +
                        "               <a>Home</a>\n" +
                        "            </Link>\n" +
                        "         </h2>\n" +
                        "         <br/\">\n" +
                        "         <img src=\"/logo.png\" alt=\"ShrCreation Logo\" />\n" +
                        "      </>\t  \n" +
                        "   )\n" +
                        "}\n" +
                        "Here we've added a reference to logo.png in index.js file.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Start Next.js Server",
                "Run the following command to start the server −.",
                "npm run dev\n" +
                        "> nextjs@1.0.0 dev \\Node\\nextjs\n" +
                        "> next\n" +
                        "\n" +
                        "ready - started server on http://localhost:3000\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /next/dist/pages/_error\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //NextJs Meta Data
    private static List<LearnDetailsModel> NextJsMetaData() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "NextJs Meta Data",
                "In Next.js, we can serve modify the head section of each react pages very easily with the help of <Head> react component which is inbuilt.\n" +
                        "\n" +
                        "Let's update the nextjs project used in Pages chapter.\n" +
                        "\n" +
                        "Update index.js as follows −\n" +
                        "\n" +
                        "import Link from 'next/link'\n" +
                        "import Head from 'next/head'\n" +
                        "\n" +
                        "function HomePage() {\n" +
                        "   return (\n" +
                        "      <>\n" +
                        "         <Head>\n" +
                        "            <title>Welcome to Next.js!</title>\n" +
                        "         </Head>\n" +
                        "         <div>Welcome to Next.js!</div>\n" +
                        "         <Link href=\"/posts/first\"><a>First Post</a></Link>\n" +
                        "         <br/>\n" +
                        "         <img src=\"/logo.png\" alt=\"ShrCreation Logo\" />\n" +
                        "      </>\t    \n" +
                        "   )\n" +
                        "}\n" +
                        "\n" +
                        "export default HomePage\n" +
                        "Update first.js as follows −\n" +
                        "\n" +
                        "import Link from 'next/link'\n" +
                        "import Head from 'next/head'\n" +
                        "\n" +
                        "export default function FirstPost() {\n" +
                        "   return (\n" +
                        "      <>\n" +
                        "      <Head>\n" +
                        "         <title>My First Post</title>\n" +
                        "      </Head>\n" +
                        "      <h1>My First Post</h1>\n" +
                        "      <h2>\n" +
                        "         <Link href=\"/\">\n" +
                        "            <a>Home</a>\n" +
                        "         </Link>\n" +
                        "      </h2>\n" +
                        "      </>\t  \n" +
                        "   )\n" +
                        "}\n" +
                        "Here we've added a reference to logo.png in index.js file.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Start Next.js Server",
                "Run the following command to start the server −.",
                "npm run dev\n" +
                        "> nextjs@1.0.0 dev \\Node\\nextjs\n" +
                        "> next\n" +
                        "\n" +
                        "ready - started server on http://localhost:3000\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /next/dist/pages/_error\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //NextJs CSS Support
    private static List<LearnDetailsModel> NextJsCSSSupport() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "NextJs CSS Support",
                "In Next.js, we can use inbuild css-in-js library named styled-jsx. It allows to write css within a react component and these styles will be scoped to component.\n" +
                        "\n" +
                        "In this example, we'll create a Container object which will be used to style other components by containing them.\n" +
                        "\n" +
                        "Let's update the nextjs project used in Meta Data chapter.\n" +
                        "\n" +
                        "First create a Components directory at root level and add a file container.module.css as follows −\n" +
                        "\n" +
                        ".container {\n" +
                        "   max-width: 36rem;\n" +
                        "   padding: 0 1rem;\n" +
                        "   margin: 3rem auto 6rem;\n" +
                        "   border: 1px solid red;  \n" +
                        "}\n" +
                        "Create container.js file in Components directory\n" +
                        "\n" +
                        "import styles from './container.module.css'\n" +
                        "\n" +
                        "function Container({ children }) {\n" +
                        "   return <div className={styles.container}>{children}</div>\n" +
                        "}\n" +
                        "\n" +
                        "export default Container\n" +
                        "Now use Container component in first.js.\n" +
                        "\n" +
                        "import Link from 'next/link'\n" +
                        "import Head from 'next/head'\n" +
                        "import Container from '../../components/container'\n" +
                        "\n" +
                        "export default function FirstPost() {\n" +
                        "   return (\n" +
                        "      <>\n" +
                        "         <Container>\n" +
                        "            <Head>\n" +
                        "               <title>My First Post</title>\n" +
                        "            </Head>\n" +
                        "            <h1>My First Post</h1>\n" +
                        "            <h2>\n" +
                        "            <Link href=\"/\">\n" +
                        "               <a>Home</a>\n" +
                        "            </Link>\n" +
                        "            </h2>\n" +
                        "         </Container>\n" +
                        "      </>\t  \n" +
                        "   )\n" +
                        "}",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Start Next.js Server",
                "Run the following command to start the server −.",
                "npm run dev\n" +
                        "> nextjs@1.0.0 dev \\Node\\nextjs\n" +
                        "> next\n" +
                        "\n" +
                        "ready - started server on http://localhost:3000\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /next/dist/pages/_error\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //NextJs Global CSS Support
    private static List<LearnDetailsModel> NextJsGlobalCSSSupport() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Global CSS Support",
                "In Next.js, Let's create global styles which will be applied on all pages.\n" +
                        "\n" +
                        "In this example, we'll create a styles.css which will be used on all components using _app.js component.\n" +
                        "\n" +
                        "Let's update the nextjs project used in CSS Support chapter.\n" +
                        "\n" +
                        "First create a styles directory at root level and add a file styles.css as follows −\n" +
                        "\n" +
                        "html,\n" +
                        "body {\n" +
                        "   padding: 0;\n" +
                        "   margin: 0;\n" +
                        "   line-height: 1.6;\n" +
                        "   font-size: 18px;\n" +
                        "   background-color: lime;\n" +
                        "}\n" +
                        "\n" +
                        "* {\n" +
                        "   box-sizing: border-box;\n" +
                        "}\n" +
                        "\n" +
                        "a {\n" +
                        "   color: #15c55d;\n" +
                        "   text-decoration: none;\n" +
                        "}\n" +
                        "\n" +
                        "a:hover {\n" +
                        "   text-decoration: underline;\n" +
                        "}\n" +
                        "\n" +
                        "img {\n" +
                        "   max-width: 100%;\n" +
                        "   display: block;\n" +
                        "}\n" +
                        "Create _app.js file in pages directory\n" +
                        "\n" +
                        "import '../styles/styles.css'\n" +
                        "\n" +
                        "export default function App({ Component, pageProps }) {\n" +
                        "   return <Component {...pageProps} />\n" +
                        "}",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Start Next.js Server",
                "Run the following command to start the server −.",
                "npm run dev\n" +
                        "> nextjs@1.0.0 dev \\Node\\nextjs\n" +
                        "> next\n" +
                        "\n" +
                        "ready - started server on http://localhost:3000\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /next/dist/pages/_error\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //NextJs Pre-Rendering
    private static List<LearnDetailsModel> NextJsPreRendering() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Pre-Rendering",
                "In Next.js, we know it generates HTML for a page called pre-rendering. Next.JS supports two types of pre-rendering.\n" +
                        "\n" +
                        "Static Generation − This method generates the HTML page at build time. This pre-rendered HTML is sent on each request. This method is useful for marketing websites, blogs, e-commerce products listing wesites, helps, documentation websites.\n" +
                        "\n" +
                        "Server Side Generation − This method generates the HTML page on each request. This method is suitable when an html page contents can vary with each request.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Per Page Pre-rendering",
                "Next.JS allows to set pre-rendering method for each page where most of pages follow static generation and other pages will use server side rendering.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Static Generation Without Data",
                "Static generation can be done without data in which case, HTML pages will be ready without need to prefetch the data and then start rendering. Data can be fetched later or on request. This technique helps in showing user an User Interface without any data in case data takes time to come.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Static Generation With Data",
                "Static generation can be done with data in which case, HTML pages will not be ready until data is fetched, as HTML may be dependent on data. Each component has a special method getStaticProps which can be used to fetch data and pass data as props of the page so that page can render accordings to passed props.\n" +
                        "\n" +
                        "getStaticProps() function runs at build time in production and runs for every request in dev mode.\n" +
                        "\n" +
                        "Let's create an example to demonstrate the same.\n" +
                        "\n" +
                        "In this example, we'll create a update index.js and first.js page to make a server hit to get data.\n" +
                        "\n" +
                        "Let's update the nextjs project used in Global CSS Support chapter.\n" +
                        "\n" +
                        "Update index.js file in pages directory to use getServerSideProps() method. This method will be called per request.",
                "import Link from 'next/link'\n" +
                        "import Head from 'next/head'\n" +
                        "\n" +
                        "function HomePage(props) {\n" +
                        "   return (\n" +
                        "      <>\n" +
                        "         <Head>\n" +
                        "            <title>Welcome to Next.js!</title>\n" +
                        "         </Head>\n" +
                        "         <div>Welcome to Next.js!</div>\n" +
                        "         <Link href=\"/posts/first\"><a>First Post</a></Link>\n" +
                        "         <br/>\n" +
                        "         <div>Next stars: {props.stars}</div>\n" +
                        "         <img src=\"/logo.png\" alt=\"ShrCreation Logo\" />\n" +
                        "      </>\t    \n" +
                        "   )\n" +
                        "}\n" +
                        "\n" +
                        "export async function getServerSideProps(context) {\n" +
                        "   const res = await fetch('https://api.github.com/repos/vercel/next.js')\n" +
                        "   const json = await res.json()\n" +
                        "   return {\n" +
                        "      props: { stars: json.stargazers_count }\n" +
                        "   }\n" +
                        "}\n" +
                        "\n" +
                        "export default HomePage" +
                        "\n\n\n" +
                        "Update first.js file in pages directory to use getStaticProps() method. This method will be called once.\n" +
                        "\n" +
                        "import Link from 'next/link'\n" +
                        "import Head from 'next/head'\n" +
                        "import Container from '../../components/container'\n" +
                        "\n" +
                        "export default function FirstPost(props) {\n" +
                        "   return (\n" +
                        "      <>\n" +
                        "         <Container>\n" +
                        "            <Head>\n" +
                        "               <title>My First Post</title>\n" +
                        "            </Head>\n" +
                        "            <h1>My First Post</h1>\n" +
                        "            <h2>\n" +
                        "               <Link href=\"/\">\n" +
                        "                  <a>Home</a>\n" +
                        "               </Link>\n" +
                        "               <div>Next stars: {props.stars}</div>\n" +
                        "            </h2>\n" +
                        "         </Container>\n" +
                        "      </>\t  \n" +
                        "   )\n" +
                        "}\n" +
                        "\n" +
                        "export async function getStaticProps() {\n" +
                        "   const res = await fetch('https://api.github.com/repos/vercel/next.js')\n" +
                        "   const json = await res.json()\n" +
                        "   return {\n" +
                        "      props: { stars: json.stargazers_count }\n" +
                        "   }\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Start Next.js Server",
                "Run the following command to start the server −.",
                "npm run dev\n" +
                        "> nextjs@1.0.0 dev \\Node\\nextjs\n" +
                        "> next\n" +
                        "\n" +
                        "ready - started server on http://localhost:3000\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /next/dist/pages/_error\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }

    //NextJs Routing
    private static List<LearnDetailsModel> NextJsRouting() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Routing",
                "Next.js uses file system based router. Whenever we add any page to pages directory, it is automatically available via url. Following are the rules of this router.\n" +
                        "\n" +
                        "Index Routes − An index.js file present in a folder maps to root of directory. For example −\n" +
                        "\n" +
                        "pages/index.js maps to '/'.\n" +
                        "\n" +
                        "pages/posts/index.js maps to '/posts'.\n" +
                        "\n" +
                        "Nested Routes − Any nested folder structure in pages directory because router url automatically. For example −\n" +
                        "\n" +
                        "pages/settings/dashboard/about.js maps to '/settings/dashboard/about'.\n" +
                        "\n" +
                        "pages/posts/first.js maps to '/posts/first'.\n" +
                        "\n" +
                        "Dynamic Routes − We can use named parameter as well to match url. Use brackets for the same. For example −\n" +
                        "\n" +
                        "pages/posts/[id].js maps to '/posts/:id' where we can use URL like '/posts/1'.\n" +
                        "\n" +
                        "pages/[user]/settings.js maps to '/posts/:user/settings' where we can use URL like '/abc/settings'.\n" +
                        "\n" +
                        "pages/posts/[...all].js maps to '/posts/*' where we can use any URL like '/posts/2020/jun/'.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Page Linking",
                "Next.JS allows to link pages on client side using Link react component. It has following properties −\n" +
                        "\n" +
                        "href − name of the page in pages directory. For example /posts/first which refers to first.js present in pages/posts directory.\n" +
                        "\n" +
                        "Let's create an example to demonstrate the same.\n" +
                        "\n" +
                        "In this example, we'll update index.js and first.js page to make a server hit to get data.\n" +
                        "\n" +
                        "Let's update the nextjs project used in Global CSS Support chapter.\n" +
                        "\n" +
                        "Update index.js file in pages directory as following.",
                "import Link from 'next/link'\n" +
                        "import Head from 'next/head'\n" +
                        "\n" +
                        "function HomePage(props) {\n" +
                        "   return (\n" +
                        "      <>\n" +
                        "         <Head>\n" +
                        "            <title>Welcome to Next.js!</title>\n" +
                        "         </Head>\n" +
                        "         <div>Welcome to Next.js!</div>\n" +
                        "         <Link href=\"/posts/first\">> <a>First Post</a></Link>\n" +
                        "         <br/>\n" +
                        "         <div>Next stars: {props.stars}</div>\n" +
                        "         <img src=\"/logo.png\" alt=\"ShrCreation Logo\" />\n" +
                        "      </>\t    \n" +
                        "   )\n" +
                        "}\n" +
                        "\n" +
                        "export async function getServerSideProps(context) {\n" +
                        "   const res = await fetch('https://api.github.com/repos/vercel/next.js')\n" +
                        "   const json = await res.json()\n" +
                        "   return {\n" +
                        "      props: { stars: json.stargazers_count }\n" +
                        "   }\n" +
                        "}\n" +
                        "\n" +
                        "export default HomePage",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Start Next.js Server",
                "Run the following command to start the server −.",
                "npm run dev\n" +
                        "> nextjs@1.0.0 dev \\Node\\nextjs\n" +
                        "> next\n" +
                        "\n" +
                        "ready - started server on http://localhost:3000\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /next/dist/pages/_error\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //NextJs Dynamic Routing
    private static List<LearnDetailsModel> NextJsDynamicRouting() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Dynamic Routing",
                "In Next.js, we can create routes dynamically. In this example, we'll create pages on the fly and their routing.\n" +
                        "\n" +
                        "Step 1. Define [id].js file − [id].js represents the dynamic page where id will be relative path. Define this file in pages/post directory.\n" +
                        "\n" +
                        "Step 2. Define lib/posts.js − posts.js represents the ids and contents. lib directory is to be created in root directory.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "[id].js",
                "Update [id].js file with getStaticPaths() method which sets the paths and getStaticProps() method to get the contents based on id.",
                "import Link from 'next/link'\n" +
                        "import Head from 'next/head'\n" +
                        "import Container from '../../components/container'\n" +
                        "\n" +
                        "import { getAllPostIds, getPostData } from '../../lib/posts'\n" +
                        "\n" +
                        "export default function Post({ postData }) {\n" +
                        "   return (\n" +
                        "      <Container>\n" +
                        "         {postData.id}\n" +
                        "         <br />\n" +
                        "         {postData.title}\n" +
                        "         <br />\n" +
                        "         {postData.date}\n" +
                        "      </Container>\n" +
                        "   )\n" +
                        "}\n" +
                        "export async function getStaticPaths() {\n" +
                        "   const paths = getAllPostIds()\n" +
                        "   return {\n" +
                        "      paths,\n" +
                        "      fallback: false\n" +
                        "   }\n" +
                        "}\n" +
                        "\n" +
                        "export async function getStaticProps({ params }) {\n" +
                        "   const postData = getPostData(params.id)\n" +
                        "      return {\n" +
                        "      props: {\n" +
                        "         postData\n" +
                        "      }\n" +
                        "   }\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "posts.js",
                "posts.js contains getAllPostIds() to get the ids and getPostData() to get corresponding contents.",
                "export function getPostData(id) {\n" +
                        "   const postOne = {\n" +
                        "      title: 'One',\n" +
                        "      id: 1,\n" +
                        "      date: '7/12/2020'\n" +
                        "   }\n" +
                        "\n" +
                        "   const postTwo = {\n" +
                        "      title: 'Two',\n" +
                        "      id: 2,\n" +
                        "      date: '7/12/2020'\n" +
                        "   }\n" +
                        "   if(id == 'one'){\n" +
                        "      return postOne;\n" +
                        "   }else if(id == 'two'){\n" +
                        "      return postTwo;\n" +
                        "   }  \n" +
                        "}\n" +
                        "\n" +
                        "export function getAllPostIds() {\n" +
                        "   return [{\n" +
                        "      params: {\n" +
                        "         id: 'one'\n" +
                        "      }\n" +
                        "   },\n" +
                        "   {\n" +
                        "      params: {\n" +
                        "         id: 'two'\n" +
                        "      }\n" +
                        "   }\n" +
                        "];\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Start Next.js Server",
                "Run the following command to start the server −.",
                "npm run dev\n" +
                        "> nextjs@1.0.0 dev \\Node\\nextjs\n" +
                        "> next\n" +
                        "\n" +
                        "ready - started server on http://localhost:3000\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /next/dist/pages/_error\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        return list;
    }

    //NextJs Imperative Routing
    private static List<LearnDetailsModel> NextJsImperativeRouting() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Imperative Routing",
                "In Next.js, so far we are using Link react component to navigate from one page to other. There is a programmatic way as well to achive the same using Router component. Generally Router component is used with html tags.\n" +
                        "\n" +
                        "Update index.js file in pages directory as following.",
                "import Router from 'next/router'\n" +
                        "import Head from 'next/head'\n" +
                        "\n" +
                        "function HomePage(props) {\n" +
                        "   return (\n" +
                        "      <>\n" +
                        "         <Head>\n" +
                        "            <title>Welcome to Next.js!</title>\n" +
                        "         </Head>\n" +
                        "         <div>Welcome to Next.js!</div>\n" +
                        "         <span onClick={() => Router.push('/posts/one')}>First Post</span>\n" +
                        "         <br/>\n" +
                        "         <div>Next stars: {props.stars}</div>\n" +
                        "         <img src=\"/logo.png\" alt=\"ShrCreation Logo\" />\n" +
                        "      </>\t    \n" +
                        "   )\n" +
                        "}\n" +
                        "\n" +
                        "export async function getServerSideProps(context) {\n" +
                        "   const res = await fetch('https://api.github.com/repos/vercel/next.js')\n" +
                        "   const json = await res.json()\n" +
                        "   return {\n" +
                        "      props: { stars: json.stargazers_count }\n" +
                        "   }\n" +
                        "}\n" +
                        "\n" +
                        "export default HomePage",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Start Next.js Server",
                "Run the following command to start the server −.",
                "npm run dev\n" +
                        "> nextjs@1.0.0 dev \\Node\\nextjs\n" +
                        "> next\n" +
                        "\n" +
                        "ready - started server on http://localhost:3000\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /next/dist/pages/_error\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //NextJs Shallow Routing
    private static List<LearnDetailsModel> NextJsShallowRouting() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Shallow Routing",
                "In Next.js, shallow routing refers to navigating to same page but no calls to getServerSideProps, getStaticProps, and getInitialProps methods.\n" +
                        "\n" +
                        "To do shallow routing, we use Router with shallow flag as true. See the below example.\n" +
                        "\n" +
                        "Update index.js file in pages directory as following.",
                "import Router from 'next/router'\n" +
                        "import Head from 'next/head'\n" +
                        "\n" +
                        "function HomePage(props) {\n" +
                        "   return (\n" +
                        "      <>\n" +
                        "         <Head>\n" +
                        "            <title>Welcome to Next.js!</title>\n" +
                        "         </Head>\n" +
                        "         <div>Welcome to Next.js!</div>\n" +
                        "         <span onClick={() => Router.push('/?counter=1', undefined, { shallow: true })}>Reload</span>\n" +
                        "         <br/>\n" +
                        "         <div>Next stars: {props.stars}</div>\n" +
                        "         <img src=\"/logo.png\" alt=\"ShrCreation Logo\" />\n" +
                        "      </>\t    \n" +
                        "   )\n" +
                        "}\n" +
                        "\n" +
                        "export async function getServerSideProps(context) {\n" +
                        "   const res = await fetch('https://api.github.com/repos/vercel/next.js')\n" +
                        "   const json = await res.json()\n" +
                        "   return {\n" +
                        "      props: { stars: json.stargazers_count }\n" +
                        "   }\n" +
                        "}\n" +
                        "\n" +
                        "export default HomePage",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Start Next.js Server",
                "Run the following command to start the server −.",
                "npm run dev\n" +
                        "> nextjs@1.0.0 dev \\Node\\nextjs\n" +
                        "> next\n" +
                        "\n" +
                        "ready - started server on http://localhost:3000\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /next/dist/pages/_error\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //NextJs Api Routes
    private static List<LearnDetailsModel> NextJsApiRoutes() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Api Routes",
                "API Routes is a way to create rest API using Next.js. Next.js maps any file present in /pages/api folder and will be treated as API end point. An example of API function −\n" +
                        "\n" +
                        "export default (req, res) => {\n" +
                        "   ...\n" +
                        "}\n" +
                        "Following are some important points to consider.\n" +
                        "\n" +
                        "req − req is an instance of http.IncomingMessage and is used to get data from request.\n" +
                        "\n" +
                        "res − res is an instance of http.ServerResponse and is used to send data as response.\n" +
                        "\n" +
                        "Let's create an example to demonstrate the same.\n" +
                        "\n" +
                        "In this example, we are going to create an user.js in pages/api directory.\n" +
                        "\n" +
                        "Let's update the nextjs project used in Global CSS Support chapter.\n" +
                        "\n" +
                        "Create user.js file in pages/api directory as following.",
                "export default (req, res) => {\n" +
                        "   res.statusCode = 200\n" +
                        "   res.setHeader('Content-Type', 'application/json')\n" +
                        "   res.end(JSON.stringify({ name: 'Robert' }))\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Start Next.js Server",
                "Run the following command to start the server −.",
                "npm run dev\n" +
                        "\n" +
                        "> nextjs@1.0.0 dev D:\\Node\\nextjs\n" +
                        "> next\n" +
                        "\n" +
                        "ready - started server on http://localhost:3000\n" +
                        "info  - Loaded env from D:\\Node\\nextjs\\.env.local\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /api/user\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /next/dist/pages/_error\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully",
                "{\"name\":\"Robert\"}"
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //NextJs API MiddleWares
    private static List<LearnDetailsModel> NextJsAPIMiddleWares() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "API MiddleWares",
                "API Routes in Next.JS have built-in middlewares which helps in parsing the incoming request.\n" +
                        "\n" +
                        "Following are the middlewares\n" +
                        "\n" +
                        "req.cookies − cookies object contains the cookies sent by the request. Default value is {}.\n" +
                        "\n" +
                        "req.query − query object contains the query string. Default value is {}.\n" +
                        "\n" +
                        "req.body − query object contains the request body parsed using 'content-type'. Default value is null.\n" +
                        "\n" +
                        "Let's create an example to demonstrate the same.\n" +
                        "\n" +
                        "In this example, we are going to update an user.js in pages/api directory.\n" +
                        "\n" +
                        "Let's update the nextjs project used in API Routes chapter.\n" +
                        "\n" +
                        "Create user.js file in pages/api directory as following.",
                "export default (req, res) => {\n" +
                        "   res.statusCode = 200\n" +
                        "   res.setHeader('Content-Type', 'application/json')\n" +
                        "   res.end(JSON.stringify({ query: req.query }))\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Start Next.js Server",
                "Run the following command to start the server −.",
                "npm run dev\n" +
                        "\n" +
                        "> nextjs@1.0.0 dev D:\\Node\\nextjs\n" +
                        "> next\n" +
                        "\n" +
                        "ready - started server on http://localhost:3000\n" +
                        "info  - Loaded env from D:\\Node\\nextjs\\.env.local\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /api/user\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /next/dist/pages/_error\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully",
                "{\"query\":{\"counter\":\"1\"}}"
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //NextJs Response Helpers
    private static List<LearnDetailsModel> NextJsResponseHelpers() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Response Helpers",
                "res object have express.js like helper methods to ease development to create services.\n" +
                        "\n" +
                        "Following are the response helper methods\n" +
                        "\n" +
                        "res.status(code) − This methods set the status of response. Code passed must be a valid HTTP status.\n" +
                        "\n" +
                        "req.json(json) − This method returns a JSON response. json passed must be a valid JSON object.\n" +
                        "\n" +
                        "req.send(body) − This methods sends an HTTP response. Response can be string, object or Buffer.\n" +
                        "\n" +
                        "Let's create an example to demonstrate the same.\n" +
                        "\n" +
                        "In this example, we are going to update an user.js in pages/api directory.\n" +
                        "\n" +
                        "Let's update the nextjs project used in API Routes chapter.\n" +
                        "\n" +
                        "Create user.js file in pages/api directory as following.",
                "export default (req, res) => {\n" +
                        "   res.status(200).json({ name: 'Robert' });\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Start Next.js Server",
                "Run the following command to start the server −.",
                "npm run dev\n" +
                        "\n" +
                        "> nextjs@1.0.0 dev D:\\Node\\nextjs\n" +
                        "> next\n" +
                        "\n" +
                        "ready - started server on http://localhost:3000\n" +
                        "info  - Loaded env from D:\\Node\\nextjs\\.env.local\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /api/user\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully\n" +
                        "event - build page: /next/dist/pages/_error\n" +
                        "wait  - compiling...\n" +
                        "event - compiled successfully",
                "{ name: 'Robert' }"
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //ReactJs
    //ReactJs Introduction
    private static List<LearnDetailsModel> ReactJsIntroduction() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Introduction",
                "ReactJS is a simple, feature rich, component based JavaScript UI library. It can be used to develop small applications as well as big, complex applications. ReactJS provides minimal and solid feature set to kick-start a web application. React community compliments React library by providing large set of ready-made components to develop web application in a record time. React community also provides advanced concept like state management, routing, etc., on top of the React library.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "React versions",
                "The initial version, 0.3.0 of React is released on May, 2013 and the latest version, 17.0.1 is released on October, 2020. The major version introduces breaking changes and the minor version introduces new feature without breaking the existing functionality. Bug fixes are released as and when necessary. React follows the Sematic Versioning (semver) principle.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Features",
                "The salient features of React library are as follows −\n" +
                        "\n" +
                        "Solid base architecture\n" +
                        "Extensible architecture\n" +
                        "Component based library\n" +
                        "JSX based design architecture\n" +
                        "Declarative UI library",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Benefits",
                "Few benefits of using React library are as follows −\n" +
                        "\n" +
                        "Easy to learn\n" +
                        "Easy to adept in modern as well as legacy application\n" +
                        "Faster way to code a functionality\n" +
                        "Availability of large number of ready-made component\n" +
                        "Large and active community",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Applications",
                "Few popular websites powered by React library are listed below −\n" +
                        "\n" +
                        "Facebook, popular social media application\n" +
                        "Instagram, popular photo sharing application\n" +
                        "Netflix, popular media streaming application\n" +
                        "Code Academy, popular online training application\n" +
                        "Reddit, popular content sharing application\n" +
                        "As you see, most popular application in every field is being developed by React Library.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }

    //ReactJs Architecture
    private static List<LearnDetailsModel> ReactJsArchitecture() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Architecture",
                "React library is built on a solid foundation. It is simple, flexible and extensible. As we learned earlier, React is a library to create user interface in a web application. React’s primary purpose is to enable the developer to create user interface using pure JavaScript. Normally, every user interface library introduces a new template language (which we need to learn) to design the user interface and provides an option to write logic, either inside the template or separately.\n" +
                        "\n" +
                        "Instead of introducing new template language, React introduces three simple concepts as given below −\n" +
                        "\n" +
                        "React elements\n" +
                        "JavaScript representation of HTML DOM. React provides an API, React.createElement to create React Element.\n" +
                        "\n" +
                        "JSX\n" +
                        "A JavaScript extension to design user interface. JSX is an XML based, extensible language supporting HTML syntax with little modification. JSX can be compiled to React Elements and used to create user interface.\n" +
                        "\n" +
                        "React component\n" +
                        "React component is the primary building block of the React application. It uses React elements and JSX to design its user interface. React component is basically a JavaScript class (extends the React.component class) or pure JavaScript function. React component has properties, state management, life cycle and event handler. React component can be able to do simple as well as advanced logic.\n" +
                        "\n" +
                        "Let us learn more about components in the React Component chapter.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Workflow of a React application",
                "Let us understand the workflow of a React application in this chapter by creating and analyzing a simple React application.\n" +
                        "\n" +
                        "Open a command prompt and go to your workspace.\n" +
                        "\n" +
                        "cd /go/to/your/workspace\n\n" +
                        "Next, create a folder, static_site and change directory to newly created folder.\n" +
                        "\n" +
                        "mkdir static_site \n" +
                        "cd static_site",
                "<!DOCTYPE html> \n" +
                        "<html> \n" +
                        "   <head> \n" +
                        "      <meta charset=\"UTF-8\" /> \n" +
                        "      <title>React Application</title> \n" +
                        "   </head> \n" +
                        "   <body> \n" +
                        "      <div id=\"react-app\"></div> \n" +
                        "      <script src=\"https://unpkg.com/react@17/umd/react.development.js\" crossorigin></script> \n" +
                        "      <script src=\"https://unpkg.com/react-dom@17/umd/react-dom.development.js\" crossorigin></script> \n" +
                        "      <script language=\"JavaScript\"> \n" +
                        "         element = React.createElement('h1', {}, 'Hello React!') \n" +
                        "         ReactDOM.render(element, document.getElementById('react-app')); \n" +
                        "      </script> \n" +
                        "   </body> \n" +
                        "</html>",
                "Next, open your favorite browser. Enter http://localhost:5000 in the address bar and then press enter."
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Element",
                "React.createElement\n" +
                        "Used to create React elements. It expects three parameters −\n" +
                        "\n" +
                        "Element tag\n" +
                        "Element attributes as object\n" +
                        "Element content - It can contain nested React element as well\n" +
                        "ReactDOM.render\n" +
                        "Used to render the element into the container. It expects two parameters −\n" +
                        "\n" +
                        "React Element OR JSX\n" +
                        "Root element of the webpage\n" +
                        "Nested React element\n" +
                        "As React.createElement allows nested React element, let us add nested element as shown below −",
                "<script language=\"JavaScript\">\n" +
                        "   element = React.createElement('div', {}, React.createElement('h1', {}, 'Hello React!'));\n" +
                        "   ReactDOM.render(element, document.getElementById('react-app')); \n" +
                        "</script>",
                "<div><h1> Hello React!</h1></div>"
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Use JSX",
                "Next, let us remove the React element entirely and introduce JSX syntax as shown below −",
                "<!DOCTYPE html> \n" +
                        "<html> \n" +
                        "   <head> \n" +
                        "      <meta charset=\"UTF-8\" /> \n" +
                        "      <title>React Application</title> \n" +
                        "   </head> \n" +
                        "   <body> \n" +
                        "      <div id=\"react-app\"></div> \n" +
                        "      <script src=\"https://unpkg.com/react@17/umd/react.development.js\" crossorigin></script> \n" +
                        "      <script src=\"https://unpkg.com/react-dom@17/umd/react-dom.development.js\" crossorigin></script> \n" +
                        "      <script src=\"https://unpkg.com/@babel/standalone/babel.min.js\"></script> \n" +
                        "      <script type=\"text/babel\"> \n" +
                        "         ReactDOM.render(\n" +
                        "            <div><h1>Hello React!</h1></div>, \n" +
                        "            document.getElementById('react-app') \n" +
                        "         ); \n" +
                        "     </script> \n" +
                        "   </body> \n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Architecture of the React Application",
                "React library is just UI library and it does not enforce any particular pattern to write a complex application. Developers are free to choose the design pattern of their choice. React community advocates certain design pattern. One of the patterns is Flux pattern. React library also provides lot of concepts like Higher Order component, Context, Render props, Refs etc., to write better code. React Hooks is evolving concept to do state management in big projects. Let us try to understand the high level architecture of a React application." +
                        "\n\n" +
                        "React app starts with a single root component.\n" +
                        "\n" +
                        "Root component is build using one or more component.\n" +
                        "\n" +
                        "Each component can be nested with other component to any level.\n" +
                        "\n" +
                        "Composition is one of the core concepts of React library. So, each component is build by composing smaller components instead of inheriting one component from another component.\n" +
                        "\n" +
                        "Most of the components are user interface components.\n" +
                        "\n" +
                        "React app can include third party component for specific purpose such as routing, animation, state management, etc.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }

    //ReactJs Creating a React Application
    private static List<LearnDetailsModel> ReactJsCreatingReactApplication() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Creating a React Application",
                "As we learned earlier, React library can be used in both simple and complex application. Simple application normally includes the React library in its script section. In complex application, developers have to split the code into multiple files and organize the code into a standard structure. Here, React toolchain provides pre-defined structure to bootstrap the application. Also, developers are free to use their own project structure to organize the code.\n" +
                        "\n" +
                        "Let us see how to create simple as well as complex React application −\n" +
                        "\n" +
                        "Simple application using CDN\n" +
                        "\n" +
                        "Complex application using React Create App cli\n" +
                        "\n" +
                        "Complex application using customized method",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Using Rollup bundler",
                "Rollup is one of the small and fast JavaScript bundlers. Let us learn how to use rollup bundler in this chapter.\n" +
                        "\n" +
                        "Open a terminal and go to your workspace.\n" +
                        "\n" +
                        "cd /go/to/your/workspace\n" +
                        "Next, create a folder, expense-manager-rollup and move to newly created folder. Also, open the folder in your favorite editor or IDE.\n" +
                        "\n" +
                        "mkdir expense-manager-rollup \n" +
                        "cd expense-manager-rollup\n" +
                        "Next, create and initialize the project.\n" +
                        "\n" +
                        "npm init -y\n" +
                        "Next, install React libraries (react and react-dom).\n" +
                        "\n" +
                        "npm install react@^17.0.0 react-dom@^17.0.0 --save\n" +
                        "Next, install babel and its preset libraries as development dependency.\n" +
                        "\n" +
                        "npm install @babel/preset-env @babel/preset-react \n" +
                        "@babel/core @babel/plugin-proposal-class-properties -D\n" +
                        "Next, install rollup and its plugin libraries as development dependency.\n" +
                        "\n" +
                        "npm i -D rollup postcss@8.1 @rollup/plugin-babel \n" +
                        "@rollup/plugin-commonjs @rollup/plugin-node-resolve \n" +
                        "@rollup/plugin-replace rollup-plugin-livereload \n" +
                        "rollup-plugin-postcss rollup-plugin-serve postcss@8.1 \n" +
                        "postcss-modules@4 rollup-plugin-postcss\n" +
                        "Next, install corejs and regenerator runtime for async programming.\n" +
                        "\n" +
                        "npm i regenerator-runtime core-js\n" +
                        "Next, create a babel configuration file, .babelrc under the root folder to configure the babel compiler.\n" +
                        "\n" +
                        "{\n" +
                        "   \"presets\": [\n" +
                        "      [\n" +
                        "         \"@babel/preset-env\",\n" +
                        "         {\n" +
                        "            \"useBuiltIns\": \"usage\",\n" +
                        "            \"corejs\": 3,\n" +
                        "            \"targets\": \"> 0.25%, not dead\"\n" +
                        "         }\n" +
                        "      ],\n" +
                        "      \"@babel/preset-react\"\n" +
                        "   ],\n" +
                        "   \"plugins\": [\n" +
                        "      \"@babel/plugin-proposal-class-properties\"\n" +
                        "   ]\n" +
                        "}\n" +
                        "Next, create a rollup.config.js file in the root folder to configure the rollup bundler.\n" +
                        "\n" +
                        "import babel from '@rollup/plugin-babel';\n" +
                        "import resolve from '@rollup/plugin-node-resolve';\n" +
                        "import commonjs from '@rollup/plugin-commonjs';\n" +
                        "import replace from '@rollup/plugin-replace';\n" +
                        "import serve from 'rollup-plugin-serve';\n" +
                        "import livereload from 'rollup-plugin-livereload';\n" +
                        "import postcss from 'rollup-plugin-postcss'\n" +
                        "\n" +
                        "export default {\n" +
                        "   input: 'src/index.js',\n" +
                        "   output: {\n" +
                        "      file: 'public/index.js',\n" +
                        "      format: 'iife',\n" +
                        "   },\n" +
                        "   plugins: [\n" +
                        "      commonjs({\n" +
                        "         include: [\n" +
                        "            'node_modules/**',\n" +
                        "         ],\n" +
                        "         exclude: [\n" +
                        "            'node_modules/process-es6/**',\n" +
                        "         ],\n" +
                        "      }),\n" +
                        "      resolve(),\n" +
                        "      babel({\n" +
                        "         exclude: 'node_modules/**'\n" +
                        "      }),\n" +
                        "      replace({\n" +
                        "         'process.env.NODE_ENV': JSON.stringify('production'),\n" +
                        "      }),\n" +
                        "      postcss({\n" +
                        "         autoModules: true\n" +
                        "      }),\n" +
                        "      livereload('public'),\n" +
                        "      serve({\n" +
                        "         contentBase: 'public',\n" +
                        "         port: 3000,\n" +
                        "         open: true,\n" +
                        "      }), // index.html should be in root of project\n" +
                        "   ]\n" +
                        "}\n" +
                        "Next, update the package.json and include our entry point (public/index.js and public/styles.css) and command to build and run the application.\n" +
                        "\n" +
                        "...\n" +
                        "\"main\": \"public/index.js\",\n" +
                        "\"style\": \"public/styles.css\",\n" +
                        "\"files\": [\n" +
                        "   \"public\"\n" +
                        "],\n" +
                        "\"scripts\": {\n" +
                        "   \"start\": \"rollup -c -w\",\n" +
                        "   \"build\": \"rollup\"\n" +
                        "},\n" +
                        "...\n" +
                        "Next, create a src folder in the root directory of the application, which will hold all the source code of the application.\n" +
                        "\n" +
                        "Next, create a folder, components under src to include our React components. The idea is to create two files, <component>.js to write the component logic and <component.css> to include the component specific styles.\n" +
                        "\n" +
                        "The final structure of the application will be as follows −\n" +
                        "\n" +
                        "|-- package-lock.json\n" +
                        "|-- package.json\n" +
                        "|-- rollup.config.js\n" +
                        "|-- .babelrc\n" +
                        "`-- public\n" +
                        "   |-- index.html\n" +
                        "`-- src\n" +
                        "   |-- index.js\n" +
                        "   `-- components\n" +
                        "   |  |-- mycom.js\n" +
                        "   |  |-- mycom.css\n" +
                        "Let us create a new component, HelloWorld to confirm our setup is working fine. Create a file, HelloWorld.js under components folder and write a simple component to emit Hello World message.\n" +
                        "\n" +
                        "import React from \"react\";\n" +
                        "\n" +
                        "class HelloWorld extends React.Component {\n" +
                        "   render() {\n" +
                        "      return (\n" +
                        "         <div>\n" +
                        "            <h1>Hello World!</h1>\n" +
                        "         </div>\n" +
                        "      );\n" +
                        "   }\n" +
                        "}\n" +
                        "export default HelloWorld;\n" +
                        "Next, create our main file, index.js under src folder and call our newly created component.\n" +
                        "\n" +
                        "import React from 'react';\n" +
                        "import ReactDOM from 'react-dom';\n" +
                        "import HelloWorld from './components/HelloWorld';\n" +
                        "\n" +
                        "ReactDOM.render(\n" +
                        "   <React.StrictMode>\n" +
                        "      <HelloWorld />\n" +
                        "   </React.StrictMode>,\n" +
                        "   document.getElementById('root')\n" +
                        ");\n" +
                        "Next, create a public folder in the root directory.\n" +
                        "\n" +
                        "Next, create a html file, index.html (under public folder*), which will be our entry point of the application.\n" +
                        "\n" +
                        "<!DOCTYPE html>\n" +
                        "<html lang=\"en\">\n" +
                        "   <head>\n" +
                        "      <meta charset=\"utf-8\">\n" +
                        "      <title>Expense Manager :: Rollup version</title>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <div id=\"root\"></div>\n" +
                        "      <script type=\"text/JavaScript\" src=\"./index.js\"></script>\n" +
                        "   </body>\n" +
                        "</html>\n" +
                        "Next, build and run the application.\n" +
                        "\n" +
                        "npm start\n" +
                        "The npm build command will execute the rollup and bundle our application into a single file, dist/index.js file and start serving the application. The dev command will recompile the code whenever the source code is changed and also reload the changes in the browser.",
                "> expense-manager-rollup@1.0.0 build /path/to/your/workspace/expense-manager-rollup \n" +
                        "> rollup -c \n" +
                        "rollup v2.36.1 \n" +
                        "bundles src/index.js → dist\\index.js... \n" +
                        "LiveReload enabled \n" +
                        "http://localhost:10001 -> /path/to/your/workspace/expense-manager-rollup/dist \n" +
                        "created dist\\index.js in 4.7s \n" +
                        "\n" +
                        "waiting for changes...",
                "Next, open the browser and enter http://localhost:3000 in the address bar and press enter."
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Using Parcel bundler",
                "Parcel is fast bundler with zero configuration. It expects just the entry point of the application and it will resolve the dependency itself and bundle the application. Let us learn how to use parcel bundler in this chapter.\n" +
                        "\n" +
                        "First, install the parcel bundler.\n" +
                        "\n" +
                        "npm install -g parcel-bundler\n" +
                        "Open a terminal and go to your workspace.\n" +
                        "\n" +
                        "cd /go/to/your/workspace\n" +
                        "Next, create a folder, expense-manager-parcel and move to newly created folder. Also, open the folder in your favorite editor or IDE.\n" +
                        "\n" +
                        "mkdir expense-manager-parcel \n" +
                        "cd expense-manager-parcel\n" +
                        "Next, create and initialize the project.\n" +
                        "\n" +
                        "npm init -y\n" +
                        "Next, install React libraries (react and react-dom).\n" +
                        "\n" +
                        "npm install react@^17.0.0 react-dom@^17.0.0 --save\n" +
                        "Next, install babel and its preset libraries as development dependency.\n" +
                        "\n" +
                        "npm install @babel/preset-env @babel/preset-react @babel/core @babel/plugin-proposal-class-properties -D\n" +
                        "Next, create a babel configuration file, .babelrc under the root folder to configure the babel compiler.\n" +
                        "\n" +
                        "{\n" +
                        "   \"presets\": [\n" +
                        "      \"@babel/preset-env\",\n" +
                        "      \"@babel/preset-react\"\n" +
                        "   ],\n" +
                        "   \"plugins\": [\n" +
                        "      \"@babel/plugin-proposal-class-properties\"\n" +
                        "   ]\n" +
                        "}\n" +
                        "Next, update the package.json and include our entry point (src/index.js) and commands to build and run the application.\n" +
                        "\n" +
                        "... \n" +
                        "\"main\": \"src/index.js\", \n" +
                        "\"scripts\": {\n" +
                        "   \"start\": \"parcel public/index.html\",\n" +
                        "   \"build\": \"parcel build public/index.html --out-dir dist\" \n" +
                        "},\n" +
                        "...\n" +
                        "Next, create a src folder in the root directory of the application, which will hold all the source code of the application.\n" +
                        "\n" +
                        "Next, create a folder, components under src to include our React components. The idea is to create two files, <component>.js to write the component logic and <component.css> to include the component specific styles.\n" +
                        "\n" +
                        "The final structure of the application will be as follows −\n" +
                        "\n" +
                        "|-- package-lock.json\n" +
                        "|-- package.json\n" +
                        "|-- .babelrc\n" +
                        "`-- public\n" +
                        "   |-- index.html\n" +
                        "`-- src\n" +
                        "   |-- index.js\n" +
                        "   `-- components\n" +
                        "   |  |-- mycom.js\n" +
                        "   |  |-- mycom.css\n" +
                        "Let us create a new component, HelloWorld to confirm our setup is working fine. Create a file, HelloWorld.js under components folder and write a simple component to emit Hello World message.\n" +
                        "\n" +
                        "import React from \"react\";\n" +
                        "\n" +
                        "class HelloWorld extends React.Component {\n" +
                        "   render() {\n" +
                        "      return (\n" +
                        "         <div>\n" +
                        "            <h1>Hello World!</h1>\n" +
                        "         </div>\n" +
                        "      );\n" +
                        "   }\n" +
                        "}\n" +
                        "export default HelloWorld;\n" +
                        "Next, create our main file, index.js under src folder and call our newly created component.\n" +
                        "\n" +
                        "import React from 'react';\n" +
                        "import ReactDOM from 'react-dom';\n" +
                        "import HelloWorld from './components/HelloWorld';\n" +
                        "\n" +
                        "ReactDOM.render(\n" +
                        "   <React.StrictMode>\n" +
                        "      <HelloWorld />\n" +
                        "   </React.StrictMode>,\n" +
                        "   document.getElementById('root')\n" +
                        ");\n" +
                        "Next, create a public folder in the root directory.\n" +
                        "\n" +
                        "Next, create a html file, index.html (in the public folder), which will be our entry point of the application.\n" +
                        "\n" +
                        "<!DOCTYPE html>\n" +
                        "<html lang=\"en\">\n" +
                        "   <head>\n" +
                        "      <meta charset=\"utf-8\">\n" +
                        "      <title>Expense Manager :: Parcel version</title>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      <div id=\"root\"></div>\n" +
                        "      <script type=\"text/JavaScript\" src=\"../src/index.js\"></script>\n" +
                        "   </body>\n" +
                        "</html>\n" +
                        "Next, build and run the application.\n" +
                        "\n" +
                        "npm start\n" +
                        "The npm build command will execute the parcel command. It will bundle and serve the application on the fly. It recompiles whenever the source code is changed and also reload the changes in the browser.\n" +
                        "\n" +
                        "> expense-manager-parcel@1.0.0 dev /go/to/your/workspace/expense-manager-parcel \n" +
                        "> parcel index.html Server running at http://localhost:1234 \n" +
                        "√ Built in 10.41s.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //ReactJs JSX
    private static List<LearnDetailsModel> ReactJsJSX() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "JSX",
                "As we learned earlier, React JSX is an extension to JavaScript. It enables developer to create virtual DOM using XML syntax. It compiles down to pure JavaScript (React.createElement function calls). Since it compiles to JavaScript, it can be used inside any valid JavaScript code. For example, below codes are perfectly valid.\n" +
                        "\n" +
                        "Assign to a variable.\n" +
                        "var greeting = <h1>Hello React!</h1>\n" +
                        "Assign to a variable based on a condition.\n" +
                        "var canGreet = true; \n" +
                        "if(canGreet) { \n" +
                        "   greeting = <h1>Hello React!</h1> \n" +
                        "}\n" +
                        "Can be used as return value of a function.\n" +
                        "function Greeting() { \n" +
                        "   return <h1>Hello React!</h1> \n" +
                        "   \n" +
                        "} \n" +
                        "greeting = Greeting()\n" +
                        "Can be used as argument of a function.\n" +
                        "function Greet(message) { \n" +
                        "   ReactDOM.render(message, document.getElementById('react-app') \n" +
                        "} \n" +
                        "Greet(<h1>Hello React!</h1>)",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Expressions",
                "JSX supports expression in pure JavaScript syntax. Expression has to be enclosed inside the curly braces, { }. Expression can contain all variables available in the context, where the JSX is defined. Let us create simple JSX with expression.",
                "<script type=\"text/babel\">\n" +
                        "   var cTime = new Date().toTimeString();\n" +
                        "   ReactDOM.render(\n" +
                        "      <div><p>The current time is {cTime}</p></div>, \n" +
                        "      document.getElementById('react-app') );\n" +
                        "</script>",
                "The Current time is 21:19:56 GMT+0(USA Standard Time)"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Functions",
                "JSX supports user defined JavaScript function. Function usage is similar to expression. Let us create a simple function and use it inside JSX.",
                "<script type=\"text/babel\">\n" +
                        "   var cTime = new Date().toTimeString();\n" +
                        "   ReactDOM.render(\n" +
                        "      <div><p>The current time is {cTime}</p></div>, \n" +
                        "      document.getElementById('react-app') \n" +
                        "   );\n" +
                        "</script>",
                "The Current time is 21:20:56 GMT+0(USA Standard Time)"
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Attributes",
                "JSX supports HTML like attributes. All HTML tags and its attributes are supported. Attributes has to be specified using camelCase convention (and it follows JavaScript DOM API) instead of normal HTML attribute name. For example, class attribute in HTML has to be defined as className. The following are few other examples −\n" +
                        "\n" +
                        "htmlFor instead of for\n" +
                        "tabIndex instead of tabindex\n" +
                        "onClick instead of onclick",
                "<style>\n" +
                        "   .red { color: red }\n" +
                        "</style>\n" +
                        "<script type=\"text/babel\">\n" +
                        "   function getCurrentTime() {\n" +
                        "      return new Date().toTimeString();\n" +
                        "   }\n" +
                        "   ReactDOM.render(\n" +
                        "      <div>\n" +
                        "         <p>The current time is <span className=\"red\">{getCurrentTime()}</span></p>\n" +
                        "      </div>,\n" +
                        "      document.getElementById('react-app') \n" +
                        "   );\n" +
                        "</script>",
                "The Current time is 21:21:56 GMT+0(USA Standard Time)"
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Expression in attributes",
                "JSX supports expression to be specified inside the attributes. In attributes, double quote should not be used along with expression. Either expression or string using double quote has to be used. The above example can be changed to use expression in attributes.",
                "<style>\n" +
                        "   .red { color: red }\n" +
                        "</style>\n" +
                        "\n" +
                        "<script type=\"text/babel\">\n" +
                        "   function getCurrentTime() {\n" +
                        "      return new Date().toTimeString();\n" +
                        "   }\n" +
                        "   var class_name = \"red\";\n" +
                        "   ReactDOM.render(\n" +
                        "      <div>\n" +
                        "         <p>The current time is <span className={class_name}>{getCurrentTime()}</span></p>\n" +
                        "      </div>, \n" +
                        "      document.getElementById('react-app') \n" +
                        "   );\n" +
                        "</script>",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }

    //ReactJs Component
    private static List<LearnDetailsModel> ReactJsComponent() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Component",
                "React component is the building block of a React application. Let us learn how to create a new React component and the features of React components in this chapter.\n" +
                        "\n" +
                        "A React component represents a small chunk of user interface in a webpage. The primary job of a React component is to render its user interface and update it whenever its internal state is changed. In addition to rendering the UI, it manages the events belongs to its user interface. To summarize, React component provides below functionalities.\n" +
                        "\n" +
                        "Initial rendering of the user interface.\n" +
                        "Management and handling of events.\n" +
                        "Updating the user interface whenever the internal state is changed.\n" +
                        "React component accomplish these feature using three concepts −\n" +
                        "\n" +
                        "Properties − Enables the component to receive input.\n" +
                        "\n" +
                        "Events − Enable the component to manage DOM events and end-user interaction.\n" +
                        "\n" +
                        "State − Enable the component to stay stateful. Stateful component updates its UI with respect to its state.\n" +
                        "\n" +
                        "Let us learn all the concept one-by-one in the upcoming chapters.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Creating a React component",
                "React library has two component types. The types are categorized based on the way it is being created.\n" +
                        "\n" +
                        "Function component − Uses plain JavaScript function.\n" +
                        "ES6 class component − Uses ES6 class.\n" +
                        "The core difference between function and class component are −\n" +
                        "\n" +
                        "Function components are very minimal in nature. Its only requirement is to return a React element.\n" +
                        "\n" +
                        "function Hello() { \n" +
                        "   return '<div>Hello</div>' \n" +
                        "}\n" +
                        "The same functionality can be done using ES6 class component with little extra coding.\n" +
                        "\n" +
                        "class ExpenseEntryItem extends React.Component {         \n" +
                        "   render() { \n" +
                        "      return ( \n" +
                        "         <div>Hello</div> \n" +
                        "      ); \n" +
                        "   }\n" +
                        "}\n" +
                        "Class components supports state management out of the box whereas function components does not support state management. But, React provides a hook, useState() for the function components to maintain its state.\n" +
                        "\n" +
                        "Class component have a life cycle and access to each life cycle events through dedicated callback apis. Function component does not have life cycle. Again, React provides a hook, useEffect() for the function component to access different stages of the component.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Creating a class component",
                "Let us create a new React component (in our expense-manager app), ExpenseEntryItem to showcase an expense entry item. Expense entry item consists of name, amount, date and category. The object representation of the expense entry item is −\n" +
                        "\n" +
                        "{ \n" +
                        "   'name': 'Mango juice', \n" +
                        "   'amount': 30.00, \n" +
                        "   'spend_date': '2020-10-10' \n" +
                        "   'category': 'Food', \n" +
                        "}\n" +
                        "Open expense-manager application in your favorite editor.\n" +
                        "\n" +
                        "Next, create a file, ExpenseEntryItem.css under src/components folder to style our component.\n" +
                        "\n" +
                        "Next, create a file, ExpenseEntryItem.js under src/components folder by extending React.Component.\n" +
                        "\n" +
                        "import React from 'react'; \n" +
                        "import './ExpenseEntryItem.css'; \n" +
                        "class ExpenseEntryItem extends React.Component { \n" +
                        "}\n" +
                        "Next, create a method render inside the ExpenseEntryItem class.\n" +
                        "\n" +
                        "class ExpenseEntryItem extends React.Component { \n" +
                        "   render() { \n" +
                        "   } \n" +
                        "}\n" +
                        "Next, create the user interface using JSX and return it from render method.\n" +
                        "\n" +
                        "class ExpenseEntryItem extends React.Component {\n" +
                        "   render() {\n" +
                        "      return (\n" +
                        "         <div>\n" +
                        "            <div><b>Item:</b> <em>Mango Juice</em></div>\n" +
                        "            <div><b>Amount:</b> <em>30.00</em></div>\n" +
                        "            <div><b>Spend Date:</b> <em>2020-10-10</em></div>\n" +
                        "            <div><b>Category:</b> <em>Food</em></div>\n" +
                        "         </div>\n" +
                        "      );\n" +
                        "   }\n" +
                        "}\n" +
                        "Next, specify the component as default export class.\n" +
                        "\n" +
                        "import React from 'react';\n" +
                        "import './ExpenseEntryItem.css';\n" +
                        "\n" +
                        "class ExpenseEntryItem extends React.Component {\n" +
                        "   render() {\n" +
                        "      return (\n" +
                        "         <div>\n" +
                        "            <div><b>Item:</b> <em>Mango Juice</em></div>\n" +
                        "            <div><b>Amount:</b> <em>30.00</em></div>\n" +
                        "            <div><b>Spend Date:</b> <em>2020-10-10</em></div>\n" +
                        "            <div><b>Category:</b> <em>Food</em></div>\n" +
                        "         </div>\n" +
                        "      );\n" +
                        "   }\n" +
                        "}\n" +
                        "export default ExpenseEntryItem;\n" +
                        "Now, we successfully created our first React component. Let us use our newly created component in index.js.\n" +
                        "\n" +
                        "import React from 'react';\n" +
                        "import ReactDOM from 'react-dom';\n" +
                        "import ExpenseEntryItem from './components/ExpenseEntryItem'\n" +
                        "\n" +
                        "ReactDOM.render(\n" +
                        "   <React.StrictMode>\n" +
                        "      <ExpenseEntryItem />\n" +
                        "   </React.StrictMode>,\n" +
                        "   document.getElementById('root')\n" +
                        ");",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Creating a function component",
                "React component can also be created using plain JavaScript function but with limited features. Function based React component does not support state management and other advanced features. It can be used to quickly create a simple component.\n" +
                        "\n" +
                        "The above ExpenseEntryItem can be rewritten in function as specified below −",
                "function ExpenseEntryItem() {\n" +
                        "   return (\n" +
                        "      <div>\n" +
                        "         <div><b>Item:</b> <em>Mango Juice</em></div>\n" +
                        "         <div><b>Amount:</b> <em>30.00</em></div>\n" +
                        "         <div><b>Spend Date:</b> <em>2020-10-10</em></div>\n" +
                        "         <div><b>Category:</b> <em>Food</em></div>\n" +
                        "      </div>\n" +
                        "   );\n" +
                        "}",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        return list;
    }

    //ReactJs Styling
    private static List<LearnDetailsModel> ReactJsStyling() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Styling",
                "In general, React allows component to be styled using CSS class through className attribute. Since, the React JSX supports JavaScript expression, a lot of common CSS methodology can be used. Some of the top options are as follows −\n" +
                        "\n" +
                        "CSS stylesheet − Normal CSS styles along with className\n" +
                        "\n" +
                        "Inline styling − CSS styles as JavaScript objects along with camelCase properties.\n" +
                        "\n" +
                        "CSS Modules − Locally scoped CSS styles.\n" +
                        "\n" +
                        "Styled component − Component level styles.\n" +
                        "\n" +
                        "Sass stylesheet − Supports Sass based CSS styles by converting the styles to normal css at build time.\n" +
                        "\n" +
                        "Post processing stylesheet − Supports Post processing styles by converting the styles to normal css at build time.\n" +
                        "\n" +
                        "Let use learn how to apply the three important methodology to style our component in this chapter.\n" +
                        "\n" +
                        "CSS Stylesheet\n" +
                        "\n" +
                        "Inline Styling\n" +
                        "\n" +
                        "CSS Modules",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "CSS Stylesheet",
                "CSS stylesheet is usual, common and time-tested methodology. Simply create a CSS stylesheet for a component and enter all your styles for that particular component. Then, in the component, use className to refer the styles.\n" +
                        "\n" +
                        "Let us style our ExpenseEntryItem component.\n" +
                        "\n" +
                        "Open expense-manager application in your favorite editor.\n" +
                        "\n" +
                        "Next, open ExpenseEntryItem.css file and add few styles.\n" +
                        "\n" +
                        "div.itemStyle { \n" +
                        "   color: brown; \n" +
                        "   font-size: 14px; \n" +
                        "}",
                "import React from 'react';\n" +
                        "import './ExpenseEntryItem.css';\n" +
                        "\n" +
                        "class ExpenseEntryItem extends React.Component {\n" +
                        "   render() {\n" +
                        "      return (\n" +
                        "         <div className=\"itemStyle\">\n" +
                        "            <div><b>Item:</b> <em>Mango Juice</em></div>\n" +
                        "            <div><b>Amount:</b> <em>30.00</em></div>\n" +
                        "            <div><b>Spend Date:</b> <em>2020-10-10</em></div>\n" +
                        "            <div><b>Category:</b> <em>Food</em></div>\n" +
                        "         </div>\n" +
                        "      );\n" +
                        "   }\n" +
                        "}\n" +
                        "export default ExpenseEntryItem;",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Inline Styling",
                "Inline Styling is one of the safest ways to style the React component. It declares all the styles as JavaScript objects using DOM based css properties and set it to the component through style attributes.\n" +
                        "\n" +
                        "Let us add inline styling in our component.\n" +
                        "\n" +
                        "Open expense-manager application in your favorite editor and modify ExpenseEntryItem.js file in the src folder. Declare a variable of type object and set the styles.\n" +
                        "\n" +
                        "itemStyle = {\n" +
                        "   color: 'brown', \n" +
                        "   fontSize: '14px' \n" +
                        "}\n" +
                        "Here, fontSize represent the css property, font-size. All css properties can be used by representing it in camelCase format.",
                "render() {\n" +
                        "   return (\n" +
                        "      <div style={\n" +
                        "         {\n" +
                        "            color: 'brown',\n" +
                        "            fontSize: '14px'\n" +
                        "         }         \n" +
                        "      }>\n" +
                        "         <div><b>Item:</b> <em>Mango Juice</em></div>\n" +
                        "         <div><b>Amount:</b> <em>30.00</em></div>\n" +
                        "         <div><b>Spend Date:</b> <em>2020-10-10</em></div>\n" +
                        "         <div><b>Category:</b> <em>Food</em></div>\n" +
                        "      </div>\n" +
                        "   );\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "CSS Modules",
                "Css Modules provides safest as well as easiest way to define the style. It uses normal css stylesheet with normal syntax. While importing the styles, CSS modules converts all the styles into locally scoped styles so that the name conflicts will not happen. Let us change our component to use CSS modules\n" +
                        "\n" +
                        "Open expense-manager application in your favorite editor.\n" +
                        "\n" +
                        "Next, create a new stylesheet, ExpenseEntryItem.module.css file under src/components folder and write regular css styles.\n" +
                        "\n" +
                        "div.itemStyle {\n" +
                        "   color: 'brown'; \n" +
                        "   font-size: 14px; \n" +
                        "}\n" +
                        "Here, file naming convention is very important. React toolchain will pre-process the css files ending with .module.css through CSS Module. Otherwise, it will be considered as a normal stylesheet.\n" +
                        "\n" +
                        "Next, open ExpenseEntryItem.js file in the src/component folder and import the styles.\n" +
                        "\n" +
                        "import styles from './ExpenseEntryItem.module.css'\n" +
                        "Next, use the styles as JavaScript expression in the component.\n" +
                        "\n" +
                        "<div className={styles.itemStyle}>\n" +
                        "Now, we have successfully used the CSS modules in our application.\n" +
                        "\n" +
                        "The final and complete code is −",
                "import React from 'react';\n" +
                        "import './ExpenseEntryItem.css';\n" +
                        "import styles from './ExpenseEntryItem.module.css'\n" +
                        "\n" +
                        "class ExpenseEntryItem extends React.Component {\n" +
                        "   render() {\n" +
                        "      return (\n" +
                        "         <div className={styles.itemStyle} >\n" +
                        "            <div><b>Item:</b> <em>Mango Juice</em></div>\n" +
                        "            <div><b>Amount:</b> <em>30.00</em></div>\n" +
                        "            <div><b>Spend Date:</b> <em>2020-10-10</em></div>\n" +
                        "            <div><b>Category:</b> <em>Food</em></div>\n" +
                        "         </div>\n" +
                        "      );\n" +
                        "   }\n" +
                        "}\n" +
                        "export default ExpenseEntryItem;",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        return list;
    }

    //ReactJs Properties
    private static List<LearnDetailsModel> ReactJsProperties() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Properties (props)",
                "React enables developers to create dynamic and advanced component using properties. Every component can have attributes similar to HTML attributes and each attribute’s value can be accessed inside the component using properties (props).\n" +
                        "\n" +
                        "For example, Hello component with a name attribute can be accessed inside the component through this.props.name variable.\n" +
                        "\n" +
                        "<Hello name=\"React\" />\n" +
                        "// value of name will be \"Hello* const name = this.props.name\n" +
                        "React properties supports attribute’s value of different types. They are as follows,\n" +
                        "\n" +
                        "String\n" +
                        "Number\n" +
                        "Datetime\n" +
                        "Array\n" +
                        "List\n" +
                        "Objects\n" +
                        "Let us learn one by one in this chapter.\n" +
                        "\n" +
                        "Create a component using Properties\n" +
                        "\n" +
                        "Nested Components\n" +
                        "\n" +
                        "Use Component\n" +
                        "\n" +
                        "Component Collection",
                "",
                ""
        );
        list.add(l1);
        return list;
    }

    //ReactJs Events
    private static List<LearnDetailsModel> ReactJsEvents() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Adding Events",
                "React events are written in camelCase syntax:\n" +
                        "\n" +
                        "onClick instead of onclick.\n" +
                        "\n" +
                        "React event handlers are written inside curly braces:\n" +
                        "\n" +
                        "onClick={shoot}  instead of onClick=\"shoot()\".\n" +
                        "\n" +
                        "React:\n" +
                        "<button onClick={shoot}>Take the Shot!</button>\n" +
                        "HTML:\n" +
                        "<button onclick=\"shoot()\">Take the Shot!</button>",
                "function Football() {\n" +
                        "  const shoot = () => {\n" +
                        "    alert(\"Great Shot!\");\n" +
                        "  }\n" +
                        "\n" +
                        "  return (\n" +
                        "    <button onClick={shoot}>Take the shot!</button>\n" +
                        "  );\n" +
                        "}\n" +
                        "\n" +
                        "ReactDOM.render(<Football />, document.getElementById('root'));",
                "Great Shot!"
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Passing Arguments",
                "To pass an argument to an event handler, use an arrow function.",
                "function Football() {\n" +
                        "  const shoot = (a) => {\n" +
                        "    alert(a);\n" +
                        "  }\n" +
                        "\n" +
                        "  return (\n" +
                        "    <button onClick={() => shoot(\"Goal!\")}>Take the shot!</button>\n" +
                        "  );\n" +
                        "}\n" +
                        "\n" +
                        "ReactDOM.render(<Football />, document.getElementById('root'));",
                "Goal!"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "React Event Object",
                "Event handlers have access to the React event that triggered the function.\n" +
                        "\n" +
                        "In our example the event is the \"click\" event.",
                "function Football() {\n" +
                        "  const shoot = (a, b) => {\n" +
                        "    alert(b.type);\n" +
                        "    /*\n" +
                        "    'b' represents the React event that triggered the function,\n" +
                        "    in this case the 'click' event\n" +
                        "    */\n" +
                        "  }\n" +
                        "\n" +
                        "  return (\n" +
                        "    <button onClick={(event) => shoot(\"Goal!\", event)}>Take the shot!</button>\n" +
                        "  );\n" +
                        "}\n" +
                        "\n" +
                        "ReactDOM.render(<Football />, document.getElementById('root'));",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //ReactJs Conditional
    private static List<LearnDetailsModel> ReactJsConditional() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Conditional Rendering",
                "In React, you can conditionally render components.\n" +
                        "\n" +
                        "There are several ways to do this.\n" +
                        "\n" +
                        "if Statement\n" +
                        "We can use the if JavaScript operator to decide which component to render.",
                "function MissedGoal() {\n" +
                        "  return <h1>MISSED!</h1>;\n" +
                        "}\n" +
                        "\n" +
                        "function MadeGoal() {\n" +
                        "  return <h1>Goal!</h1>;\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Logical && Operator",
                "Another way to conditionally render a React component is by using the && operator.",
                "function Garage(props) {\n" +
                        "  const cars = props.cars;\n" +
                        "  return (\n" +
                        "    <>\n" +
                        "      <h1>Garage</h1>\n" +
                        "      {cars.length > 0 &&\n" +
                        "        <h2>\n" +
                        "          You have {cars.length} cars in your garage.\n" +
                        "        </h2>\n" +
                        "      }\n" +
                        "    </>\n" +
                        "  );\n" +
                        "}\n" +
                        "\n" +
                        "const cars = ['Ford', 'BMW', 'Audi'];\n" +
                        "ReactDOM.render(\n" +
                        "  <Garage cars={cars} />,\n" +
                        "  document.getElementById('root')\n" +
                        ");",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Ternary Operator",
                "Another way to conditionally render elements is by using a ternary operator.",
                "function Goal(props) {\n" +
                        "  const isGoal = props.isGoal;\n" +
                        "  return (\n" +
                        "    <>\n" +
                        "      { isGoal ? <MadeGoal/> : <MissedGoal/> }\n" +
                        "    </>\n" +
                        "  );\n" +
                        "}\n" +
                        "\n" +
                        "ReactDOM.render(\n" +
                        "  <Goal isGoal={false} />,\n" +
                        "  document.getElementById('root')\n" +
                        ");",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //ReactJs Lists
    private static List<LearnDetailsModel> ReactJsLists() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "React Lists",
                "In React, you will render lists with some type of loop.\n" +
                        "\n" +
                        "The JavaScript map() array method is generally the preferred method.\n" +
                        "\n" +
                        "If you need a refresher on the map() method, check out the ES6 section.",
                "function Car(props) {\n" +
                        "  return <li>I am a { props.brand }</li>;\n" +
                        "}\n" +
                        "\n" +
                        "function Garage() {\n" +
                        "  const cars = ['Ford', 'BMW', 'Audi'];\n" +
                        "  return (\n" +
                        "    <>\n" +
                        "      <h1>Who lives in my garage?</h1>\n" +
                        "      <ul>\n" +
                        "        {cars.map((car) => <Car brand={car} />)}\n" +
                        "      </ul>\n" +
                        "    </>\n" +
                        "  );\n" +
                        "}\n" +
                        "\n" +
                        "ReactDOM.render(<Garage />, document.getElementById('root'));",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Keys",
                "Keys allow React to keep track of elements. This way, if an item is updated or removed, only that item will be re-rendered instead of the entire list.\n" +
                        "\n" +
                        "Keys need to be unique to each sibling. But they can be duplicated globally.\n" +
                        "\n" +
                        "Generally, the key should be a unique ID assigned to each item. As a last resort, you can use the array index as a key.",
                "function Car(props) {\n" +
                        "  return <li>I am a { props.brand }</li>;\n" +
                        "}\n" +
                        "\n" +
                        "function Garage() {\n" +
                        "  const cars = [\n" +
                        "    {id: 1, brand: 'Ford'},\n" +
                        "    {id: 2, brand: 'BMW'},\n" +
                        "    {id: 3, brand: 'Audi'}\n" +
                        "  ];\n" +
                        "  return (\n" +
                        "    <>\n" +
                        "      <h1>Who lives in my garage?</h1>\n" +
                        "      <ul>\n" +
                        "        {cars.map((car) => <Car key={car.id} brand={car.brand} />)}\n" +
                        "      </ul>\n" +
                        "    </>\n" +
                        "  );\n" +
                        "}\n" +
                        "\n" +
                        "ReactDOM.render(<Garage />, document.getElementById('root'));",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //ReactJs Forms
    private static List<LearnDetailsModel> ReactJsForms() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Adding Forms in React",
                "Just like in HTML, React uses forms to allow users to interact with the web page." +
                        "\n\n" +
                        "You add a form with React like any other element:",
                "function MyForm() {\n" +
                        "  return (\n" +
                        "    <form>\n" +
                        "      <label>Enter your name:\n" +
                        "        <input type=\"text\" />\n" +
                        "      </label>\n" +
                        "    </form>\n" +
                        "  )\n" +
                        "}\n" +
                        "ReactDOM.render(<MyForm />, document.getElementById('root'));",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Handling Forms",
                "Handling forms is about how you handle the data when it changes value or gets submitted.\n" +
                        "\n" +
                        "In HTML, form data is usually handled by the DOM.\n" +
                        "\n" +
                        "In React, form data is usually handled by the components.\n" +
                        "\n" +
                        "When the data is handled by the components, all the data is stored in the component state.\n" +
                        "\n" +
                        "You can control changes by adding event handlers in the onChange attribute.\n" +
                        "\n" +
                        "We can use the useState Hook to keep track of each inputs value and provide a \"single source of truth\" for the entire application.",
                "import { useState } from \"react\";\n" +
                        "import ReactDOM from 'react-dom';\n" +
                        "\n" +
                        "function MyForm() {\n" +
                        "  const [name, setName] = useState(\"\");\n" +
                        "\n" +
                        "  return (\n" +
                        "    <form>\n" +
                        "      <label>Enter your name:\n" +
                        "        <input\n" +
                        "          type=\"text\" \n" +
                        "          value={name}\n" +
                        "          onChange={(e) => setName(e.target.value)}\n" +
                        "        />\n" +
                        "      </label>\n" +
                        "    </form>\n" +
                        "  )\n" +
                        "}\n" +
                        "\n" +
                        "ReactDOM.render(<MyForm />, document.getElementById('root'));",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Submitting Forms",
                "You can control the submit action by adding an event handler in the onSubmit attribute for the <form>:",
                "import { useState } from \"react\";\n" +
                        "import ReactDOM from 'react-dom';\n" +
                        "\n" +
                        "function MyForm() {\n" +
                        "  const [name, setName] = useState(\"\");\n" +
                        "\n" +
                        "  const handleSubmit = (event) => {\n" +
                        "    event.preventDefault();\n" +
                        "    alert('The name you entered was: ${name}')\n" +
                        "  }\n" +
                        "\n" +
                        "  return (\n" +
                        "    <form onSubmit={handleSubmit}>\n" +
                        "      <label>Enter your name:\n" +
                        "        <input \n" +
                        "          type=\"text\" \n" +
                        "          value={name}\n" +
                        "          onChange={(e) => setName(e.target.value)}\n" +
                        "        />\n" +
                        "      </label>\n" +
                        "      <input type=\"submit\" />\n" +
                        "    </form>\n" +
                        "  )\n" +
                        "}\n" +
                        "\n" +
                        "ReactDOM.render(<MyForm />, document.getElementById('root'));",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Multiple Input Fields",
                "You can control the values of more than one input field by adding a name attribute to each element.\n" +
                        "\n" +
                        "We will initialize our state with an empty object.\n" +
                        "\n" +
                        "To access the fields in the event handler use the event.target.name and event.target.value syntax.\n" +
                        "\n" +
                        "To update the state, use square brackets [bracket notation] around the property name.",
                "import { useState } from \"react\";\n" +
                        "import ReactDOM from \"react-dom\";\n" +
                        "\n" +
                        "function MyForm() {\n" +
                        "  const [inputs, setInputs] = useState({});\n" +
                        "\n" +
                        "  const handleChange = (event) => {\n" +
                        "    const name = event.target.name;\n" +
                        "    const value = event.target.value;\n" +
                        "    setInputs(values => ({...values, [name]: value}))\n" +
                        "  }\n" +
                        "\n" +
                        "  const handleSubmit = (event) => {\n" +
                        "    event.preventDefault();\n" +
                        "    alert(inputs);\n" +
                        "  }\n" +
                        "\n" +
                        "  return (\n" +
                        "    <form onSubmit={handleSubmit}>\n" +
                        "      <label>Enter your name:\n" +
                        "      <input \n" +
                        "        type=\"text\" \n" +
                        "        name=\"username\" \n" +
                        "        value={inputs.username || \"\"} \n" +
                        "        onChange={handleChange}\n" +
                        "      />\n" +
                        "      </label>\n" +
                        "      <label>Enter your age:\n" +
                        "        <input \n" +
                        "          type=\"number\" \n" +
                        "          name=\"age\" \n" +
                        "          value={inputs.age || \"\"} \n" +
                        "          onChange={handleChange}\n" +
                        "        />\n" +
                        "        </label>\n" +
                        "        <input type=\"submit\" />\n" +
                        "    </form>\n" +
                        "  )\n" +
                        "}\n" +
                        "\n" +
                        "ReactDOM.render(<MyForm />, document.getElementById('root'));",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Textarea",
                "The textarea element in React is slightly different from ordinary HTML.\n" +
                        "\n" +
                        "In HTML the value of a textarea was the text between the start tag <textarea> and the end tag </textarea>.",
                "import { useState } from \"react\";\n" +
                        "import ReactDOM from \"react-dom\";\n" +
                        "\n" +
                        "function MyForm() {\n" +
                        "  const [textarea, setTextarea] = useState(\n" +
                        "    \"The content of a textarea goes in the value attribute\"\n" +
                        "  );\n" +
                        "\n" +
                        "  const handleChange = (event) => {\n" +
                        "    setTextarea(event.target.value)\n" +
                        "  }\n" +
                        "\n" +
                        "  return (\n" +
                        "    <form>\n" +
                        "      <textarea value={textarea} onChange={handleChange} />\n" +
                        "    </form>\n" +
                        "  )\n" +
                        "}\n" +
                        "\n" +
                        "ReactDOM.render(<MyForm />, document.getElementById('root'));",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Select",
                "A drop down list, or a select box, in React is also a bit different from HTML.\n" +
                        "\n" +
                        "in HTML, the selected value in the drop down list was defined with the selected attribute:",
                "function MyForm() {\n" +
                        "  const [myCar, setMyCar] = useState(\"Volvo\");\n" +
                        "\n" +
                        "  const handleChange = (event) => {\n" +
                        "    setMyCar(event.target.value)\n" +
                        "  }\n" +
                        "\n" +
                        "  return (\n" +
                        "    <form>\n" +
                        "      <select value={myCar} onChange={handleChange}>\n" +
                        "        <option value=\"Ford\">Ford</option>\n" +
                        "        <option value=\"Volvo\">Volvo</option>\n" +
                        "        <option value=\"Fiat\">Fiat</option>\n" +
                        "      </select>\n" +
                        "    </form>\n" +
                        "  )\n" +
                        "}",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        return list;
    }

    //ReactJs Styling Sass
    private static List<LearnDetailsModel> ReactJsStylingSass() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Styling React Using Sass",
                "What is Sass\n" +
                        "Sass is a CSS pre-processor.\n" +
                        "\n" +
                        "Sass files are executed on the server and sends CSS to the browser.\n" +
                        "\n" +
                        "You can learn more about Sass in our Sass Tutorial.\n" +
                        "\n" +
                        "Can I use Sass?\n" +
                        "If you use the create-react-app in your project, you can easily install and use Sass in your React projects.\n" +
                        "\n" +
                        "Install Sass by running this command in your terminal:\n" +
                        "\n" +
                        ">npm i sass\n" +
                        "Now you are ready to include Sass files in your project!",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Create a Sass file",
                "Create a Sass file the same way as you create CSS files, but Sass files have the file extension .scss\n" +
                        "\n" +
                        "In Sass files you can use variables and other Sass functions:\n" +
                        "\n" +
                        "my-sass.scss:\n" +
                        "Create a variable to define the color of the text:\n" +
                        "\n" +
                        "$myColor: red;\n" +
                        "\n" +
                        "h1 {\n" +
                        "  color: $myColor;\n" +
                        "}" +
                        "\n\n" +
                        "Import the Sass file the same way as you imported a CSS file:",
                "import React from 'react';\n" +
                        "import ReactDOM from 'react-dom';\n" +
                        "import './my-sass.scss';\n" +
                        "\n" +
                        "const Header = () => {\n" +
                        "  return (\n" +
                        "    <>\n" +
                        "      <h1>Hello Style!</h1>\n" +
                        "      <p>Add a little style!.</p>\n" +
                        "    </>\n" +
                        "  );\n" +
                        "}\n" +
                        "\n" +
                        "ReactDOM.render(<Header />, document.getElementById('root'));",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //ReactJs Hooks
    private static List<LearnDetailsModel> ReactJsHooks() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is a Hook?",
                "Hooks allow us to \"hook\" into React features such as state and lifecycle methods." +
                        "\n" +
                        "Here is an example of a Hook. Don't worry if it doesn't make sense." +
                        "\n\n" +
                        "You must import Hooks from react.\n" +
                        "\n" +
                        "Here we are using the useState Hook to keep track of the application state.\n" +
                        "\n" +
                        "State generally refers to application data or properties that need to be tracked.",
                "import React, { useState } from \"react\";\n" +
                        "import ReactDOM from \"react-dom\";\n" +
                        "\n" +
                        "function FavoriteColor() {\n" +
                        "  const [color, setColor] = useState(\"red\");\n" +
                        "\n" +
                        "  return (\n" +
                        "    <>\n" +
                        "      <h1>My favorite color is {color}!</h1>\n" +
                        "      <button\n" +
                        "        type=\"button\"\n" +
                        "        onClick={() => setColor(\"blue\")}\n" +
                        "      >Blue</button>\n" +
                        "      <button\n" +
                        "        type=\"button\"\n" +
                        "        onClick={() => setColor(\"red\")}\n" +
                        "      >Red</button>\n" +
                        "      <button\n" +
                        "        type=\"button\"\n" +
                        "        onClick={() => setColor(\"pink\")}\n" +
                        "      >Pink</button>\n" +
                        "      <button\n" +
                        "        type=\"button\"\n" +
                        "        onClick={() => setColor(\"green\")}\n" +
                        "      >Green</button>\n" +
                        "    </>\n" +
                        "  );\n" +
                        "}\n" +
                        "\n" +
                        "ReactDOM.render(<FavoriteColor />, document.getElementById('root'));",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Hook Rules",
                "There are 3 rules for hooks:\n" +
                        "\n" +
                        "Hooks can only be called inside React function components.\n" +
                        "Hooks can only be called at the top level of a component.\n" +
                        "Hooks cannot be conditional\n" +
                        "Note: Hooks will not work in React class components.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Custom Hooks",
                "If you have stateful logic that needs to be reused in several components, you can build your own custom Hooks.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //EmberJs
    //EmberJs Introduction
    private static List<LearnDetailsModel> EmberJsIntroduction() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is Ember.js?",
                "Ember.js is an open source, free JavaScript client-side framework used for developing web applications. It allows building client side JavaScript applications by providing a complete solution which contains data management and an application flow.\n" +
                        "\n" +
                        "The original name of Ember.js was SproutCore MVC framework. It was developed by Yehuda Katz and initially released on in December 2011. The stable release of Ember.js is 2.10.0 and this was released on November 28, 2016.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Why Ember.js?",
                "Consider the following points to understand the use of Ember.js −\n" +
                        "\n" +
                        "Ember.js is an open source JavaScript framework under MIT license.\n" +
                        "\n" +
                        "It provides the new binding syntax using the HTMLBars template engine which is a superset of the Handerlbars templating engine.\n" +
                        "\n" +
                        "It provides the Glimmer rendering engine to increase the rendering speed.\n" +
                        "\n" +
                        "It provides the Command Line Interface utility that integrates Ember patterns into development process and focuses easily on the developer productivity.\n" +
                        "\n" +
                        "It supports data binding to create the link between two properties and when one property changes, the other property will get upgraded with the new value.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Features of Ember.js",
                "Following are the some of the most prominent features of Ember.js −\n" +
                        "\n" +
                        "Ember.js is used for creating reusable and maintainable JavaScript web applications.\n" +
                        "\n" +
                        "Ember.js has HTML and CSS at the core of the development model.\n" +
                        "\n" +
                        "It provides the instance initializers.\n" +
                        "\n" +
                        "The routes are core features of the Ember.js which are used for managing the URL's.\n" +
                        "\n" +
                        "Ember.js provides Ember Inspector tool for debugging Ember applications.\n" +
                        "\n" +
                        "Ember.js uses templates that help to automatically update the model, if the content of applications gets changed.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Audience",
                "This tutorial is designed for software programmers who aspire to learn the basics of EmberJS and its programming concepts in simple and easy ways. This tutorial will give you enough understanding on the components of EmberJS with suitable examples.",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Prerequisites",
                "Before proceeding with this tutorial, you should have a basic understanding of HTML, CSS, JavaScript, Document Object Model (DOM) and any text editor. As we are going to develop web-based applications using EmberJS, it will be good if you have a good understanding on how the Internet and the web-based applications work.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }

    //EmberJs Core Concepts
    private static List<LearnDetailsModel> EmberJsCoreConcepts() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Core Concepts",
                "Ember.js has the following core concepts −\n" +
                        "\n" +
                        "Router\n" +
                        "Templates\n" +
                        "Models\n" +
                        "Components",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Router and Route Handlers",
                "The URL loads the app by entering the URL in the address bar and user will click a link within the app. The Ember uses the router to map the URL to a route handler. The router matches the existing URL to the route which is then used for loading data, displaying the templates and setting up an application state.\n" +
                        "\n" +
                        "The Route handler performs the following actions −\n" +
                        "\n" +
                        "It provides the template.\n" +
                        "\n" +
                        "It defines the model that will be accessible to the template.\n" +
                        "\n" +
                        "If there is no permission for the user to visit a particular part of the app, then the router will redirect to a new route.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Templates",
                "Templates are powerful UI for the end-users. Ember template provides user interface look of an application which uses the syntax of Handlebars templates. It builds the front-end application, which is like the regular HTML. It also supports the regular expression and dynamically updates the expression.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Model",
                "The route handlers render the model that persists information to the web server. It manipulates the data stored in the database. The model is the simple class that extends the functionality of the Ember Data. Ember Data is a library that is tightly coupled with Ember.js to manipulate with the data stored in the database.",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Components",
                "The component controls the user interface behavior which includes two parts −\n" +
                        "\n" +
                        "a template which is written in JavaScript\n" +
                        "\n" +
                        "a source file which is written in JavaScript that provides behavior of the components.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }

    //EmberJs Application
    private static List<LearnDetailsModel> EmberJsApplication() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Creating and Running Application",
                "Creating Application\n" +
                        "Let us create one simple app using Ember.js. First create one folder where you create your applications. For instance, if you have created the \"emberjs-app\" folder, then navigate to this folder as −\n" +
                        "\n" +
                        "$ cd ~/emberjs-app\n" +
                        "Inside the \"emberjs=app\" folder, create a new project by using the new command −\n" +
                        "\n" +
                        "$ ember new demo-app\n" +
                        "When you create a project, new command provides the following directory structure with files and directories −\n" +
                        "\n" +
                        "|-- app\n" +
                        "|-- bower_components\n" +
                        "|-- config\n" +
                        "|-- dist\n" +
                        "|-- node_modules\n" +
                        "|-- public\n" +
                        "|-- tests\n" +
                        "|-- tmp\n" +
                        "|-- vendor\n" +
                        "\n" +
                        "bower.json\n" +
                        "ember-cli-build.js\n" +
                        "package.json\n" +
                        "README.md\n" +
                        "testem.js\n" +
                        "app − It specifies the folders and files of models, routes, components, templates and styles.\n" +
                        "\n" +
                        "bower_components / bower.json − It is used for managing the components such as HTML, CSS, JavaScript, image files etc and can be installed by using the npm. The bower_components directory contains all the Bower components and bower.json contains the list of dependencies which are installed by Ember, Ember CLI Shims and QUnit.\n" +
                        "\n" +
                        "config − It contains the environment.js directory which is used for configuring the settings of an application.\n" +
                        "\n" +
                        "dist − It includes the output files which are deployed when building the app.\n" +
                        "\n" +
                        "node_modules / package.json − NPM is a node package manager for Node.js which is used for installing, sharing and managing the dependencies in the projects. The package.json file includes the current npm dependencies of an application and the listed packages get installed in the node_modules directory.\n" +
                        "\n" +
                        "public − It includes assets like images, fonts, etc.\n" +
                        "\n" +
                        "vendor − It is a directory in which the front-end dependencies such as JavaScript, CSS are not controlled by Bower go.\n" +
                        "\n" +
                        "tests / testem.js − The automated tests are stored under the tests folder and the test runner testem of Ember CLI's is arranged in testem.js.\n" +
                        "\n" +
                        "tmp − It contains the temporary files of Ember CLI.\n" +
                        "\n" +
                        "ember-cli-build.js − It specifies how to build the app by using the Ember CLI.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Running Application",
                "To run the application, navigate to the newly created project directory −\n" +
                        "\n" +
                        "$ cd demo-app\n" +
                        "We have created the new project and it is ready to run with the command given below −\n" +
                        "\n" +
                        "$ ember server\n" +
                        "Now open the browser and navigate to http://localhost:4200/. You will get the Ember Welcome page.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //EmberJs Object Model
    private static List<LearnDetailsModel> EmberJsObjectModel() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Object Model",
                "In Ember.js, all objects are derived from the Ember.Object. Object-oriented analysis and design technique is called object modeling. The Ember.Object supports features such as mixins and constructor methods by using the class system. Ember uses the Ember.Enumerable interface to extend the JavaScript Array prototype to give the observation changes for arrays and also uses the formatting and localization methods to extend the String prototype.\n" +
                        "\n" +
                        "The following table lists down the different types of object model in Ember.js along with their description −" +
                        "\n\n" +
                        "1. Classes and Instances\n" +
                        "Class is a template or blue print, that has a collection of variables and functions, whereas instances are related to the object of that class. You can create new Ember class by using the Ember.Object's extend() method.\n" +
                        "\n" +
                        "2. Reopening Classes and Instances\n" +
                        "This is nothing but updating the class implementation without redefining it.\n" +
                        "\n" +
                        "3. Computed Properties\n" +
                        "A computed property declares functions as properties and Ember.js automatically calls the computed properties when needed and combines one or more properties in one variable.\n" +
                        "\n" +
                        "4. Computed Properties and Aggregate Data\n" +
                        "The computed property accesses all items in an array to determine its value.\n" +
                        "\n" +
                        "5. Observers\n" +
                        "The observer observes the property such as computed properties and updates the text of the computed property.\n" +
                        "\n" +
                        "6. Bindings\n" +
                        "The binding is a powerful feature of Ember.js which helps to create a link between two properties and if one of the properties gets changed, the other one is updated automatically.",
                "",
                ""
        );
        list.add(l1);
        return list;
    }

    //EmberJs Router
    private static List<LearnDetailsModel> EmberJsRouter() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Router",
                "Router is a core feature of EmberJs which translates an URL into a series of templates and represents the state of an application.The Ember uses the router to map the URL to a route handler. The router matches the current URL to other routes which are used for loading data, displaying the templates and to set up an application state.\n" +
                        "\n" +
                        "Route handler performs some actions such as −\n" +
                        "\n" +
                        "It provides the template.\n" +
                        "\n" +
                        "It defines the model and it will be accessible to the template.\n" +
                        "\n" +
                        "If there is no permission for user to visit the particular part of an app, then router will redirect to a new route.\n" +
                        "\n" +
                        "The following table lists down the different routers in Ember.js along with their description −" +
                        "\n\n" +
                        "1. Defining Routes\n" +
                        "The router matches the current URL with routes responsible for displaying template, loading data and setting up an application state.\n" +
                        "\n" +
                        "2. Specifying a Route's Model\n" +
                        "To specify a routes model, you need a template to display the data from the model.\n" +
                        "\n" +
                        "3. Rendering a Template\n" +
                        "The routes are used to render the external template to the screen.\n" +
                        "\n" +
                        "4. Redirecting\n" +
                        "It is a URL redirection mechanism that redirects the user to a different page when the requested URL is not found.\n" +
                        "\n" +
                        "5. Preventing and Retrying Transitions\n" +
                        "The transition.abort() and transition.retry() methods can be used to abort and retry the transition respectively during a route transition.\n" +
                        "\n" +
                        "6. Loading/Error Substates\n" +
                        "Ember router provides information of a route loading and errors which occur when loading a route.\n" +
                        "\n" +
                        "7. Query Parameters\n" +
                        "Query parameters come into view at the right side of the “?” mark in a URL represented as optional key-value pairs.\n" +
                        "\n" +
                        "8. Asynchronous Routing\n" +
                        "Ember.js router has the ability to handle complex async logic within an application by using asynchronous routing.",
                "",
                ""
        );
        list.add(l1);
        return list;
    }

    //EmberJs Templates
    private static List<LearnDetailsModel> EmberJsTemplates() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Templates",
                "A template is used to create a standard layout across multiple pages. When you change a template, the pages that are based on that template automatically get changed. Templates provide standardization controls.\n" +
                        "\n" +
                        "The below table shows some more details about templates −" +
                        "\n\n" +
                        "1. Handlebars Basics\n" +
                        "The Handlebars templating library allows building rich user interface by including static HTML and dynamic content.\n" +
                        "\n" +
                        "2. Built-in Helpers\n" +
                        "Helpers provide extra functionality to the templates and modifies the raw value from models and components into proper format for users.\n" +
                        "\n" +
                        "3. Conditionals\n" +
                        "Ember.js defines the two conditional statements which help to control the flow of program.\n" +
                        "\n" +
                        "4. Displaying List of Items\n" +
                        "You can display the list of items in an array by using the #each helper.\n" +
                        "\n" +
                        "5. Displaying Keys in an Object\n" +
                        "You can display the keys in the object by using the #each-in helper.\n" +
                        "\n" +
                        "6. Links\n" +
                        "The {{link-to}} component can be used to create a link to a route.\n" +
                        "\n" +
                        "7. Actions\n" +
                        "The HTML element can be made clickable by using the {{action}} helper.\n" +
                        "\n" +
                        "8. Input Helpers\n" +
                        "The common form controls can be created by using the {{input}} and {{textarea}} helpers in the Ember.js\n" +
                        "\n" +
                        "9. Development Helpers\n" +
                        "The template development can be made easier by using some helpers of Handlebars and Ember.\n" +
                        "\n" +
                        "10. Writing Helpers\n" +
                        "You can add extra functionality to the templates and converts the raw values from models and components into proper format for the users.",
                "",
                ""
        );
        list.add(l1);
        return list;
    }

    //EmberJs Components
    private static List<LearnDetailsModel> EmberJsComponents() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Components",
                "The Ember.js components uses the W3C web component specification and provides true encapsulation UI widgets. It contains the three main specification as templates, shadow DOM and custom elements. The component is declared within the data-template-name which has a path name instead of a plain string and are prefixed with \"components/\".\n" +
                        "\n" +
                        "The following table lists down the action events of actions −" +
                        "\n\n" +
                        "1. Defining a Component\n" +
                        "You can easily define a component in Ember.js and each component must have a dash in their name.\n" +
                        "\n" +
                        "2. Component Lifecycle\n" +
                        "Component lifecycle uses some of the methods in order to execute the code at specific times in a component's life.\n" +
                        "\n" +
                        "3. Passing Properties to a Component\n" +
                        "The component doesn't access the property directly in the template scope. Therefore, just declare the property at the time of component deceleration.\n" +
                        "\n" +
                        "4. Wrapping Content in a Component\n" +
                        "You can wrap the content in a component by using the templates.\n" +
                        "\n" +
                        "5. Customizing a Component's Element\n" +
                        "You can customize the component's element such as attributes, class names by using a subclass of Ember.Component in the JavaScript.\n" +
                        "\n" +
                        "6. Using Block Params\n" +
                        "The passed properties in a component can give back the result in a block expression.\n" +
                        "\n" +
                        "7. Handling Events\n" +
                        "The user events such as double-click, hovering, key press etc can be handled by event handlers. To do this, apply the event name as a method on the component.\n" +
                        "\n" +
                        "8. Triggering Changes with Actions\n" +
                        "Components can trigger the changes and communicate with events by using the actions.\n" +
                        "\n",
                "",
                ""
        );
        list.add(l1);
        return list;
    }

    //EmberJs Models
    private static List<LearnDetailsModel> EmberJsModels() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Models",
                "Model is a class that extends the functionality of the Ember Data. When a user refreshes the page, the contents of page should be represented by a model. In Ember.js, every route has an associated model. The model helps to improve the performance of application. The Ember Data manipulates the stored data in the server and also works easily with streaming APIs like socket.io and Firebase or WebSockets.\n" +
                        "\n" +
                        "Core Concepts\n" +
                        "Store\n" +
                        "Models\n" +
                        "Records\n" +
                        "Adapter\n" +
                        "Caching",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Store",
                "The store is a central repository and cache of all records available in an application. The route and controllers can access the stored data of your application. The DS.Store is created automatically to share the data among the entire object.",
                "import Ember from 'ember';\n" +
                        "\n" +
                        "export default Ember.Route.extend ({\n" +
                        "   model() {\n" +
                        "      return this.store.find();\n" +
                        "   }\n" +
                        "});",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Models",
                "Model is a class that extends the functionality of the Ember Data, which specifies relationships with other objects. When a user refreshes the page, the contents of page should be represented by a model.",
                "import DS from 'ember-data';\n" +
                        "\n" +
                        "export default DS.Model.extend ({\n" +
                        "   owner: DS.attr(),\n" +
                        "   city: DS.attr()\n" +
                        "});",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Records",
                "A record is an instance of a model that includes the information, which is loaded from a server and you can identify the record by its model type and ID.",
                "//It finds the record of type 'person' and an 'ID' of 1\n" +
                        "this.get('store').findRecord('person', 1); // => { id: 1, name: 'steve-buscemi' }",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Adapter",
                "An adapter is an object that is responsible for translating requested records from Ember into appropriate calls to particular server backend. For instance, if you want to find a person with ID of 1, then Ember will load the URL by using HTTP as /person/1.",
                "",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Caching",
                "he records can be cached automatically by the store and returns the same object instance when you load the records from the server for the second time. This improves the performance of your application and displays the application UI to the user as fast as possible.\n" +
                        "\n" +
                        "The following table lists down the details about models −" +
                        "\n\n" +
                        "1. Defining Models\n" +
                        "Model is a simple class that extends the functionality of the Ember Data.\n" +
                        "\n" +
                        "2. Finding Records\n" +
                        "You can retrieve the records by using the Ember data store.\n" +
                        "\n" +
                        "3. Creating and Deleting Records\n" +
                        "You can create and delete the records on the instance of model.\n" +
                        "\n" +
                        "4. Relationships\n" +
                        "Ember.js provides relationship types to specify how the models are related to each other.\n" +
                        "\n" +
                        "5. Pushing Records Into The Store\n" +
                        "You can push the records into the store's cache without requesting the records from an application.\n" +
                        "\n" +
                        "6. Handling Metadata\n" +
                        "Metadata is a data that is used for specific model or type instead of using record.\n" +
                        "\n" +
                        "7. Customizing Adapters\n" +
                        "Ember.js Adapter specifies how data is kept on at the backend data store such as URL format and REST API headers.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        return list;
    }

    //EmberJs Managing Dependencies
    private static List<LearnDetailsModel> EmberJsManagingDependencies() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Managing Dependencies",
                "Ember uses NPM and Bower for managing dependencies which are defined in package.json for NPM and bower.json for Bower. For instance, you may require installing SASS for your style sheets which is not installed by Ember while developing Ember app. To accomplish this, use the Ember Addons for sharing the reusable libraries. If you want to install any CSS framework or JavaScript datepicker dependencies, then use the Bower package manager.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Addons",
                "The Ember CLI can be used to install the Ember Addons by using the following command −\n" +
                        "The ember install command will save all the dependencies to the respective configuration file.",
                "ember install ember-cli-sass",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Bower",
                "It is a package manager for the web which manages the components of HTML, CSS, JavaScript or image files. It basically maintains and monitors all packages and examines new updates. It uses the configuration file bower.json to keep track of applications placed at the root of the Ember CLI project.\n" +
                        "\n" +
                        "You can install the project dependencies by using the following command −",
                "bower install <dependencies> --save",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Assets",
                "You can place the third-party JavaScript in the vendor/ folder of your project which are not available as an Addon or Bower package and place the own assets such as robots.txt, favicon, etc. in the public/ folder of your project. The dependencies which are not installed by Ember while developing the Ember app, should be included by using the manifest file ember-cli-build.js.",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "AMD JavaScript modules",
                "You can give the asset path as the first argument and the list of modules and exports as the second argument. You can include these assets in the ember-cli-build.js manifest file as −",
                "app.import('bower_components/ic-ajax/dist/named-amd/main.js', {\n" +
                        "   exports: {\n" +
                        "      'ic-ajax': [\n" +
                        "         'default',\n" +
                        "         'defineFixture',\n" +
                        "         'lookupFixture',\n" +
                        "         'raw',\n" +
                        "         'request'\n" +
                        "      ]\n" +
                        "   }\n" +
                        "});",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Environment Specific Assets",
                "The different assets can be used in different environments by defining object as first parameter which is an environment name and the value of an object should be used as asset in that environment. In the ember-cli-build.js manifest file, you can include as −",
                "app.import ({\n" +
                        "   development: 'bower_components/ember/ember.js',\n" +
                        "   production:  'bower_components/ember/ember.prod.js'\n" +
                        "});",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Other Assets",
                "Once all the assets are placed in the public/ folder, they will get copied into the dist/ directory. For instance, if you copy a favicon placed at the public/images/favicon.ico folder, this will get copied into the dist/images/favicon.ico directory. The third-party assets can be added manually in the vendor/ folder or by using the Bower package manager via the import() option. The assets which are not added by using the import() option, will not be present in the final build.\n" +
                        "\n" +
                        "For instance, consider the following line of code which imports the assets into the dist/ folder.\n" +
                        "\n" +
                        "app.import('bower_components/font-awesome/fonts/fontawesome-webfont.ttf');\n" +
                        "The above line of code creates a font file in dist/font-awesome/fonts/fontawesomewebfont.ttf. You can also place the above file at a different path as shown below −\n" +
                        "\n" +
                        "app.import('bower_components/font-awesome/fonts/fontawesome-webfont.ttf', {\n" +
                        "   destDir: 'assets'\n" +
                        "});\n" +
                        "It will copy the font file in dist/assets/fontawesome-webfont.ttf.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        return list;
    }

    //ExpressJs
    //ExpressJs Introduction
    private static List<LearnDetailsModel> ExpressJsIntroduction() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is Express?",
                "ExpressJS is a web application framework that provides you with a simple API to build websites, web apps and back ends. With ExpressJS, you need not worry about low level protocols, processes, etc." +
                        "\n" +
                        "Express provides a minimal interface to build our applications. It provides us the tools that are required to build our app. It is flexible as there are numerous modules available on npm, which can be directly plugged into Express.\n" +
                        "\n" +
                        "Express was developed by TJ Holowaychuk and is maintained by the Node.js foundation and numerous open source contributors.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Why Express?",
                "Unlike its competitors like Rails and Django, which have an opinionated way of building applications, Express has no \"best way\" to do something. It is very flexible and pluggable.\n" +
                        "\n" +
                        "Pug\n" +
                        "Pug (earlier known as Jade) is a terse language for writing HTML templates. It −\n" +
                        "\n" +
                        "Produces HTML\n" +
                        "Supports dynamic code\n" +
                        "Supports re-usability (DRY)\n" +
                        "It is one of the most popular template language used with Express.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "MongoDB and Mongoose",
                "MongoDB is an open-source, document database designed for ease of development and scaling. This database is also used to store data.\n" +
                        "\n" +
                        "Mongoose is a client API for node.js which makes it easy to access our database from our Express application.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Audience",
                "This tutorial has been created for anyone who has a basic knowledge of HTML, Javascript and how client-servers work. After completing this tutorial, you will be able to build moderately complex websites and back-ends for you mobile applications.",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Prerequisites",
                "You should have basic knowledge of Javascript and HTML. If you are not acquainted with these, we suggest you to go through tutorials on those areas first. It will definitely help, if you have some exposure to HTTP, although it is not mandatory. Having a basic knowledge of MongoDB will help you with the Database chapter.",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);

        return list;
    }

    //ExpressJs Environment
    private static List<LearnDetailsModel> ExpressJsEnvironment() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "How to setup ExpressJS Environment?",
                "In this chapter, we will learn how to start developing and using the Express Framework. To start with, you should have the Node and the npm (node package manager) installed. If you don’t already have these, go to the NodeJS chapter" +
                        " to install node on your local system. Confirm that node and npm are installed by running the following commands in your terminal." +
                        "\n\n" +
                        "node --version\n" +
                        "npm --version\n\n" +
                        "You should get an output similar to the following.\n" +
                        "\n" +
                        "v5.0.0\n" +
                        "3.5.2\n" +
                        "Now that we have Node and npm set up, let us understand what npm is and how to use it.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Node Package Manager(npm)",
                "npm is the package manager for node. The npm Registry is a public collection of packages of open-source code for Node.js, front-end web apps, mobile apps, robots, routers, and countless other needs of the JavaScript community. npm allows us to access all these packages and install them locally. " +
                        "",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "How to use npm?",
                "There are two ways to install a package using npm: globally and locally.\n" +
                        "\n" +
                        "Globally − This method is generally used to install development tools and CLI based packages. To install a package globally, use the following code.\n" +
                        "\n" +
                        "npm install -g <package-name>\n" +
                        "Locally − This method is generally used to install frameworks and libraries. A locally installed package can be used only within the directory it is installed. To install a package locally, use the same command as above without the -g flag.\n" +
                        "\n" +
                        "npm install <package-name>\n" +
                        "Whenever we create a project using npm, we need to provide a package.json file, which has all the details about our project. npm makes it easy for us to set up this file. Let us set up our development project.\n" +
                        "\n" +
                        "Step 1 − Start your terminal/cmd, create a new folder named hello-world and cd (create directory) into it −\n" +
                        "\n" +
                        "npm init info\n" +
                        "Step 2 − Now to create the package.json file using npm, use the following code.\n" +
                        "\n" +
                        "npm init\n" +
                        "It will ask you for the following information.\n" +
                        "\n" +
                        "npm init info\n" +
                        "Just keep pressing enter, and enter your name at the “author name” field.\n" +
                        "\n" +
                        "Step 3 − Now we have our package.json file set up, we will further install Express. To install Express and add it to our package.json file, use the following command −\n" +
                        "\n" +
                        "npm install --save express\n" +
                        "To confirm that Express has installed correctly, run the following code.\n" +
                        "\n" +
                        "ls node_modules #(dir node_modules for windows)\n" +
                        "Tip − The --save flag can be replaced by the -S flag. This flag ensures that Express is added as a dependency to our package.json file. This has an advantage, the next time we need to install all the dependencies of our project we can just run the command npm install and it will find the dependencies in this file and install them for us.\n" +
                        "\n" +
                        "This is all we need to start development using the Express framework. To make our development process a lot easier, we will install a tool from npm, nodemon. This tool restarts our server as soon as we make a change in any of our files, otherwise we need to restart the server manually after each file modification. To install nodemon, use the following command −\n" +
                        "\n" +
                        "npm install -g nodemon\n" +
                        "You can now start working on Express.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //ExpressJs Hello World
    private static List<LearnDetailsModel> ExpressJsHelloWorld() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Hello World",
                "We have set up the development, now it is time to start developing our first app using Express. Create a new file called index.js and type the following in it." +
                        "\n\n" +
                        "Save the file, go to your terminal and type the following.\n" +
                        "\n" +
                        "nodemon index.js" +
                        "\n\n" +
                        "This will start the server. To test this app, open your browser and go to http://localhost:3000 and a message will be displayed as in the following output.",
                "var express = require('express');\n" +
                        "var app = express();\n" +
                        "\n" +
                        "app.get('/', function(req, res){\n" +
                        "   res.send(\"Hello world!\");\n" +
                        "});\n" +
                        "\n" +
                        "app.listen(3000);",
                "Hello world!"
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "How the App Works?",
                "The first line imports Express in our file, we have access to it through the variable Express. We use it to create an application and assign it to var app.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "app.get(route, callback)",
                "This function tells what to do when a get request at the given route is called. The callback function has 2 parameters, request(req) and response(res). The request object(req) represents the HTTP request and has properties for the request query string, parameters, body, HTTP headers, etc. Similarly, the response object represents the HTTP response that the Express app sends when it receives an HTTP request.\n" +
                        "\n" +
                        "res.send()\n" +
                        "This function takes an object as input and it sends this to the requesting client. Here we are sending the string \"Hello World!\".\n" +
                        "\n" +
                        "app.listen(port, [host], [backlog], [callback]])\n" +
                        "This function binds and listens for connections on the specified host and port. Port is the only required parameter here." +
                        "\n\n" +
                        "1. port\n" +
                        "\n" +
                        "A port number on which the server should accept incoming requests.\n" +
                        "\n" +
                        "2. host\n" +
                        "\n" +
                        "Name of the domain. You need to set it when you deploy your apps to the cloud.\n" +
                        "\n" +
                        "3. backlog\n" +
                        "\n" +
                        "The maximum number of queued pending connections. The default is 511.\n" +
                        "\n" +
                        "4. callback\n" +
                        "\n" +
                        "An asynchronous function that is called when the server starts listening for requests.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //ExpressJs Routing
    private static List<LearnDetailsModel> ExpressJsRouting() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Routing",
                "Web frameworks provide resources such as HTML pages, scripts, images, etc. at different routes.\n" +
                        "\n" +
                        "The following function is used to define routes in an Express application −\n" +
                        "\n" +
                        "app.method(path, handler)\n" +
                        "This METHOD can be applied to any one of the HTTP verbs – get, set, put, delete. An alternate method also exists, which executes independent of the request type.\n" +
                        "\n" +
                        "Path is the route at which the request will run.\n" +
                        "\n" +
                        "Handler is a callback function that executes when a matching request type is found on the relevant route. For example," +
                        "\n\n" +
                        "If we run our application and go to localhost:3000/hello, the server receives a get request at route \"/hello\", our Express app executes the callback function attached to this route and sends \"Hello World!\" as the response.",
                "var express = require('express');\n" +
                        "var app = express();\n" +
                        "\n" +
                        "app.get('/hello', function(req, res){\n" +
                        "   res.send(\"Hello World!\");\n" +
                        "});\n" +
                        "\n" +
                        "app.listen(3000);",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Multiple Different Methods",
                "We can also have multiple different methods at the same route. For example," +
                        "\n\n" +
                        "To test this request, open up your terminal and use cURL to execute the following request −\n" +
                        "\n" +
                        "curl -X POST \"http://localhost:3000/hello\"" +
                        "\n\n" +
                        "A special method, all, is provided by Express to handle all types of http methods at a particular route using the same function. To use this method, try the following.\n" +
                        "\n" +
                        "app.all('/test', function(req, res){\n" +
                        "   res.send(\"HTTP method doesn't have any effect on this route!\");\n" +
                        "});\n" +
                        "This method is generally used for defining middleware, which we'll discuss in the middleware chapter.",
                "var express = require('express');\n" +
                        "var app = express();\n" +
                        "\n" +
                        "app.get('/hello', function(req, res){\n" +
                        "   res.send(\"Hello World!\");\n" +
                        "});\n" +
                        "\n" +
                        "app.post('/hello', function(req, res){\n" +
                        "   res.send(\"You just called the post method at '/hello'!\\n\");\n" +
                        "});\n" +
                        "\n" +
                        "app.listen(3000);",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Routers",
                "Defining routes like above is very tedious to maintain. To separate the routes from our main index.js file, we will use Express.Router. Create a new file called things.js and type the following in it." +
                        "\n\n" +
                        "\n" +
                        "var express = require('express');\n" +
                        "var router = express.Router();\n" +
                        "\n" +
                        "router.get('/', function(req, res){\n" +
                        "   res.send('GET route on things.');\n" +
                        "});\n" +
                        "router.post('/', function(req, res){\n" +
                        "   res.send('POST route on things.');\n" +
                        "});\n" +
                        "\n" +
                        "//export this router to use in our index.js\n" +
                        "module.exports = router;" +
                        "\n\n\n" +
                        "Now to use this router in our index.js, type in the following before the app.listen function call." +
                        "\n\n" +
                        "The app.use function call on route '/things' attaches the things router with this route. Now whatever requests our app gets at the '/things', will be handled by our things.js router. The '/' route in things.js is actually a subroute of '/things'. Visit localhost:3000/things/ and you will see the following output." +
                        "\n\n\n" +
                        "Routers are very helpful in separating concerns and keep relevant portions of our code together. They help in building maintainable code. You should define your routes relating to an entity in a single file and include it using the above method in your index.js file.",
                "var express = require('Express');\n" +
                        "var app = express();\n" +
                        "\n" +
                        "var things = require('./things.js');\n" +
                        "\n" +
                        "//both index.js and things.js should be in same directory\n" +
                        "app.use('/things', things);\n" +
                        "\n" +
                        "app.listen(3000);",
                "GET route on things."
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //ExpressJs HTTP Methods
    private static List<LearnDetailsModel> ExpressJsHTTPMethods() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "HTTP Methods",
                "The HTTP method is supplied in the request and specifies the operation that the client has requested. The following table lists the most used HTTP methods −" +
                        "\n\n" +
                        "1. GET\n" +
                        "\n" +
                        "The GET method requests a representation of the specified resource. Requests using GET should only retrieve data and should have no other effect.\n" +
                        "\n" +
                        "2. POST\n" +
                        "\n" +
                        "The POST method requests that the server accept the data enclosed in the request as a new object/entity of the resource identified by the URI.\n" +
                        "\n" +
                        "3. PUT\n" +
                        "\n" +
                        "The PUT method requests that the server accept the data enclosed in the request as a modification to existing object identified by the URI. If it does not exist then the PUT method should create one.\n" +
                        "\n" +
                        "4. DELETE\n" +
                        "\n" +
                        "The DELETE method requests that the server delete the specified resource.\n" +
                        "\n" +
                        "These are the most common HTTP methods.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "GET Method",
                "A GET request retrieves data from a web server by specifying parameters in the URL portion of the request. This is the main method used for document retrieval. The following example makes use of GET method to fetch hello.htm:",
                "GET /hello.htm HTTP/1.1\n" +
                        "User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)\n" +
                        "Host: www.shrcreation.com\n" +
                        "Accept-Language: en-us\n" +
                        "Accept-Encoding: gzip, deflate\n" +
                        "Connection: Keep-Alive",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "POST Method",
                "The POST method is used when you want to send some data to the server, for example, file update, form data, etc. The following example makes use of POST method to send a form data to the server, which will be processed by a process.cgi and finally a response will be returned:",
                "POST /cgi-bin/process.cgi HTTP/1.1\n" +
                        "User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)\n" +
                        "Host: www.shrcreation.com\n" +
                        "Content-Type: text/xml; charset=utf-8\n" +
                        "Content-Length: 88\n" +
                        "Accept-Language: en-us\n" +
                        "Accept-Encoding: gzip, deflate\n" +
                        "Connection: Keep-Alive",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "PUT Method",
                "The PUT method is used to request the server to store the included entity-body at a location specified by the given URL. The following example requests the server to save the given entity-body in hello.htm at the root of the server:",
                "PUT /hello.htm HTTP/1.1\n" +
                        "User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)\n" +
                        "Host: www.shrcreation.com\n" +
                        "Accept-Language: en-us\n" +
                        "Connection: Keep-Alive\n" +
                        "Content-type: text/html\n" +
                        "Content-Length: 182",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "DELETE Method",
                "The DELETE method is used to request the server to delete a file at a location specified by the given URL. The following example requests the server to delete the given file hello.htm at the root of the server:\n" +
                        "\n",
                "DELETE /hello.htm HTTP/1.1\n" +
                        "User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)\n" +
                        "Host: www.shrcreation.com\n" +
                        "Accept-Language: en-us\n" +
                        "Connection: Keep-Alive",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }

    //ExpressJs URL Building
    private static List<LearnDetailsModel> ExpressJsURLBuilding() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is URL Building?",
                "We can now define routes, but those are static or fixed. To use the dynamic routes, we SHOULD provide different types of routes. Using dynamic routes allows us to pass parameters and process based on them.\n" +
                        "\n" +
                        "Here is an example of a dynamic route −" +
                        "\n\n" +
                        "To test this go to http://localhost:3000/123. The following output will be displayed.",
                "var express = require('express');\n" +
                        "var app = express();\n" +
                        "\n" +
                        "app.get('/:id', function(req, res){\n" +
                        "   res.send('The id you specified is ' + req.params.id);\n" +
                        "});\n" +
                        "app.listen(3000);",
                "The id you specified is 123"
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "What is Pattern Matched Routes?",
                "ou can also use regex to restrict URL parameter matching. Let us assume you need the id to be a 5-digit long number. You can use the following route definition −" +
                        "\n\n" +
                        "Note that this will only match the requests that have a 5-digit long id. You can use more complex regexes to match/validate your routes. If none of your routes match the request, you'll get a \"Cannot GET <your-request-route>\" message as response. ",
                "var express = require('express');\n" +
                        "var app = express();\n" +
                        "\n" +
                        "app.get('/things/:id([0-9]{5})', function(req, res){\n" +
                        "   res.send('id: ' + req.params.id);\n" +
                        "});\n" +
                        "\n" +
                        "app.listen(3000);",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //ExpressJs Middleware
    private static List<LearnDetailsModel> ExpressJsMiddleware() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is Middleware?",
                "Middleware functions are functions that have access to the request object (req), the response object (res), and the next middleware function in the application’s request-response cycle. These functions are used to modify req and res objects for tasks like parsing request bodies, adding response headers, etc.\n" +
                        "\n" +
                        "Here is a simple example of a middleware function in action −",
                "var express = require('express');\n" +
                        "var app = express();\n" +
                        "\n" +
                        "//Simple request time logger\n" +
                        "app.use(function(req, res, next){\n" +
                        "   console.log(\"A new request received at \" + Date.now());\n" +
                        "   \n" +
                        "   //This function call is very important. It tells that more processing is\n" +
                        "   //required for the current request and is in the next middleware\n" +
                        "   function route handler.\n" +
                        "   next();\n" +
                        "});\n" +
                        "\n" +
                        "app.listen(3000);",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Order of Middleware Calls",
                "One of the most important things about middleware in Express is the order in which they are written/included in your file; the order in which they are executed, given that the route matches also needs to be considered.\n" +
                        "\n" +
                        "For example, in the following code snippet, the first function executes first, then the route handler and then the end function. This example summarizes how to use middleware before and after route handler; also how a route handler can be used as a middleware itself.",
                "var express = require('express');\n" +
                        "var app = express();\n" +
                        "\n" +
                        "//First middleware before response is sent\n" +
                        "app.use(function(req, res, next){\n" +
                        "   console.log(\"Start\");\n" +
                        "   next();\n" +
                        "});\n" +
                        "\n" +
                        "//Route handler\n" +
                        "app.get('/', function(req, res, next){\n" +
                        "   res.send(\"Middle\");\n" +
                        "   next();\n" +
                        "});\n" +
                        "\n" +
                        "app.use('/', function(req, res){\n" +
                        "   console.log('End');\n" +
                        "});\n" +
                        "\n" +
                        "app.listen(3000);",
                "Start\n" +
                        "End"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Third Party Middleware",
                "Following are some of the most commonly used middleware; we will also learn how to use/mount these −" +
                        "\n\n" +
                        "body-parser\n" +
                        "This is used to parse the body of requests which have payloads attached to them. To mount body parser, we need to install it using npm install --save body-parser and to mount it, include the following lines in your index.js −\n" +
                        "\n" +
                        "var bodyParser = require('body-parser');\n" +
                        "\n" +
                        "//To parse URL encoded data\n" +
                        "app.use(bodyParser.urlencoded({ extended: false }))\n" +
                        "\n" +
                        "//To parse json data\n" +
                        "app.use(bodyParser.json())\n" +
                        "To view all available options for body-parser, visit its github page.\n" +
                        "\n" +
                        "cookie-parser\n" +
                        "It parses Cookie header and populate req.cookies with an object keyed by cookie names. To mount cookie parser, we need to install it using npm install --save cookie-parser and to mount it, include the following lines in your index.js −\n" +
                        "\n" +
                        "var cookieParser = require('cookie-parser');\n" +
                        "app.use(cookieParser())\n" +
                        "express-session\n" +
                        "It creates a session middleware with the given options. We will discuss its usage in the Sessions section.\n" +
                        "\n" +
                        "We have many other third party middleware in ExpressJS. However, we have discussed only a few important ones here.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //ExpressJs Templating
    private static List<LearnDetailsModel> ExpressJsTemplating() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is Templating?",
                "Pug is a templating engine for Express. Templating engines are used to remove the cluttering of our server code with HTML, concatenating strings wildly to existing HTML templates. Pug is a very powerful templating engine which has a variety of features including filters, includes, inheritance, interpolation, etc. There is a lot of ground to cover on this.\n" +
                        "\n" +
                        "To use Pug with Express, we need to install it,\n" +
                        "\n" +
                        "npm install --save pug\n\n" +
                        "Now that Pug is installed, set it as the templating engine for your app. You don't need to 'require' it. Add the following code to your index.js file." +
                        "\n\n" +
                        "app.set('view engine', 'pug');\n" +
                        "app.set('views','./views');\n" +
                        "Now create a new directory called views. Inside that create a file called first_view.pug, and enter the following data in it.\n" +
                        "\n" +
                        "doctype html\n" +
                        "html\n" +
                        "   head\n" +
                        "      title = \"Hello Pug\"\n" +
                        "   body\n" +
                        "      p.greetings#people Hello World!\n" +
                        "To run this page, add the following route to your app −\n" +
                        "\n" +
                        "app.get('/first_template', function(req, res){\n" +
                        "   res.render('first_view');\n" +
                        "});\n" +
                        "You will get the output as − Hello World! Pug converts this very simple looking markup to html. We don’t need to keep track of closing our tags, no need to use class and id keywords, rather use '.' and '#' to define them. The above code first gets converted to −",
                "<!DOCTYPE html>\n" +
                        "<html>\n" +
                        "   <head>\n" +
                        "      <title>Hello Pug</title>\n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>\n" +
                        "      <p class = \"greetings\" id = \"people\">Hello World!</p>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Important Features of Pug",
                "Let us now explore a few important features of Pug.\n" +
                        "\n" +
                        "Simple Tags\n" +
                        "Tags are nested according to their indentation. Like in the above example, <title> was indented within the <head> tag, so it was inside it. But the <body> tag was on the same indentation, so it was a sibling of the <head> tag.\n" +
                        "\n" +
                        "We don’t need to close tags, as soon as Pug encounters the next tag on same or outer indentation level, it closes the tag for us.\n" +
                        "\n" +
                        "To put text inside of a tag, we have 3 methods −\n" +
                        "\n" +
                        "Space separated\n" +
                        "\n" +
                        "h1 Welcome to Pug\n" +
                        "Piped text\n" +
                        "\n" +
                        "div\n" +
                        "   | To insert multiline text, \n" +
                        "   | You can use the pipe operator.\n" +
                        "Block of text\n" +
                        "\n" +
                        "div.\n" +
                        "   But that gets tedious if you have a lot of text.\n" +
                        "   You can use \".\" at the end of tag to denote block of text.\n" +
                        "   To put tags inside this block, simply enter tag in a new line and \n" +
                        "   indent it accordingly.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Comments",
                "Pug uses the same syntax as JavaScript(//) for creating comments. These comments are converted to the html comments(<!--comment-->). For example,\n" +
                        "\n" +
                        "//This is a Pug comment\n" +
                        "This comment gets converted to the following.\n" +
                        "\n" +
                        "<!--This is a Pug comment-->",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Attributes",
                "To define attributes, we use a comma separated list of attributes, in parenthesis. Class and ID attributes have special representations. The following line of code covers defining attributes, classes and id for a given html tag.\n" +
                        "\n" +
                        "div.container.column.main#division(width = \"100\", height = \"100\")\n" +
                        "This line of code, gets converted to the following. −\n" +
                        "\n" +
                        "<div class = \"container column main\" id = \"division\" width = \"100\" height = \"100\"></div>",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Passing Values to Templates",
                "When we render a Pug template, we can actually pass it a value from our route handler, which we can then use in our template. Create a new route handler with the following.\n" +
                        "\n" +
                        "var express = require('express');\n" +
                        "var app = express();\n" +
                        "\n" +
                        "app.get('/dynamic_view', function(req, res){\n" +
                        "   res.render('dynamic', {\n" +
                        "      name: \"TutorialsPoint\", \n" +
                        "      url:\"http://www.tutorialspoint.com\"\n" +
                        "   });\n" +
                        "});\n" +
                        "\n" +
                        "app.listen(3000);\n" +
                        "And create a new view file in views directory, called dynamic.pug, with the following code −",
                "html\n" +
                        "   head\n" +
                        "      title=name\n" +
                        "   body\n" +
                        "      h1=name\n" +
                        "      a(href = url) URL",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Conditionals",
                "We can use conditional statements and looping constructs as well.\n" +
                        "\n" +
                        "Consider the following −\n" +
                        "\n" +
                        "If a User is logged in, the page should display \"Hi, User\" and if not, then the \"Login/Sign Up\" link. To achieve this, we can define a simple template like −",
                "html\n" +
                        "   head\n" +
                        "      title Simple template\n" +
                        "   body\n" +
                        "      if(user)\n" +
                        "         h1 Hi, #{user.name}\n" +
                        "      else\n" +
                        "         a(href = \"/sign_up\") Sign Up",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Include and Components",
                "Pug provides a very intuitive way to create components for a web page. For example, if you see a news website, the header with logo and categories is always fixed. Instead of copying that to every view we create, we can use the include feature. Following example shows how we can use this feature −\n" +
                        "\n" +
                        "Create 3 views with the following code −\n" +
                        "\n" +
                        "HEADER.PUG\n" +
                        "\n" +
                        "div.header.\n" +
                        "   I'm the header for this website.\n" +
                        "CONTENT.PUG\n" +
                        "\n" +
                        "html\n" +
                        "   head\n" +
                        "      title Simple template\n" +
                        "   body\n" +
                        "      include ./header.pug\n" +
                        "      h3 I'm the main content\n" +
                        "      include ./footer.pug\n" +
                        "FOOTER.PUG\n" +
                        "\n" +
                        "div.footer.\n" +
                        "   I'm the footer for this website.\n" +
                        "Create a route for this as follows −",
                "var express = require('express');\n" +
                        "var app = express();\n" +
                        "\n" +
                        "app.get('/components', function(req, res){\n" +
                        "    res.render('content');\n" +
                        "});\n" +
                        "\n" +
                        "app.listen(3000);",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        return list;
    }

    //ExpressJs Static Files
    private static List<LearnDetailsModel> ExpressJsStaticFiles() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "How to Serving static files?",
                "Static files are files that clients download as they are from the server. Create a new directory, public. Express, by default does not allow you to serve static files. You need to enable it using the following built-in middleware.\n" +
                        "\n" +
                        "app.use(express.static('public'));\n" +
                        "Note − Express looks up the files relative to the static directory, so the name of the static directory is not part of the URL.\n" +
                        "\n" +
                        "Note that the root route is now set to your public dir, so all static files you load will be considering public as root. To test that this is working fine, add any image file in your new public dir and change its name to \"testimage.jpg\". In your views, create a new view and include this file like −",
                "html\n" +
                        "   head\n" +
                        "   body\n" +
                        "      h3 Testing static file serving:\n" +
                        "      img(src = \"/testimage.jpg\", alt = \"Testing Image",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Multiple Static Directories",
                "We can also set multiple static assets directories using the following program −",
                "var express = require('express');\n" +
                        "var app = express();\n" +
                        "\n" +
                        "app.use(express.static('public'));\n" +
                        "app.use(express.static('images'));\n" +
                        "\n" +
                        "app.listen(3000);",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Virtual Path Prefix",
                "We can also provide a path prefix for serving static files. For example, if you want to provide a path prefix like '/static', you need to include the following code in your index.js file −",
                "var express = require('express');\n" +
                        "var app = express();\n" +
                        "\n" +
                        "app.use('/static', express.static('public'));\n" +
                        "\n" +
                        "app.listen(3000);",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //ExpressJs Form Data
    private static List<LearnDetailsModel> ExpressJsFormData() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is Form data?",
                "Forms are an integral part of the web. Almost every website we visit offers us forms that submit or fetch some information for us. To get started with forms, we will first install the body-parser(for parsing JSON and url-encoded data) and multer(for parsing multipart/form data) middleware.\n" +
                        "\n" +
                        "To install the body-parser and multer, go to your terminal and use −\n" +
                        "\n" +
                        "npm install --save body-parser multer\n" +
                        "Replace your index.js file contents with the following code −",
                "var express = require('express');\n" +
                        "var bodyParser = require('body-parser');\n" +
                        "var multer = require('multer');\n" +
                        "var upload = multer();\n" +
                        "var app = express();\n" +
                        "\n" +
                        "app.get('/', function(req, res){\n" +
                        "   res.render('form');\n" +
                        "});\n" +
                        "\n" +
                        "app.set('view engine', 'pug');\n" +
                        "app.set('views', './views');\n" +
                        "\n" +
                        "// for parsing application/json\n" +
                        "app.use(bodyParser.json()); \n" +
                        "\n" +
                        "// for parsing application/xwww-\n" +
                        "app.use(bodyParser.urlencoded({ extended: true })); \n" +
                        "//form-urlencoded\n" +
                        "\n" +
                        "// for parsing multipart/form-data\n" +
                        "app.use(upload.array()); \n" +
                        "app.use(express.static('public'));\n" +
                        "\n" +
                        "app.post('/', function(req, res){\n" +
                        "   console.log(req.body);\n" +
                        "   res.send(\"recieved your request!\");\n" +
                        "});\n" +
                        "app.listen(3000);",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "form.pug",
                "After importing the body parser and multer, we will use the body-parser for parsing json and x-www-form-urlencoded header requests, while we will use multer for parsing multipart/form-data.\n" +
                        "\n" +
                        "Let us create an html form to test this out. Create a new view called form.pug with the following code −",
                "html\n" +
                        "html\n" +
                        "   head\n" +
                        "      title Form Tester\n" +
                        "   body\n" +
                        "      form(action = \"/\", method = \"POST\")\n" +
                        "         div\n" +
                        "            label(for = \"say\") Say:\n" +
                        "            input(name = \"say\" value = \"Hi\")\n" +
                        "         br\n" +
                        "         div\n" +
                        "            label(for = \"to\") To:\n" +
                        "            input(name = \"to\" value = \"Express forms\")\n" +
                        "         br\n" +
                        "         button(type = \"submit\") Send my greetings",
                "Run your server using the following.\n" +
                        "\n" +
                        "nodemon index.js"
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //ExpressJs Database
    private static List<LearnDetailsModel> ExpressJsDatabase() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is Database?",
                "We keep receiving requests, but end up not storing them anywhere. We need a Database to store the data. For this, we will make use of the NoSQL database called MongoDB." +
                        "\n\n" +
                        "In order to use Mongo with Express, we need a client API for node. There are multiple options for us, but for this tutorial, we will stick to mongoose. Mongoose is used for document Modeling in Node for MongoDB. For document modeling, we create a Model (much like a class in document oriented programming), and then we produce documents using this Model (like we create documents of a class in OOP). All our processing will be done on these \"documents\", then finally, we will write these documents in our database.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Setting up Mongoose",
                "Now that you have installed Mongo, let us install Mongoose, the same way we have been installing our other node packages −\n" +
                        "\n" +
                        "npm install --save mongoose\n" +
                        "Before we start using mongoose, we have to create a database using the Mongo shell. To create a new database, open your terminal and enter \"mongo\". A Mongo shell will start, enter the following code −\n" +
                        "\n" +
                        "use my_db\n" +
                        "A new database will be created for you. Whenever you open up the mongo shell, it will default to \"test\" db and you will have to change to your database using the same command as above.\n" +
                        "\n" +
                        "To use Mongoose, we will require it in our index.js file and then connect to the mongodb service running on mongodb://localhost.\n" +
                        "\n" +
                        "var mongoose = require('mongoose');\n" +
                        "mongoose.connect('mongodb://localhost/my_db');\n" +
                        "Now our app is connected to our database, let us create a new Model. This model will act as a collection in our database. To create a new Model, use the following code, before defining any route −",
                "var personSchema = mongoose.Schema({\n" +
                        "   name: String,\n" +
                        "   age: Number,\n" +
                        "   nationality: String\n" +
                        "});\n" +
                        "var Person = mongoose.model(\"Person\", personSchema);",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Saving Documents",
                "Now, we will create a new html form; this form will help you get the details of a person and save it to our database. " +
                        "To create the form, create a new view file called person.pug in views directory with the following content −" +
                        "\n\n" +
                        "Also add a new get route in index.js to render this document −\n" +
                        "\n" +
                        "app.get('/person', function(req, res){\n" +
                        "   res.render('person');\n" +
                        "});",
                "html\n" +
                        "head\n" +
                        "   title Person\n" +
                        "   body\n" +
                        "      form(action = \"/person\", method = \"POST\")\n" +
                        "      div\n" +
                        "         label(for = \"name\") Name: \n" +
                        "         input(name = \"name\")\n" +
                        "      br\n" +
                        "      div\n" +
                        "         label(for = \"age\") Age: \n" +
                        "         input(name = \"age\")\n" +
                        "      br\n" +
                        "      div\n" +
                        "         label(for = \"nationality\") Nationality: \n" +
                        "         input(name = \"nationality\")\n" +
                        "      br\n" +
                        "      button(type = \"submit\") Create new person",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Retrieving Documents",
                "Mongoose provides a lot of functions for retrieving documents, we will focus on 3 of those. All these functions also take a callback as the last parameter, and just like the save function, their arguments are error and response. The three functions are as follows −\n" +
                        "\n" +
                        "Model.find(conditions, callback)\n" +
                        "This function finds all the documents matching the fields in conditions object. Same operators used in Mongo also work in mongoose. For example,",
                "Person.find(function(err, response){\n" +
                        "   console.log(response);\n" +
                        "});",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Updating Documents",
                "Mongoose provides 3 functions to update documents. The functions are described below −\n" +
                        "\n" +
                        "Model.update(condition, updates, callback)\n" +
                        "This function takes a conditions and updates an object as input and applies the changes to all the documents matching the conditions in the collection. For example, following code will update the nationality \"American\" in all Person documents −",
                "Person.update({age: 25}, {nationality: \"American\"}, function(err, response){\n" +
                        "   console.log(response);\n" +
                        "});",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Deleting Documents",
                "We have covered Create, Read and Update, now we will see how Mongoose can be used to Delete documents. We have 3 functions here, exactly like update.\n" +
                        "\n" +
                        "Model.remove(condition, [callback])\n" +
                        "This function takes a condition object as input and removes all documents matching the conditions. For example, if we need to remove all people aged 20, use the following syntax −",
                "Person.remove({age:20});",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        return list;
    }

    //ExpressJs Cookies
    private static List<LearnDetailsModel> ExpressJsCookies() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "How to use Cookies?",
                "Cookies are simple, small files/data that are sent to client with a server request and stored on the client side. Every time the user loads the website back, this cookie is sent with the request. This helps us keep track of the user’s actions.\n" +
                        "\n" +
                        "The following are the numerous uses of the HTTP Cookies −\n" +
                        "\n" +
                        "Session management\n" +
                        "Personalization(Recommendation systems)\n" +
                        "User tracking" +
                        "\n\n" +
                        "To use cookies with Express, we need the cookie-parser middleware. To install it, use the following code −\n" +
                        "\n" +
                        "npm install --save cookie-parser" +
                        "\n\n" +
                        "Now to use cookies with Express, we will require the cookie-parser. cookie-parser is a middleware which parses cookies attached to the client request object. To use it, we will require it in our index.js file; this can be used the same way as we use other middleware. Here, we will use the following code.\n" +
                        "\n" +
                        "var cookieParser = require('cookie-parser');\n" +
                        "app.use(cookieParser());\n" +
                        "cookie-parser parses Cookie header and populates req.cookies with an object keyed by the cookie names. To set a new cookie, let us define a new route in your Express app like −",
                "var express = require('express');\n" +
                        "var app = express();\n" +
                        "\n" +
                        "app.get('/', function(req, res){\n" +
                        "   res.cookie('name', 'express').send('cookie set'); //Sets name = express\n" +
                        "});\n" +
                        "\n" +
                        "app.listen(3000);",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Adding Cookies with Expiration Time",
                "ou can add cookies that expire. To add a cookie that expires, just pass an object with property 'expire' set to the time when you want it to expire. For example,",
                "//Expires after 360000 ms from the time it is set.\n" +
                        "res.cookie(name, 'value', {expire: 360000 + Date.now()}); ",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Deleting Existing Cookies",
                "To delete a cookie, use the clearCookie function. For example, if you need to clear a cookie named foo, use the following code.",
                "var express = require('express');\n" +
                        "var app = express();\n" +
                        "\n" +
                        "app.get('/clear_cookie_foo', function(req, res){\n" +
                        "   res.clearCookie('foo');\n" +
                        "   res.send('cookie foo cleared');\n" +
                        "});\n" +
                        "\n" +
                        "app.listen(3000);",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //ExpressJs Sessions
    private static List<LearnDetailsModel> ExpressJsSessions() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "How to use Sessions?",
                "HTTP is stateless; in order to associate a request to any other request, you need a way to store user data between HTTP requests. Cookies and URL parameters are both suitable ways to transport data between the client and the server. But they are both readable and on the client side. Sessions solve exactly this problem. You assign the client an ID and it makes all further requests using that ID. Information associated with the client is stored on the server linked to this ID.\n" +
                        "\n" +
                        "We will need the Express-session, so install it using the following code.\n" +
                        "\n" +
                        "npm install --save express-session",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "cookie-parser",
                "We will put the session and cookie-parser middleware in place. In this example, we will use the default store for storing sessions, i.e., MemoryStore. Never use this in production environments. The session middleware handles all things for us, i.e., creating the session, setting the session cookie and creating the session object in req object.\n" +
                        "\n" +
                        "Whenever we make a request from the same client again, we will have their session information stored with us (given that the server was not restarted). We can add more properties to the session object. In the following example, we will create a view counter for a client." +
                        "\n\n" +
                        "What the bellow code does is, when a user visits the site, it creates a new session for the user and assigns them a cookie. Next time the user comes, the cookie is checked and the page_view session variable is updated accordingly.\n" +
                        "\n" +
                        "Now if you run the app and go to localhost:3000, the following output will be displayed.",
                "var express = require('express');\n" +
                        "var cookieParser = require('cookie-parser');\n" +
                        "var session = require('express-session');\n" +
                        "\n" +
                        "var app = express();\n" +
                        "\n" +
                        "app.use(cookieParser());\n" +
                        "app.use(session({secret: \"Shh, its a secret!\"}));\n" +
                        "\n" +
                        "app.get('/', function(req, res){\n" +
                        "   if(req.session.page_views){\n" +
                        "      req.session.page_views++;\n" +
                        "      res.send(\"You visited this page \" + req.session.page_views + \" times\");\n" +
                        "   } else {\n" +
                        "      req.session.page_views = 1;\n" +
                        "      res.send(\"Welcome to this page for the first time!\");\n" +
                        "   }\n" +
                        "});\n" +
                        "app.listen(3000);",
                "Welcome to this page for the first time!"
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //ExpressJs Authentication
    private static List<LearnDetailsModel> ExpressJsAuthentication() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "How to use Authentication?",
                "Authentication is a process in which the credentials provided are compared to those on file in a database of authorized users' information on a local operating system or within an authentication server. If the credentials match, the process is completed and the user is granted authorization for access.\n" +
                        "\n" +
                        "For us to create an authentication system, we will need to create a sign up page and a user-password store. The following code creates an account for us and stores it in memory. This is just for the purpose of demo; it is recommended that a persistent storage (database or files) is always used to store user information.",
                "var express = require('express');\n" +
                        "var app = express();\n" +
                        "var bodyParser = require('body-parser');\n" +
                        "var multer = require('multer');\n" +
                        "var upload = multer(); \n" +
                        "var session = require('express-session');\n" +
                        "var cookieParser = require('cookie-parser');\n" +
                        "\n" +
                        "app.set('view engine', 'pug');\n" +
                        "app.set('views','./views');\n" +
                        "\n" +
                        "app.use(bodyParser.json());\n" +
                        "app.use(bodyParser.urlencoded({ extended: true })); \n" +
                        "app.use(upload.array());\n" +
                        "app.use(cookieParser());\n" +
                        "app.use(session({secret: \"Your secret key\"}));\n" +
                        "\n" +
                        "var Users = [];\n" +
                        "\n" +
                        "app.get('/signup', function(req, res){\n" +
                        "   res.render('signup');\n" +
                        "});\n" +
                        "\n" +
                        "app.post('/signup', function(req, res){\n" +
                        "   if(!req.body.id || !req.body.password){\n" +
                        "      res.status(\"400\");\n" +
                        "      res.send(\"Invalid details!\");\n" +
                        "   } else {\n" +
                        "      Users.filter(function(user){\n" +
                        "         if(user.id === req.body.id){\n" +
                        "            res.render('signup', {\n" +
                        "               message: \"User Already Exists! Login or choose another user id\"});\n" +
                        "         }\n" +
                        "      });\n" +
                        "      var newUser = {id: req.body.id, password: req.body.password};\n" +
                        "      Users.push(newUser);\n" +
                        "      req.session.user = newUser;\n" +
                        "      res.redirect('/protected_page');\n" +
                        "   }\n" +
                        "});\n" +
                        "\n" +
                        "app.listen(3000);",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "SIGNUP.JADE",
                "Now for the signup form, create a new view called signup.jade.",
                "html\n" +
                        "   head\n" +
                        "      title Signup\n" +
                        "   body\n" +
                        "      if(message)\n" +
                        "         h4 #{message}\n" +
                        "         form(action = \"/signup\" method = \"POST\")\n" +
                        "         input(name = \"id\" type = \"text\" required placeholder = \"User ID\")\n" +
                        "         input(name = \"password\" type = \"password\" required placeholder = \"Password\")\n" +
                        "         button(type = \"Submit\") Sign me up!",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //ExpressJs RESTFul APIs
    private static List<LearnDetailsModel> ExpressJsRESTFulAPIs() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is RESTFul APIs?",
                "An API is always needed to create mobile applications, single page applications, use AJAX calls and provide data to clients. An popular architectural style of how to structure and name these APIs and the endpoints is called REST(Representational Transfer State). HTTP 1.1 was designed keeping REST principles in mind. REST was introduced by Roy Fielding in 2000 in his Paper Fielding Dissertations.\n" +
                        "\n" +
                        "RESTful URIs and methods provide us with almost all information we need to process a request. The table given below summarizes how the various verbs should be used and how URIs should be named. We will be creating a movies API towards the end; let us now discuss how it will be structured.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "index.js",
                "Let us now create this API in Express. We will be using JSON as our transport data format as it is easy to work with in JavaScript and has other benefits. Replace your index.js file with the movies.js file as in the following program.",
                "var express = require('express');\n" +
                        "var bodyParser = require('body-parser');\n" +
                        "var multer = require('multer');\n" +
                        "var upload = multer();\n" +
                        "\n" +
                        "var app = express();\n" +
                        "\n" +
                        "app.use(cookieParser());\n" +
                        "app.use(bodyParser.json());\n" +
                        "app.use(bodyParser.urlencoded({ extended: true }));\n" +
                        "app.use(upload.array());\n" +
                        "\n" +
                        "//Require the Router we defined in movies.js\n" +
                        "var movies = require('./movies.js');\n" +
                        "\n" +
                        "//Use the Router on the sub route /movies\n" +
                        "app.use('/movies', movies);\n" +
                        "\n" +
                        "app.listen(3000);",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Router",
                "Start by setting up the movies.js file. We are not using a database to store the movies but are storing them in memory; so every time the server restarts, the movies added by us will vanish. This can easily be mimicked using a database or a file (using node fs module).\n" +
                        "\n" +
                        "Once you import Express then, create a Router and export it using module.exports −",
                "var express = require('express');\n" +
                        "var router = express.Router();\n" +
                        "var movies = [\n" +
                        "   {id: 101, name: \"Fight Club\", year: 1999, rating: 8.1},\n" +
                        "   {id: 102, name: \"Inception\", year: 2010, rating: 8.7},\n" +
                        "   {id: 103, name: \"The Dark Knight\", year: 2008, rating: 9},\n" +
                        "   {id: 104, name: \"12 Angry Men\", year: 1957, rating: 8.9}\n" +
                        "];\n" +
                        "\n" +
                        "//Routes will go here\n" +
                        "module.exports = router;",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "GET routes",
                "Let us define the GET route for getting all the movies −\n" +
                        "\n" +
                        "router.get('/', function(req, res){\n" +
                        "   res.json(movies);\n" +
                        "});\n" +
                        "To test out if this is working fine, run your app, then open your terminal and enter −\n" +
                        "\n" +
                        "curl -i -H \"Accept: application/json\" -H \"Content-Type: application/json\" -X GET \n" +
                        "localhost:3000/movies\n" +
                        "The following response will be displayed −\n" +
                        "\n" +
                        "[{\"id\":101,\"name\":\"Fight Club\",\"year\":1999,\"rating\":8.1},\n" +
                        "{\"id\":102,\"name\":\"Inception\",\"year\":2010,\"rating\":8.7},\n" +
                        "{\"id\":103,\"name\":\"The Dark Knight\",\"year\":2008,\"rating\":9},\n" +
                        "{\"id\":104,\"name\":\"12 Angry Men\",\"year\":1957,\"rating\":8.9}]\n" +
                        "We have a route to get all the movies. Let us now create a route to get a specific movie by its id.\n" +
                        "\n" +
                        "router.get('/:id([0-9]{3,})', function(req, res){\n" +
                        "   var currMovie = movies.filter(function(movie){\n" +
                        "      if(movie.id == req.params.id){\n" +
                        "         return true;\n" +
                        "      }\n" +
                        "   });\n" +
                        "   if(currMovie.length == 1){\n" +
                        "      res.json(currMovie[0])\n" +
                        "   } else {\n" +
                        "      res.status(404);//Set status to 404 as movie was not found\n" +
                        "      res.json({message: \"Not Found\"});\n" +
                        "   }\n" +
                        "});\n" +
                        "This will get us the movies according to the id that we provided. To check the output, use the following command in your terminal −\n" +
                        "\n" +
                        "curl -i -H \"Accept: application/json\" -H \"Content-Type: application/json\" -X GET \n" +
                        "localhost:3000/movies/101\n" +
                        "You'll get the following response −\n" +
                        "\n" +
                        "{\"id\":101,\"name\":\"Fight Club\",\"year\":1999,\"rating\":8.1}\n" +
                        "If you visit an invalid route, it will produce a cannot GET error while if you visit a valid route with an id that doesn’t exist, it will produce a 404 error.\n" +
                        "\n" +
                        "We are done with the GET routes, let us now move on to the POST route.",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "POST route",
                "Use the following route to handle the POSTed data −",
                "router.post('/', function(req, res){\n" +
                        "   //Check if all fields are provided and are valid:\n" +
                        "   if(!req.body.name ||\n" +
                        "      !req.body.year.toString().match(/^[0-9]{4}$/g) ||\n" +
                        "      !req.body.rating.toString().match(/^[0-9]\\.[0-9]$/g)){\n" +
                        "      \n" +
                        "      res.status(400);\n" +
                        "      res.json({message: \"Bad Request\"});\n" +
                        "   } else {\n" +
                        "      var newId = movies[movies.length-1].id+1;\n" +
                        "      movies.push({\n" +
                        "         id: newId,\n" +
                        "         name: req.body.name,\n" +
                        "         year: req.body.year,\n" +
                        "         rating: req.body.rating\n" +
                        "      });\n" +
                        "      res.json({message: \"New movie created.\", location: \"/movies/\" + newId});\n" +
                        "   }\n" +
                        "});",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "PUT route",
                "The PUT route is almost the same as the POST route. We will be specifying the id for the object that'll be updated/created. Create the route in the following way.",
                "router.put('/:id', function(req, res){\n" +
                        "   //Check if all fields are provided and are valid:\n" +
                        "   if(!req.body.name ||\n" +
                        "      !req.body.year.toString().match(/^[0-9]{4}$/g) ||\n" +
                        "      !req.body.rating.toString().match(/^[0-9]\\.[0-9]$/g) ||\n" +
                        "      !req.params.id.toString().match(/^[0-9]{3,}$/g)){\n" +
                        "      \n" +
                        "      res.status(400);\n" +
                        "      res.json({message: \"Bad Request\"});\n" +
                        "   } else {\n" +
                        "      //Gets us the index of movie with given id.\n" +
                        "      var updateIndex = movies.map(function(movie){\n" +
                        "         return movie.id;\n" +
                        "      }).indexOf(parseInt(req.params.id));\n" +
                        "      \n" +
                        "      if(updateIndex === -1){\n" +
                        "         //Movie not found, create new\n" +
                        "         movies.push({\n" +
                        "            id: req.params.id,\n" +
                        "            name: req.body.name,\n" +
                        "            year: req.body.year,\n" +
                        "            rating: req.body.rating\n" +
                        "         });\n" +
                        "         res.json({message: \"New movie created.\", location: \"/movies/\" + req.params.id});\n" +
                        "      } else {\n" +
                        "         //Update existing movie\n" +
                        "         movies[updateIndex] = {\n" +
                        "            id: req.params.id,\n" +
                        "            name: req.body.name,\n" +
                        "            year: req.body.year,\n" +
                        "            rating: req.body.rating\n" +
                        "         };\n" +
                        "         res.json({message: \"Movie id \" + req.params.id + \" updated.\", \n" +
                        "            location: \"/movies/\" + req.params.id});\n" +
                        "      }\n" +
                        "   }\n" +
                        "});",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "DELETE route",
                "Use the following code to create a delete route. −",
                "router.delete('/:id', function(req, res){\n" +
                        "   var removeIndex = movies.map(function(movie){\n" +
                        "      return movie.id;\n" +
                        "   }).indexOf(req.params.id); //Gets us the index of movie with given id.\n" +
                        "   \n" +
                        "   if(removeIndex === -1){\n" +
                        "      res.json({message: \"Not found\"});\n" +
                        "   } else {\n" +
                        "      movies.splice(removeIndex, 1);\n" +
                        "      res.send({message: \"Movie id \" + req.params.id + \" removed.\"});\n" +
                        "   }\n" +
                        "});",
                ""
        );
        final LearnDetailsModel l8 = new LearnDetailsModel(
                "movies.js",
                "Check the route in the same way as we checked the other routes. On successful deletion(for example id 105), you will get the following output −\n" +
                        "\n" +
                        "{message: \"Movie id 105 removed.\"}\n" +
                        "Finally, our movies.js file will look like the following.",
                "var express = require('express');\n" +
                        "var router = express.Router();\n" +
                        "var movies = [\n" +
                        "   {id: 101, name: \"Fight Club\", year: 1999, rating: 8.1},\n" +
                        "   {id: 102, name: \"Inception\", year: 2010, rating: 8.7},\n" +
                        "   {id: 103, name: \"The Dark Knight\", year: 2008, rating: 9},\n" +
                        "   {id: 104, name: \"12 Angry Men\", year: 1957, rating: 8.9}\n" +
                        "];\n" +
                        "router.get('/:id([0-9]{3,})', function(req, res){\n" +
                        "   var currMovie = movies.filter(function(movie){\n" +
                        "      if(movie.id == req.params.id){\n" +
                        "         return true;\n" +
                        "      }\n" +
                        "   });\n" +
                        "   \n" +
                        "   if(currMovie.length == 1){\n" +
                        "      res.json(currMovie[0])\n" +
                        "   } else {\n" +
                        "      res.status(404);  //Set status to 404 as movie was not found\n" +
                        "      res.json({message: \"Not Found\"});\n" +
                        "   }\n" +
                        "});\n" +
                        "router.post('/', function(req, res){\n" +
                        "   //Check if all fields are provided and are valid:\n" +
                        "   if(!req.body.name ||\n" +
                        "      !req.body.year.toString().match(/^[0-9]{4}$/g) ||\n" +
                        "      !req.body.rating.toString().match(/^[0-9]\\.[0-9]$/g)){\n" +
                        "      res.status(400);\n" +
                        "      res.json({message: \"Bad Request\"});\n" +
                        "   } else {\n" +
                        "      var newId = movies[movies.length-1].id+1;\n" +
                        "      movies.push({\n" +
                        "         id: newId,\n" +
                        "         name: req.body.name,\n" +
                        "         year: req.body.year,\n" +
                        "         rating: req.body.rating\n" +
                        "      });\n" +
                        "      res.json({message: \"New movie created.\", location: \"/movies/\" + newId});\n" +
                        "   }\n" +
                        "});\n" +
                        "\n" +
                        "router.put('/:id', function(req, res) {\n" +
                        "   //Check if all fields are provided and are valid:\n" +
                        "   if(!req.body.name ||\n" +
                        "      !req.body.year.toString().match(/^[0-9]{4}$/g) ||\n" +
                        "      !req.body.rating.toString().match(/^[0-9]\\.[0-9]$/g) ||\n" +
                        "      !req.params.id.toString().match(/^[0-9]{3,}$/g)){\n" +
                        "      res.status(400);\n" +
                        "      res.json({message: \"Bad Request\"});\n" +
                        "   } else {\n" +
                        "      //Gets us the index of movie with given id.\n" +
                        "      var updateIndex = movies.map(function(movie){\n" +
                        "         return movie.id;\n" +
                        "      }).indexOf(parseInt(req.params.id));\n" +
                        "      \n" +
                        "      if(updateIndex === -1){\n" +
                        "         //Movie not found, create new\n" +
                        "         movies.push({\n" +
                        "            id: req.params.id,\n" +
                        "            name: req.body.name,\n" +
                        "            year: req.body.year,\n" +
                        "            rating: req.body.rating\n" +
                        "         });\n" +
                        "         res.json({\n" +
                        "            message: \"New movie created.\", location: \"/movies/\" + req.params.id});\n" +
                        "      } else {\n" +
                        "         //Update existing movie\n" +
                        "         movies[updateIndex] = {\n" +
                        "            id: req.params.id,\n" +
                        "            name: req.body.name,\n" +
                        "            year: req.body.year,\n" +
                        "            rating: req.body.rating\n" +
                        "         };\n" +
                        "         res.json({message: \"Movie id \" + req.params.id + \" updated.\",\n" +
                        "            location: \"/movies/\" + req.params.id});\n" +
                        "      }\n" +
                        "   }\n" +
                        "});\n" +
                        "\n" +
                        "router.delete('/:id', function(req, res){\n" +
                        "   var removeIndex = movies.map(function(movie){\n" +
                        "      return movie.id;\n" +
                        "   }).indexOf(req.params.id); //Gets us the index of movie with given id.\n" +
                        "   \n" +
                        "   if(removeIndex === -1){\n" +
                        "      res.json({message: \"Not found\"});\n" +
                        "   } else {\n" +
                        "      movies.splice(removeIndex, 1);\n" +
                        "      res.send({message: \"Movie id \" + req.params.id + \" removed.\"});\n" +
                        "   }\n" +
                        "});\n" +
                        "module.exports = router;",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        list.add(l8);
        return list;
    }

    //ExpressJs Scaffolding
    private static List<LearnDetailsModel> ExpressJsScaffolding() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is Scaffolding?",
                "Scaffolding allows us to easily create a skeleton for a web application. We manually create our public directory, add middleware, create separate route files, etc. A scaffolding tool sets up all these things for us so that we can directly get started with building our application.\n" +
                        "\n" +
                        "The scaffolder we will use is called Yeoman. It is a scaffolding tool built for Node.js but also has generators for several other frameworks (like flask, rails, django, etc.). To install Yeoman, enter the following command in your terminal −\n" +
                        "\n" +
                        "npm install -g yeoman" +
                        "\n\n" +
                        "Yeoman uses generators to scaffold out applications. To check out the generators available on npm to use with Yeoman." +
                        "\n\n" +
                        "In this tutorial, we will use the 'generator-Express-simple'. To install this generator, enter the following command in your terminal −\n" +
                        "\n" +
                        "npm install -g generator-express-simple\n" +
                        "To use this generator, enter the following command −\n" +
                        "\n" +
                        "yo express-simple test-app",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "test-app",
                "You will be asked a few simple questions like what things you want to use with your app. Select the following answers, or if you already know about these technologies then go about choosing how you want them to be.",
                "express-simple comes with bootstrap and jquery\n" +
                        "[?] Select the express version you want: 4.x\n" +
                        "[?] Do you want an mvc express app: Yes\n" +
                        "[?] Select the css preprocessor you would like to use: sass\n" +
                        "[?] Select view engine you would like to use: jade\n" +
                        "[?] Select the build tool you want to use for this project: gulp\n" +
                        "[?] Select the build tool you want to use for this project: gulp\n" +
                        "[?] Select the language you want to use for the build tool: javascript\n" +
                        "   create public/sass/styles.scss\n" +
                        "   create public/js/main.js\n" +
                        "   create views/layout.jade\n" +
                        "   create views/index.jade\n" +
                        "   create views/404.jade\n" +
                        "   create app.js\n" +
                        "   create config.js\n" +
                        "   create routes/index.js\n" +
                        "   create package.json\n" +
                        "   create bower.json\n" +
                        "identical .bowerrc\n" +
                        "identical .editorconfig\n" +
                        "identical .gitignore\n" +
                        "identical .jshintrc\n" +
                        "   create gulpfile.js\n" +
                        "\n" +
                        "I'm all done. Running bower install & npm install for you to install the\n" +
                        "required dependencies. If this fails, try running the command yourself.",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //ExpressJs Error Handling
    private static List<LearnDetailsModel> ExpressJsErrorHandling() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "How to Handling the errors?",
                "Error handling in Express is done using middleware. But this middleware has special properties. The error handling middleware are defined in the same way as other middleware functions, except that error-handling functions MUST have four arguments instead of three – err, req, res, next. For example, to send a response on any error, we can use −",
                "app.use(function(err, req, res, next) {\n" +
                        "   console.error(err.stack);\n" +
                        "   res.status(500).send('Something broke!');\n" +
                        "});",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "next(err)",
                "For error handling, we have the next(err) function. A call to this function skips all middleware and matches us to the next error handler for that route. Let us understand this through an example.",
                "ar express = require('express');\n" +
                        "var app = express();\n" +
                        "\n" +
                        "app.get('/', function(req, res){\n" +
                        "   //Create an error and pass it to the next function\n" +
                        "   var err = new Error(\"Something went wrong\");\n" +
                        "   next(err);\n" +
                        "});\n" +
                        "\n" +
                        "/*\n" +
                        " * other route handlers and middleware here\n" +
                        " * ....\n" +
                        " */\n" +
                        "\n" +
                        "//An error handling middleware\n" +
                        "app.use(function(err, req, res, next) {\n" +
                        "   res.status(500);\n" +
                        "   res.send(\"Oops, something went wrong.\")\n" +
                        "});\n" +
                        "\n" +
                        "app.listen(3000);",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //ExpressJs Debugging
    private static List<LearnDetailsModel> ExpressJsDebugging() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Debugging",
                "Express uses the Debug module to internally log information about route matching, middleware functions, application mode, etc.\n" +
                        "\n" +
                        "To see all internal logs used in Express, set the DEBUG environment variable to Express:* when starting the app −",
                "DEBUG = express:* node index.js",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "DEBUG",
                "These logs are very helpful when a component of your app is not functioning right. This verbose output might be a little overwhelming. You can also restrict the DEBUG variable to specific area to be logged. For example, if you wish to restrict the logger to application and router, you can use the following code.",
                "DEBUG = express:application,express:router node index.js",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }

    //ExpressJs Best Practices
    private static List<LearnDetailsModel> ExpressJsBestPractices() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Best Practices for you",
                "Unlike Django and Rails which have a defined way of doing things, file structure, etc., Express does not follow a defined way. This means you can structure the application the way you like. But as your application grows in size, it is very difficult to maintain it if it doesn't have a well-defined structure. In this chapter, we will look at the generally used directory structures and separation of concerns to build our applications.\n" +
                        "\n" +
                        "First, we will discuss the best practices for creating node and Express applications.\n" +
                        "\n" +
                        "Always begin a node project using npm init.\n" +
                        "\n" +
                        "Always install dependencies with a --save or --save-dev. This will ensure that if you move to a different platform, you can just run npm install to install all dependencies.\n" +
                        "\n" +
                        "Stick with lowercase file names and camelCase variables. If you look at any npm module, its named in lowercase and separated with dashes. Whenever you require these modules, use camelCase.\n" +
                        "\n" +
                        "Don’t push node_modules to your repositories. Instead npm installs everything on development machines.\n" +
                        "\n" +
                        "Use a config file to store variables\n" +
                        "\n" +
                        "Group and isolate routes to their own file. For example, take the CRUD operations in the movies example we saw in the REST API page.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Directory Structure",
                "Let us now discuss the Express’ Directory Structure.\n" +
                        "\n" +
                        "Websites\n" +
                        "Express does not have a community defined structure for creating applications. The following is a majorly used project structure for a website.",
                "test-project/\n" +
                        "   node_modules/\n" +
                        "   config/\n" +
                        "      db.js                //Database connection and configuration\n" +
                        "      credentials.js       //Passwords/API keys for external services used by your app\n" +
                        "      config.js            //Other environment variables\n" +
                        "   models/                 //For mongoose schemas\n" +
                        "      users.js\n" +
                        "      things.js\n" +
                        "   routes/                 //All routes for different entities in different files \n" +
                        "      users.js\n" +
                        "      things.js\n" +
                        "   views/\n" +
                        "      index.pug\n" +
                        "      404.pug\n" +
                        "        ...\n" +
                        "   public/                 //All static content being served\n" +
                        "      images/\n" +
                        "      css/\n" +
                        "      javascript/\n" +
                        "   app.js\n" +
                        "   routes.js               //Require all routes in this and then require this file in \n" +
                        "   app.js \n" +
                        "   package.json",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "RESTful APIs",
                "APIs are simpler to design; they don't need a public or a views directory. Use the following structure to build APIs −",
                "test-project/\n" +
                        "   node_modules/\n" +
                        "   config/\n" +
                        "      db.js                //Database connection and configuration\n" +
                        "      credentials.js       //Passwords/API keys for external services used by your app\n" +
                        "   models/                 //For mongoose schemas\n" +
                        "      users.js\n" +
                        "      things.js\n" +
                        "   routes/                 //All routes for different entities in different files \n" +
                        "      users.js\n" +
                        "      things.js\n" +
                        "   app.js\n" +
                        "   routes.js               //Require all routes in this and then require this file in \n" +
                        "   app.js \n" +
                        "   package.json",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }

    //Bootstrap Introduction
    private static List<LearnDetailsModel> BootstrapIntroduction() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is Twitter Bootstrap?",
                "Bootstrap is a sleek, intuitive, and powerful, mobile first front-end framework for faster and easier web development. It uses HTML, CSS and Javascript.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "History",
                "Bootstrap was developed by Mark Otto and Jacob Thornton at Twitter. It was released as an open source product in August 2011 on GitHub.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Why Use Bootstrap?",
                "Mobile first approach − Bootstrap 4, framework consists of Mobile first styles throughout the entire library instead them of in separate files.\n" +
                        "\n" +
                        "Browser Support − It is supported by all popular browsers.\n" +
                        "\n" +
                        "Popular Browser\n" +
                        "Easy to get started − With just the knowledge of HTML and CSS anyone can get started with Bootstrap. Also the Bootstrap official site has a good documentation.\n" +
                        "\n" +
                        "Responsive design − Bootstrap's responsive CSS adjusts to Desktops, Tablets and Mobiles. More about the responsive design is in the chapter Bootstrap Responsive Design.\n" +
                        "\n" +
                        "Responsive Design\n" +
                        "Provides a clean and uniform solution for building an interface for developers.\n" +
                        "\n" +
                        "It contains beautiful and functional built-in components which are easy to customize.\n" +
                        "\n" +
                        "It also provides web based customization.\n" +
                        "\n" +
                        "And best of all it is an open source.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "What Bootstrap Package Includes?",
                "Scaffolding − Bootstrap provides a basic structure with Grid System, link styles, and background. This is is covered in detail in the section Bootstrap Basic Structure\n" +
                        "\n" +
                        "CSS − Bootstrap comes with the feature of global CSS settings, fundamental HTML elements styled and enhanced with extensible classes, and an advanced grid system. This is covered in detail in the section Bootstrap with CSS.\n" +
                        "\n" +
                        "Components − Bootstrap contains over a dozen reusable components built to provide iconography, dropdowns, navigation, alerts, pop-overs, and much more. This is covered in detail in the section Layout Components.\n" +
                        "\n" +
                        "JavaScript Plugins − Bootstrap contains over a dozen custom jQuery plugins. You can easily include them all, or one by one. This is covered in details in the section Bootstrap Plugins.\n" +
                        "\n" +
                        "Customize − You can customize Bootstrap's components, LESS variables, and jQuery plugins to get your very own version.",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Hello World using Bootstrap.",
                "Just to give you a little excitement about Bootstrap, I'm going to give you a small conventional Bootstrap Hello World program.",
                "<!DOCTYPE html>\n" +
                        "<html>\n" +
                        "   \n" +
                        "   <head>\n" +
                        "      <title>Bootstrap 101 Template</title>\n" +
                        "      <meta name = \"viewport\" content = \"width = device-width, initial-scale = 1.0\">\n" +
                        "      \n" +
                        "      <!-- Bootstrap -->\n" +
                        "      <link href = \"css/bootstrap.min.css\" rel = \"stylesheet\">\n" +
                        "      \n" +
                        "      <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->\n" +
                        "      <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->\n" +
                        "      \n" +
                        "      <!--[if lt IE 9]>\n" +
                        "      <script src = \"https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\"></script>\n" +
                        "      <script src = \"https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js\"></script>\n" +
                        "      <![endif]-->\n" +
                        "      \n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>\n" +
                        "      <h1>Hello, world!</h1>\n" +
                        "\n" +
                        "      <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->\n" +
                        "      <script src = \"https://code.jquery.com/jquery.js\"></script>\n" +
                        "      \n" +
                        "      <!-- Include all compiled plugins (below), or include individual files as needed -->\n" +
                        "      <script src = \"js/bootstrap.min.js\"></script>\n" +
                        "      \n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Audience",
                "This tutorial has been prepared for anyone who has a basic knowledge of HTML and CSS and has an urge to develop websites. After completing this tutorial you will find yourself at a moderate level of expertise in developing web projects using Twitter Bootstrap.",
                "",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Prerequisites",
                "Before you start proceeding with this tutorial, we are assuming that you are already aware about the basics of HTML and CSS. If you are not well aware of these concepts then we will suggest you to go through our short tutorial on HTML Tutorial and CSS Tutorial.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        return list;
    }

    //Bootstrap Grid System
    private static List<LearnDetailsModel> BootstrapGridSystem() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is a Grid?",
                "As put by wikipedia −\n" +
                        "\n" +
                        "In graphic design, a grid is a structure (usually two-dimensional) made up of a series of intersecting straight (vertical, horizontal) lines used to structure the content. It is widely used to design layout and content structure in print design. In web design, it is a very effective method to create a consistent layout rapidly and effectively using HTML and CSS.\n" +
                        "To put in simple words, grids in web design organise and structure content, makes the websites easy to scan and reduces the cognitive load on users.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "What is Bootstrap Grid System?",
                "As put by the official documentation of Bootstrap for grid system −\n" +
                        "\n" +
                        "Bootstrap includes a responsive, mobile first fluid grid system that appropriately scales up to 12 columns as the device or viewport size increases. It includes predefined classes for easy layout options, as well as powerful mixins for generating more semantic layouts.\n" +
                        "Let us understand the above statement. Bootstrap 3 is mobile first in the sense that the code for Bootstrap now starts by targeting smaller screens like mobile devices, tablets, and then “expands” components and grids for larger screens such as laptops, desktops.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Mobile First Strategy",
                "Content\n" +
                        "\n" +
                        "Determine what is most important.\n" +
                        "Layout\n" +
                        "\n" +
                        "Design to smaller widths first.\n" +
                        "Base CSS address mobile device first; media queries address for tablet, desktops.\n" +
                        "Progressive Enhancement\n" +
                        "\n" +
                        "Add elements as screen size increases.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Working of Bootstrap Grid System",
                "Grid systems are used for creating page layouts through a series of rows and columns that house your content. Here's how the Bootstrap grid system works −\n" +
                        "\n" +
                        "Rows must be placed within a .container class for proper alignment and padding.\n" +
                        "\n" +
                        "Use rows to create horizontal groups of columns.\n" +
                        "\n" +
                        "Content should be placed within the columns, and only columns may be the immediate children of rows.\n" +
                        "\n" +
                        "Predefined grid classes like .row and .col-xs-4 are available for quickly making grid layouts. LESS mixins can also be used for more semantic layouts.\n" +
                        "\n" +
                        "Columns create gutters (gaps between column content) via padding. That padding is offset in rows for the first and the last column via negative margin on .rows.\n" +
                        "\n" +
                        "Grid columns are created by specifying the number of twelve available columns you wish to span. For example, three equal columns would use three .col-xs-4.",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Media Queries",
                "Media query is a really fancy term for \"conditional CSS rule\". It simply applies some CSS, based on certain conditions set forth. If those conditions are met, the style is applied.\n" +
                        "\n" +
                        "Media Queries in Bootstrap allow you to move, show and hide content based on the viewport size. Following media queries are used in LESS files to create the key breakpoints in the Bootstrap grid system.",
                "/* Extra small devices (phones, less than 768px) */\n" +
                        "/* No media query since this is the default in Bootstrap */\n" +
                        "\n" +
                        "/* Small devices (tablets, 768px and up) */\n" +
                        "@media (min-width: @screen-sm-min) { ... }\n" +
                        "\n" +
                        "/* Medium devices (desktops, 992px and up) */\n" +
                        "@media (min-width: @screen-md-min) { ... }\n" +
                        "\n" +
                        "/* Large devices (large desktops, 1200px and up) */\n" +
                        "@media (min-width: @screen-lg-min) { ... }" +
                        "\n\n" +
                        "@media (max-width: @screen-xs-max) { ... }\n" +
                        "@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) { ... }\n" +
                        "@media (min-width: @screen-md-min) and (max-width: @screen-md-max) { ... }\n" +
                        "@media (min-width: @screen-lg-min) { ... }",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Basic Grid Structure",
                "Following is basic structure of Bootstrap grid −",
                "<div class = \"container\">\n" +
                        "\n" +
                        "   <div class = \"row\">\n" +
                        "      <div class = \"col-*-*\"></div>\n" +
                        "      <div class = \"col-*-*\"></div>\n" +
                        "   </div>\n" +
                        "   \n" +
                        "   <div class = \"row\">...</div>\n" +
                        "\t\n" +
                        "</div>\n" +
                        "\n" +
                        "<div class = \"container\">\n" +
                        "   ....\n" +
                        "</div>",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Responsive column resets",
                "With the four tiers of grids available, you are bound to run into issues where at certain breakpoints, the columns don't clear quite right as one is taller than the other. To fix that, use a combination of a class .clearfix and the responsive utility classes as shown in the following example −",
                "<div class = \"container\">\n" +
                        "   <div class = \"row\" >\n" +
                        "   \n" +
                        "      <div class = \"col-xs-6 col-sm-3\" style = \"background-color: #dedef8;\n" +
                        "         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n" +
                        "         \n" +
                        "         <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <div class = \"col-xs-6 col-sm-3\" style = \"background-color: #dedef8;\n" +
                        "         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n" +
                        "         \n" +
                        "         <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do \n" +
                        "            eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut \n" +
                        "            enim ad minim veniam, quis nostrud exercitation ullamco laboris \n" +
                        "            nisi ut aliquip ex ea commodo consequat.</p>\n" +
                        "         \n" +
                        "         <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do \n" +
                        "            eiusmod tempor incididunt ut.</p>\n" +
                        "      </div>\n" +
                        "\n" +
                        "      <div class = \"clearfix visible-xs\"></div>\n" +
                        "      \n" +
                        "      <div class = \"col-xs-6 col-sm-3\" style = \"background-color: #dedef8;\n" +
                        "         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n" +
                        "         \n" +
                        "         <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco \n" +
                        "            laboris nisi ut aliquip ex ea commodo consequat.</p>\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <div class = \"col-xs-6 col-sm-3\" style = \"background-color: #dedef8;\n" +
                        "         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n" +
                        "         \n" +
                        "         <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do \n" +
                        "            eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut \n" +
                        "            enim ad minim</p>\n" +
                        "      </div>\n" +
                        "      \n" +
                        "   </div>\n" +
                        "</div>",
                ""
        );
        final LearnDetailsModel l8 = new LearnDetailsModel(
                "Offset Columns",
                "Offsets are a useful feature for more specialized layouts. They can be used to push columns over for more spacing, (for example). The .col-xs = * classes don’t support offsets, but they are easily replicated by using an empty cell.\n" +
                        "\n" +
                        "To use offsets on large displays, use the .col-md-offset-* classes. These classes increase the left margin of a column by * columns where * range from 1 to 11.\n" +
                        "\n" +
                        "In the following example, we have <div class = \"col-md-6\">..</div>, We will center this using class .col-md-offset-3.",
                "<div class = \"container\">\n" +
                        "\n" +
                        "   <h1>Hello, world!</h1>\n" +
                        "\n" +
                        "   <div class = \"row\" >\n" +
                        "      <div class = \"col-xs-6 col-md-offset-3\" style = \"background-color: #dedef8; \n" +
                        "         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n" +
                        "         \n" +
                        "         <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>\n" +
                        "      </div>\n" +
                        "\n" +
                        "   </div>\n" +
                        "\t\n" +
                        "</div>",
                ""
        );
        final LearnDetailsModel l9 = new LearnDetailsModel(
                "Nesting columns",
                "To nest your content with the default grid, add a new .row and set of .col-md-* columns within an existing .col-md-* column. Nested rows should include a set of columns that add up to 12.\n" +
                        "\n" +
                        "In the following example, the layout has two columns, with the second one being split into four boxes over two rows.",
                "<div class = \"container\">\n" +
                        "   <h1>Hello, world!</h1>\n" +
                        "\n" +
                        "   <div class = \"row\">\n" +
                        "\n" +
                        "      <div class = \"col-md-3\" style = \"background-color: #dedef8; \n" +
                        "         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n" +
                        "         \n" +
                        "         <h4>First Column</h4>\n" +
                        "         <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</p>\n" +
                        "      </div>\n" +
                        "\n" +
                        "      <div class = \"col-md-9\" style = \"background-color: #dedef8;\n" +
                        "         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n" +
                        "         \n" +
                        "         <h4>Second Column- Split into 4 boxes</h4>\n" +
                        "         <div class = \"row\">\n" +
                        "            \n" +
                        "            <div class = \"col-md-6\" style = \"background-color: #B18904;\n" +
                        "               box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n" +
                        "               \n" +
                        "               <p>Consectetur art party Tonx culpa semiotics. \n" +
                        "                  Pinterest assumenda minim organic quis.</p>\n" +
                        "            </div>\n" +
                        "            \n" +
                        "            <div class = \"col-md-6\" style = \"background-color: #B18904;\n" +
                        "               box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n" +
                        "               \n" +
                        "               <p>sed do eiusmod tempor incididunt ut labore et dolore magna \n" +
                        "                  aliqua. Ut enim ad minim veniam, quis nostrud exercitation \n" +
                        "                  ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>\n" +
                        "            </div>\n" +
                        "\t\t\t\t\n" +
                        "         </div>\n" +
                        "\n" +
                        "         <div class = \"row\">\n" +
                        "\t\t\t\n" +
                        "            <div class = \"col-md-6\" style = \"background-color: #B18904;\n" +
                        "               box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n" +
                        "               \n" +
                        "               <p>quis nostrud exercitation ullamco laboris nisi ut aliquip \n" +
                        "                  ex ea commodo consequat.</p>\n" +
                        "            </div>   \n" +
                        "            \n" +
                        "            <div class = \"col-md-6\" style = \"background-color: #B18904;\n" +
                        "               box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n" +
                        "               \n" +
                        "               <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n" +
                        "                  sed do eiusmod tempor incididunt ut labore et dolore magna \n" +
                        "                  aliqua. Ut enim ad minim.</p>\n" +
                        "            </div>\n" +
                        "\t\t\t\t\n" +
                        "         </div>\n" +
                        "\n" +
                        "      </div>\n" +
                        "\n" +
                        "   </div>\n" +
                        "\t\n" +
                        "</div>",
                ""
        );
        final LearnDetailsModel l10 = new LearnDetailsModel(
                "Column Ordering",
                "Another nice feature of Bootstrap grid system is that you can easily write the columns in an order, and show them in another one. You can easily change the order of built-in grid columns with .col-md-push-* and .col-md-pull-* modifier classes where * range from 1 to 11.\n" +
                        "\n" +
                        "In the following example we have two columns layout with left column being the narrowest and acting as a sidebar. We will swap the order of these columns using .col-md-push-* and .col-md-pull-* classes.",
                "<div class = \"container\">\n" +
                        "   <h1>Hello, world!</h1>\n" +
                        "   \n" +
                        "   <div class = \"row\">\n" +
                        "      <p>Before Ordering</p>\n" +
                        "      \n" +
                        "      <div class = \"col-md-4\" style = \"background-color: #dedef8;\n" +
                        "         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n" +
                        "         \n" +
                        "         I am on left\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <div class = \"col-md-8\" style = \"background-color: #dedef8;\n" +
                        "         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n" +
                        "         \n" +
                        "         I am on right\n" +
                        "      </div>\n" +
                        "      \n" +
                        "   </div>\n" +
                        "\t\n" +
                        "   <br>\n" +
                        "   \n" +
                        "   <div class = \"row\">\n" +
                        "      <p>After Ordering</p>\n" +
                        "      \n" +
                        "      <div class = \"col-md-4 col-md-push-8\" style = \"background-color: #dedef8;\n" +
                        "         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n" +
                        "         \n" +
                        "         I was on left\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <div class = \"col-md-8 col-md-pull-4\" style = \"background-color: #dedef8;\n" +
                        "         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n" +
                        "         \n" +
                        "         I was on right\n" +
                        "      </div>\n" +
                        "\t\t\n" +
                        "   </div>\n" +
                        "\n" +
                        "</div>",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        list.add(l8);
        list.add(l9);
        list.add(l10);

        return list;
    }

    //Bootstrap CSS Overview
    private static List<LearnDetailsModel> BootstrapCSSOverview() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "HTML5 doctype",
                "Bootstrap makes use of certain HTML elements and CSS properties that require the use of the HTML5 doctype. Hence include the below piece of code for HTML5 doctype at the beginning of all your projects using Bootstrap.",
                "<!DOCTYPE html>\n" +
                        "<html>\n" +
                        "   ....\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Mobile First",
                "Since Bootstrap 3 has been launched, Bootstrap has become mobile first. It means 'mobile first' styles can be found throughout the entire library instead of them in separate files. You need to add the viewport meta tag to the <head> element, to ensure proper rendering and touch zooming on mobile devices." +
                        "\n\n" +
                        "width property controls the width of the device. Setting it to device-width will make sure that it is rendered across various devices (mobiles, desktops, tablets...) properly.\n" +
                        "\n" +
                        "initial-scale = 1.0 ensures that when loaded, your web page will be rendered at a 1:1 scale, and no zooming will be applied out of the box.\n" +
                        "\n" +
                        "Add user-scalable = no to the content attribute to disable zooming capabilities on mobile devices as shown below. Users are only able to scroll and not zoom with this change, and results in your site feeling a bit more like a native application." +
                        "\n\n" +
                        "Normally maximum-scale = 1.0 is used along with user-scalable = no. As mentioned above user-scalable = no may give users an experience more like a native app, hence Bootstrap doesn't recommend using this attribute.",
                "<meta name = \"viewport\" content = \"width = device-width, initial-scale = 1.0\">" +
                        "\n\n" +
                        "<meta name = \"viewport\" content = \"width = device-width, initial-scale = 1.0, maximum-scale = 1.0, user-scalable = no\">",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Responsive Images",
                "Bootstrap 3 allows you to make the images responsive by adding a class .img-responsive to the <img> tag. This class applies max-width: 100%; and height: auto; to the image so that it scales nicely to the parent element.",
                "<img src = \"...\" class = \"img-responsive\" alt = \"Responsive image\">",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Typography and Links",
                "Bootstrap sets a basic global display (background), typography, and link styles −\n" +
                        "\n" +
                        "Basic Global display − Sets background-color: #fff; on the <body> element.\n" +
                        "\n" +
                        "Typography − Uses the @font-family-base, @font-size-base, and @line-height-base attributes as the typographic base.\n" +
                        "\n" +
                        "Link styles − Sets the global link color via attribute @link-color and apply link underlines only on :hover.\n" +
                        "\n" +
                        "If you intend to use LESS code, you may find all these within scaffolding.less.",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Normalize",
                "Bootstrap uses Normalize to establish cross browser consistency.\n" +
                        "\n" +
                        "Normalize.css is a modern, HTML5-ready alternative to CSS resets. It is a small CSS file that provides better cross-browser consistency in the default styling of HTML elements.",
                "",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Containers",
                "Use class .container to wrap a page's content and easily center the content's as shown below.",
                "<div class = \"container\">\n" +
                        "   ...\n" +
                        "</div>",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        return list;
    }

    //Bootstrap Typography
    private static List<LearnDetailsModel> BootstrapTypography() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Headings",
                "All HTML headings (h1 to h6) are styled in Bootstrap. An example is shown below −",
                "<h1>I'm Heading1 h1</h1>\n" +
                        "<h2>I'm Heading2 h2</h2>\n" +
                        "<h3>I'm Heading3 h3</h3>\n" +
                        "<h4>I'm Heading4 h4</h4>\n" +
                        "<h5>I'm Heading5 h5</h5>\n" +
                        "<h6>I'm Heading6 h6</h6>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Inline Subheadings",
                "To add an inline subheading to any of the headings, simply add <small> around any of the elements or add .small class and you will get smaller text in a lighter color as shown in the example below −",
                "<h1>I'm Heading1 h1. <small>I'm secondary Heading1 h1</small></h1> \n" +
                        "<h2>I'm Heading2 h2. <small>I'm secondary Heading2 h2</small></h2>\n" +
                        "<h3>I'm Heading3 h3. <small>I'm secondary Heading3 h3</small></h3>\n" +
                        "<h4>I'm Heading4 h4. <small>I'm secondary Heading4 h4</small></h4>\n" +
                        "<h5>I'm Heading5 h5. <small>I'm secondary Heading5 h5</small></h5>\n" +
                        "<h6>I'm Heading6 h6. <small>I'm secondary Heading1 h6</small></h6>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Lead Body Copy",
                "To add some emphasis to a paragraph, add class = \"lead\". This will give you a larger font size, lighter weight, and a taller line height as in the following example −",
                "<h2>Lead Example</h2>\n" +
                        "<p class = \"lead\">This is an example paragraph demonstrating \n" +
                        "   the use of lead body copy. This is an example paragraph \n" +
                        "   demonstrating the use of lead body copy.This is an example \n" +
                        "   paragraph demonstrating the use of lead body copy.This is an \n" +
                        "   example paragraph demonstrating the use of lead body copy.\n" +
                        "   This is an example paragraph demonstrating the use of lead body copy.</p>",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Emphasis",
                "HTML's default emphasis tags such as <small> sets text at 85% the size of the parent, <strong> emphasizes a text with heavier font-weight, and <em> emphasizes a text in italics.\n" +
                        "\n" +
                        "Bootstrap offers a few classes that can be used to provide emphasis on texts as seen in the following example −",
                "<small>This content is within tag</small><br>\n" +
                        "<strong>This content is within tag</strong><br>\n" +
                        "<em>This content is within tag and is rendered as italics</em><br>\n" +
                        "\n" +
                        "<p class = \"text-left\">Left aligned text.</p>\n" +
                        "<p class = \"text-center\">Center aligned text.</p>\n" +
                        "<p class = \"text-right\">Right aligned text.</p>\n" +
                        "<p class = \"text-muted\">This content is muted</p>\n" +
                        "<p class = \"text-primary\">This content carries a primary class</p>\n" +
                        "<p class = \"text-success\">This content carries a success class</p>\n" +
                        "<p class = \"text-info\">This content carries a info class</p>\n" +
                        "<p class = \"text-warning\">This content carries a warning class</p>\n" +
                        "<p class = \"text-danger\">This content carries a danger class</p>",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Abbreviations",
                "The HTML <abbr> element provides markup for abbreviations or acronyms, like WWW or HTTP. Bootstrap styles <abbr> elements with a light dotted border along the bottom and reveals the full text on hover (as long as you add that text to the <abbr> title attribute). To get a a slightly smaller font size add .initialism to <abbr>.",
                "<abbr title = \"World Wide Web\">WWW</abbr><br>\n" +
                        "<abbr title = \"Real Simple Syndication\" class = \"initialism\">RSS</abbr>",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Addresses",
                "Using <address> tag you can display the contact information on your web page. Since the <address> defaults to display: block; you’ll need to use\n" +
                        "\n" +
                        "Tags to add line breaks to the enclosed address text.",
                "<address>\n" +
                        "   <strong>Some Company, Inc.</strong><br>\n" +
                        "   007 street<br>\n" +
                        "   Some City, State XXXXX<br>\n" +
                        "   <abbr title = \"Phone\">P:</abbr> (123) 456-7890\n" +
                        "</address>\n" +
                        "\n" +
                        "<address>\n" +
                        "   <strong>Full Name</strong><br>\n" +
                        "   <a href = \"mailto:#\">mailto@somedomain.com</a>\n" +
                        "</address>",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Blockquotes",
                "You can use the default <blockquote> around any HTML text. Other options include, adding a <small> tag for identifying the source of the quote and right-aligning the blockquote using class .pull-right. The following example demonstrates all these features −",
                "<blockquote>\n" +
                        "   <p>This is a default blockquote example. This is a default \n" +
                        "      blockquote example. This is a default blockquote \n" +
                        "      example.This is a default blockquote example. This is a \n" +
                        "      default blockquote example.</p>\n" +
                        "</blockquote>\n" +
                        "\n" +
                        "<blockquote>\n" +
                        "   This is a blockquote with a source title.\n" +
                        "   <small>Someone famous in <cite title = \"Source Title\">Source Title</cite></small>\n" +
                        "</blockquote>\n" +
                        "\n" +
                        "<blockquote class = \"pull-right\">This is a blockquote aligned to the right.\n" +
                        "   <small>Someone famous in <cite title = \"Source Title\">Source Title</cite></small>\n" +
                        "</blockquote>",
                ""
        );
        final LearnDetailsModel l8 = new LearnDetailsModel(
                "Lists",
                "Bootstrap supports ordered lists, unordered lists, and definition lists.\n" +
                        "\n" +
                        "Ordered lists − An ordered list is a list that falls in some sort of sequential order and is prefaced by numbers.\n" +
                        "\n" +
                        "Unordered lists − An unordered list is a list that doesn’t have any particular order and is traditionally styled with bullets. If you do not want the bullets to appear, then you can remove the styling by using the class .list-unstyled. You can also place all list items on a single line using the class .list-inline.\n" +
                        "\n" +
                        "Definition lists − In this type of list, each list item can consist of both the <dt> and the <dd> elements. <dt> stands for definition term, and like a dictionary, this is the term (or phrase) that is being defined. Subsequently, the <dd> is the definition of the <dt>. You can make terms and descriptions in <dl> line up side-by-side using class dl-horizontal.\n" +
                        "\n" +
                        "The following example demonstrates each of these types −",
                "<h4>Example of Ordered List</h4>\n" +
                        "<ol>\n" +
                        "   <li>Item 1</li>\n" +
                        "   <li>Item 2</li>\n" +
                        "   <li>Item 3</li>\n" +
                        "   <li>Item 4</li>\n" +
                        "</ol>\n" +
                        "\n" +
                        "<h4>Example of UnOrdered List</h4>\n" +
                        "\n" +
                        "<ul>\n" +
                        "   <li>Item 1</li>\n" +
                        "   <li>Item 2</li>\n" +
                        "   <li>Item 3</li>\n" +
                        "   <li>Item 4</li>\n" +
                        "</ul>\n" +
                        "\n" +
                        "<h4>Example of Unstyled List</h4>\n" +
                        "\n" +
                        "<ul class = \"list-unstyled\">\n" +
                        "   <li>Item 1</li>\n" +
                        "   <li>Item 2</li>\n" +
                        "   <li>Item 3</li>\n" +
                        "   <li>Item 4</li>\n" +
                        "</ul>\n" +
                        "\n" +
                        "<h4>Example of Inline List</h4>\n" +
                        "\n" +
                        "<ul class = \"list-inline\">\n" +
                        "   <li>Item 1</li>\n" +
                        "   <li>Item 2</li>\n" +
                        "   <li>Item 3</li>\n" +
                        "   <li>Item 4</li>\n" +
                        "</ul>\n" +
                        "\n" +
                        "<h4>Example of Definition List</h4>\n" +
                        "\n" +
                        "<dl>\n" +
                        "   <dt>Description 1</dt>\n" +
                        "   <dd>Item 1</dd>\n" +
                        "   <dt>Description 2</dt>\n" +
                        "   <dd>Item 2</dd>\n" +
                        "</dl>\n" +
                        "\n" +
                        "<h4>Example of Horizontal Definition List</h4>\n" +
                        "\n" +
                        "<dl class = \"dl-horizontal\">\n" +
                        "   <dt>Description 1</dt>\n" +
                        "   <dd>Item 1</dd>\n" +
                        "   <dt>Description 2</dt>\n" +
                        "   <dd>Item 2</dd>\n" +
                        "</dl>",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        list.add(l8);
        return list;
    }
    //Bootstrap Code
    private static List<LearnDetailsModel> BootstrapCode(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Bootstrap Code",
                "Bootstrap allows you to display code with two different key ways −\n" +
                        "\n" +
                        "The first is the <code> tag. If you are going to be displaying code inline, you should use the <code> tag.\n" +
                        "\n" +
                        "Second is the <pre> tag. If the code needs to be displayed as a standalone block element or if it has multiple lines, then you should use the <pre> tag.\n" +
                        "\n" +
                        "Make sure that when you use the <pre> and <code> tags, you use the unicode variants for the opening and closing tags − &lt; and &gt;.\n" +
                        "Let us see an example below −",
                "<p><code>&lt;header&gt;</code> is wrapped as an inline element.</p>\n" +
                        "<p>To display code as a standalone block element use &lt;pre&gt; tag as:</p>\n" +
                        "\n" +
                        "<pre>\n" +
                        "   &lt;article&gt;\n" +
                        "      &lt;h1&gt;Article Heading&lt;/h1&gt;\n" +
                        "   &lt;/article&gt;\n" +
                        "</pre>",
                ""
        );
        list.add(l1);
        return list;
    }
    //Bootstrap Tables
    private static List<LearnDetailsModel> BootstrapTables(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Bootstrap Tables",
                "Bootstrap provides a clean layout for building tables. Some of the table elements supported by Bootstrap are −" +
                        "\n\n" +
                        "1. <table>\n" +
                        "\n" +
                        "Wrapping element for displaying data in a tabular format\n" +
                        "\n" +
                        "2. <thead>\n" +
                        "\n" +
                        "Container element for table header rows (<tr>) to label table columns.\n" +
                        "\n" +
                        "3. <tbody>\n" +
                        "\n" +
                        "Container element for table rows (<tr>) in the body of the table.\n" +
                        "\n" +
                        "4. <tr>\n" +
                        "\n" +
                        "Container element for a set of table cells (<td> or <th>) that appears on a single row.\n" +
                        "\n" +
                        "5. <td>\n" +
                        "\n" +
                        "Default table cell.\n" +
                        "\n" +
                        "6. <th>\n" +
                        "\n" +
                        "Special table cell for column (or row, depending on scope and placement) labels. Must be used within a <thead>\n" +
                        "\n" +
                        "7. <caption>\n" +
                        "\n" +
                        "Description or summary of what the table holds.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Basic Table",
                "If you want a nice, basic table style with just some light padding and horizontal dividers, add the base class of .table to any table as shown in the following example −",
                "<table class = \"table\">\n" +
                        "   <caption>Basic Table Layout</caption>\n" +
                        "   \n" +
                        "   <thead>\n" +
                        "      <tr>\n" +
                        "         <th>Name</th>\n" +
                        "         <th>City</th>\n" +
                        "      </tr>\n" +
                        "   </thead>\n" +
                        "   \n" +
                        "   <tbody>\n" +
                        "      <tr>\n" +
                        "         <td>Anne</td>\n" +
                        "         <td>USA</td>\n" +
                        "      </tr>\n" +
                        "      \n" +
                        "      <tr>\n" +
                        "         <td>Emma</td>\n" +
                        "         <td>NewYork</td>\n" +
                        "      </tr>\n" +
                        "   </tbody>\n" +
                        "</table>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Optional Table Classes",
                "Along with the base table markup and the .table class, there are a few additional classes that you can use to style the markup. Following sections will give you a glimpse of all these classes.\n" +
                        "\n" +
                        "Striped Table\n" +
                        "By adding the .table-striped class, you will get stripes on rows within the <tbody> as seen in the following example −",
                "<table class = \"table table-striped\">\n" +
                        "   <caption>Striped Table Layout</caption>\n" +
                        "   \n" +
                        "   <thead>\n" +
                        "      <tr>\n" +
                        "         <th>Name</th>\n" +
                        "         <th>City</th>\n" +
                        "         <th>Pincode</th>\n" +
                        "      </tr>\n" +
                        "   </thead>\n" +
                        "   \n" +
                        "   <tbody>\n" +
                        "      <tr>\n" +
                        "         <td>Anne</td>\n" +
                        "         <td>USA</td>\n" +
                        "         <td>92002</td>\n" +
                        "      </tr>\n" +
                        "      \n" +
                        "      <tr>\n" +
                        "         <td>Emma</td>\n" +
                        "         <td>NewYork</td>\n" +
                        "         <td>20054</td>\n" +
                        "      </tr>\n" +
                        "      \n" +
                        "      <tr>\n" +
                        "         <td>David</td>\n" +
                        "         <td>London</td>\n" +
                        "         <td>45215</td>\n" +
                        "      </tr>\n" +
                        "   </tbody>\n" +
                        "</table>",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Bordered Table",
                "By adding the .table-bordered class, you will get borders surrounding every element and rounded corners around the entire table as seen in the following example −",
                "<table class = \"table table-bordered\">\n" +
                        "   <caption>Bordered Table Layout</caption>\n" +
                        "   \n" +
                        "   <thead>\n" +
                        "      <tr>\n" +
                        "         <th>Name</th>\n" +
                        "         <th>City</th>\n" +
                        "         <th>Pincode</th>\n" +
                        "      </tr>\n" +
                        "   </thead>\n" +
                        "   \n" +
                        "   <tbody>\n" +
                        "      <tr>\n" +
                        "         <td>Anne</td>\n" +
                        "         <td>USA</td>\n" +
                        "         <td>92002</td>\n" +
                        "      </tr>\n" +
                        "      \n" +
                        "      <tr>\n" +
                        "         <td>Emma</td>\n" +
                        "         <td>NewYork</td>\n" +
                        "         <td>20054</td>\n" +
                        "      </tr>\n" +
                        "      \n" +
                        "      <tr>\n" +
                        "         <td>David</td>\n" +
                        "         <td>London</td>\n" +
                        "         <td>45215</td>\n" +
                        "      </tr>\n" +
                        "   </tbody>\n" +
                        "\t\n" +
                        "</table>",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Hover Table",
                "By adding the .table-hover class, a light gray background will be added to rows while the cursor hovers over them, as seen in the following example −",
                "<table class = \"table table-hover\">\n" +
                        "   <caption>Hover Table Layout</caption>\n" +
                        "   \n" +
                        "   <thead>\n" +
                        "      <tr>\n" +
                        "         <th>Name</th>\n" +
                        "         <th>City</th>\n" +
                        "         <th>Pincode</th>\n" +
                        "      </tr>\n" +
                        "   </thead>\n" +
                        "   \n" +
                        "   <tbody>\n" +
                        "      <tr>\n" +
                        "         <td>Anne</td>\n" +
                        "         <td>USA</td>\n" +
                        "         <td>92002</td>\n" +
                        "      </tr>\n" +
                        "      \n" +
                        "      <tr>\n" +
                        "         <td>Emma</td>\n" +
                        "         <td>NewYork</td>\n" +
                        "         <td>20054</td>\n" +
                        "      </tr>\n" +
                        "      \n" +
                        "      <tr>\n" +
                        "         <td>David</td>\n" +
                        "         <td>London</td>\n" +
                        "         <td>45215</td>\n" +
                        "      </tr>\n" +
                        "   </tbody>\n" +
                        "</table>",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Condensed Table",
                "By adding the .table-condensed class, row padding is cut in half to condense the table. as seen in the following example. This is useful if you want any denser information.",
                "<table class = \"table table-condensed\">\n" +
                        "   <caption>Condensed Table Layout</caption>\n" +
                        "   \n" +
                        "   <thead>\n" +
                        "      <tr>\n" +
                        "         <th>Name</th>\n" +
                        "         <th>City</th>\n" +
                        "         <th>Pincode</th>\n" +
                        "      </tr>\n" +
                        "   </thead>\n" +
                        "   \n" +
                        "   <tbody>\n" +
                        "      <tr>\n" +
                        "         <td>Anne</td>\n" +
                        "         <td>USA</td>\n" +
                        "         <td>92002</td>\n" +
                        "      </tr>\n" +
                        "      \n" +
                        "      <tr>\n" +
                        "         <td>Emma</td>\n" +
                        "         <td>NewYork</td>\n" +
                        "         <td>20054</td>\n" +
                        "      </tr>\n" +
                        "      \n" +
                        "      <tr>\n" +
                        "         <td>David</td>\n" +
                        "         <td>London</td>\n" +
                        "         <td>45215</td>\n" +
                        "      </tr>\n" +
                        "   </tbody>\n" +
                        "</table>",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Contextual classes",
                "The Contextual classes shown in following table will allow you to change the background color of your table rows or individual cells." +
                        "\n\n" +
                        "1(.active)\n" +
                        "\n" +
                        "Applies the hover color to a particular row or cell\n" +
                        "\n" +
                        "2(.success)\n" +
                        "\n" +
                        "Indicates a successful or positive action\n" +
                        "\n" +
                        "3(.warning)\n" +
                        "\n" +
                        "Indicates a warning that might need attention\n" +
                        "\n" +
                        "4(.danger)\n" +
                        "\n" +
                        "Indicates a dangerous or potentially negative action",
                "<table class = \"table\">\n" +
                        "   <caption>Contextual Table Layout</caption>\n" +
                        "   \n" +
                        "   <thead>\n" +
                        "      <tr>\n" +
                        "         <th>Product</th>\n" +
                        "         <th>Payment Date</th>\n" +
                        "         <th>Status</th>\n" +
                        "      </tr>\n" +
                        "   </thead>\n" +
                        "   \n" +
                        "   <tbody>\n" +
                        "      <tr class = \"active\">\n" +
                        "         <td>Product1</td>\n" +
                        "         <td>23/11/2013</td>\n" +
                        "         <td>Pending</td>\n" +
                        "      </tr>\n" +
                        "      \n" +
                        "      <tr class = \"success\">\n" +
                        "         <td>Product2</td>\n" +
                        "         <td>10/11/2013</td>\n" +
                        "         <td>Delivered</td>\n" +
                        "      </tr>\n" +
                        "      \n" +
                        "      <tr class = \"warning\">\n" +
                        "         <td>Product3</td>\n" +
                        "         <td>20/10/2013</td>\n" +
                        "         <td>In Call to confirm</td>\n" +
                        "      </tr>\n" +
                        "      \n" +
                        "      <tr class = \"danger\">\n" +
                        "         <td>Product4</td>\n" +
                        "         <td>20/10/2013</td>\n" +
                        "         <td>Declined</td>\n" +
                        "      </tr>\n" +
                        "   </tbody>\n" +
                        "</table>",
                ""
        );
        final LearnDetailsModel l8 = new LearnDetailsModel(
                "Responsive Tables",
                "By wrapping any .table in .table-responsive class, you will make the table scroll horizontally up to small devices (under 768px). When viewing on anything larger than 768px wide, you will not see any difference in these tables.",
                "<div class = \"table-responsive\">\n" +
                        "   <table class = \"table\">\n" +
                        "      <caption>Responsive Table Layout</caption>\n" +
                        "      \n" +
                        "      <thead>\n" +
                        "         <tr>\n" +
                        "            <th>Product</th>\n" +
                        "            <th>Payment Date</th>\n" +
                        "            <th>Status</th>\n" +
                        "         </tr>\n" +
                        "      </thead>\n" +
                        "      \n" +
                        "      <tbody>\n" +
                        "         <tr>\n" +
                        "            <td>Product1</td>\n" +
                        "            <td>23/11/2013</td>\n" +
                        "            <td>Pending</td>\n" +
                        "         </tr>\n" +
                        "         \n" +
                        "         <tr>\n" +
                        "            <td>Product2</td>\n" +
                        "            <td>10/11/2013</td>\n" +
                        "            <td>Delivered</td>\n" +
                        "         </tr>\n" +
                        "         \n" +
                        "         <tr>\n" +
                        "            <td>Product3</td>\n" +
                        "            <td>20/10/2013</td>\n" +
                        "            <td>In Call to confirm</td>\n" +
                        "         </tr>\n" +
                        "         \n" +
                        "         <tr>\n" +
                        "            <td>Product4</td>\n" +
                        "            <td>20/10/2013</td>\n" +
                        "            <td>Declined</td>\n" +
                        "         </tr>\n" +
                        "      </tbody>\n" +
                        "   </table>\n" +
                        "</div>  ",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        list.add(l8);
        return list;
    }
    //Bootstrap Forms
    private static List<LearnDetailsModel> BootstrapForms(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Form Layout",
                "In this chapter, we will study how to create forms with ease using Bootstrap. Bootstrap makes it easy with the simple HTML markup and extended classes for different styles of forms. In this chapter we will study how to create forms with ease using Bootstrap." +
                        "\n\n" +
                        "Bootstrap provides you with following types of form layouts −\n" +
                        "\n" +
                        "Vertical (default) form\n" +
                        "In-line form\n" +
                        "Horizontal form",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Vertical or Basic Form",
                "The basic form structure comes with Bootstrap; individual form controls automatically receive some global styling. To create a basic form do the following −\n" +
                        "\n" +
                        "Add a role form to the parent <form> element.\n" +
                        "\n" +
                        "Wrap labels and controls in a <div> with class .form-group. This is needed for optimum spacing.\n" +
                        "\n" +
                        "Add a class of .form-control to all textual <input>, <textarea>, and <select> elements.",
                "<form role = \"form\">\n" +
                        "\n" +
                        "   <div class = \"form-group\">\n" +
                        "      <label for = \"name\">Name</label>\n" +
                        "      <input type = \"text\" class = \"form-control\" id = \"name\" placeholder = \"Enter Name\">\n" +
                        "   </div>\n" +
                        "   \n" +
                        "   <div class = \"form-group\">\n" +
                        "      <label for = \"inputfile\">File input</label>\n" +
                        "      <input type = \"file\" id = \"inputfile\">\n" +
                        "      <p class = \"help-block\">Example block-level help text here.</p>\n" +
                        "   </div>\n" +
                        "   \n" +
                        "   <div class = \"checkbox\">\n" +
                        "      <label><input type = \"checkbox\"> Check me out</label>\n" +
                        "   </div>\n" +
                        "   \n" +
                        "   <button type = \"submit\" class = \"btn btn-default\">Submit</button>\n" +
                        "</form>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Inline Form",
                "To create a form where all of the elements are inline, left aligned and labels are alongside, add the class .form-inline to the <form> tag.",
                "<form class = \"form-inline\" role = \"form\">\n" +
                        "   \n" +
                        "   <div class = \"form-group\">\n" +
                        "      <label class = \"sr-only\" for = \"name\">Name</label>\n" +
                        "      <input type = \"text\" class = \"form-control\" id = \"name\" placeholder = \"Enter Name\">\n" +
                        "   </div>\n" +
                        "   \n" +
                        "   <div class = \"form-group\">\n" +
                        "      <label class = \"sr-only\" for = \"inputfile\">File input</label>\n" +
                        "      <input type = \"file\" id = \"inputfile\">\n" +
                        "   </div>\n" +
                        "   \n" +
                        "   <div class = \"checkbox\">\n" +
                        "      <label><input type = \"checkbox\"> Check me out</label>\n" +
                        "   </div>\n" +
                        "   \n" +
                        "   <button type = \"submit\" class = \"btn btn-default\">Submit</button>\n" +
                        "</form>",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Horizontal Form",
                "Horizontal forms stands apart from the others not only in the amount of markup, but also in the presentation of the form. To create a form that uses the horizontal layout, do the following −\n" +
                        "\n" +
                        "Add a class of .form-horizontal to the parent <form> element.\n" +
                        "\n" +
                        "Wrap labels and controls in a <div> with class .form-group.\n" +
                        "\n" +
                        "Add a class of .control-label to the labels.",
                "<form class = \"form-horizontal\" role = \"form\">\n" +
                        "   \n" +
                        "   <div class = \"form-group\">\n" +
                        "      <label for = \"firstname\" class = \"col-sm-2 control-label\">First Name</label>\n" +
                        "\t\t\n" +
                        "      <div class = \"col-sm-10\">\n" +
                        "         <input type = \"text\" class = \"form-control\" id = \"firstname\" placeholder = \"Enter First Name\">\n" +
                        "      </div>\n" +
                        "   </div>\n" +
                        "   \n" +
                        "   <div class = \"form-group\">\n" +
                        "      <label for = \"lastname\" class = \"col-sm-2 control-label\">Last Name</label>\n" +
                        "\t\t\n" +
                        "      <div class = \"col-sm-10\">\n" +
                        "         <input type = \"text\" class = \"form-control\" id = \"lastname\" placeholder = \"Enter Last Name\">\n" +
                        "      </div>\n" +
                        "   </div>\n" +
                        "   \n" +
                        "   <div class = \"form-group\">\n" +
                        "      <div class = \"col-sm-offset-2 col-sm-10\">\n" +
                        "         <div class = \"checkbox\">\n" +
                        "            <label><input type = \"checkbox\"> Remember me</label>\n" +
                        "         </div>\n" +
                        "      </div>\n" +
                        "   </div>\n" +
                        "   \n" +
                        "   <div class = \"form-group\">\n" +
                        "      <div class = \"col-sm-offset-2 col-sm-10\">\n" +
                        "         <button type = \"submit\" class = \"btn btn-default\">Sign in</button>\n" +
                        "      </div>\n" +
                        "   </div>\n" +
                        "\t\n" +
                        "</form>",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Supported Form Controls",
                "Bootstrap natively supports the most common form controls mainly input, textarea, checkbox, radio, and select.\n" +
                        "\n" +
                        "Inputs\n" +
                        "The most common form text field is the input field. This is where users will enter most of the essential form data. Bootstrap offers support for all native HTML5 input types: text, password, datetime, datetime-local, date, month, time, week, number, email, url, search, tel, and color. Proper type declaration is required to make Inputs fully styled.",
                "<form role = \"form\">\n" +
                        "   \n" +
                        "   <div class = \"form-group\">\n" +
                        "      <label for = \"name\">Label</label>\n" +
                        "      <input type = \"text\" class = \"form-control\" placeholder = \"Text input\">\n" +
                        "   </div>\n" +
                        "  \n" +
                        "</form>",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Textarea",
                "The textarea is used when you need multiple lines of input. Change rows attribute as necessary (fewer rows = smaller box, more rows = bigger box).",
                "<form role = \"form\">\n" +
                        "   \n" +
                        "   <div class = \"form-group\">\n" +
                        "      <label for = \"name\">Text Area</label>\n" +
                        "      <textarea class = \"form-control\" rows = \"3\"></textarea>\n" +
                        "   </div>\n" +
                        "   \n" +
                        "</form>",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "CheckBoxes and Radio Buttons",
                "Checkboxes and radio buttons are great when you want users to choose from a list of preset options.\n" +
                        "\n" +
                        "When building a form, use checkbox if you want the user to select any number of options from a list. Use radio if you want to limit the user to just one selection.\n" +
                        "\n" +
                        "Use .checkbox-inline or .radio-inline class to a series of checkboxes or radios for controls appear on the same line.\n" +
                        "\n" +
                        "The following example demonstrates both (default and inline) types −",
                "<label for = \"name\">Example of Default Checkbox and radio button </label>\n" +
                        "\n" +
                        "<div class = \"checkbox\">\n" +
                        "   <label>\n" +
                        "      <input type = \"checkbox\" value = \"\">Option 1\n" +
                        "   </label>\n" +
                        "</div>\n" +
                        "\n" +
                        "<div class = \"checkbox\">\n" +
                        "   <label>\n" +
                        "      <input type = \"checkbox\" value = \"\">Option 2\n" +
                        "   </label>\n" +
                        "</div>\n" +
                        "\n" +
                        "<div class = \"radio\">\n" +
                        "   <label>\n" +
                        "      <input type = \"radio\" name = \"optionsRadios\" id = \"optionsRadios1\" value = \"option1\" checked> Option 1\n" +
                        "   </label>\n" +
                        "</div>\n" +
                        "\n" +
                        "<div class = \"radio\">\n" +
                        "   <label>\n" +
                        "      <input type = \"radio\" name = \"optionsRadios\" id = \"optionsRadios2\" value = \"option2\">\n" +
                        "      Option 2 - selecting it will deselect option 1\n" +
                        "   </label>\n" +
                        "</div>\n" +
                        "\n" +
                        "<label for = \"name\">Example of Inline Checkbox and radio button </label>\n" +
                        "\n" +
                        "<div>\n" +
                        "   <label class = \"checkbox-inline\">\n" +
                        "      <input type = \"checkbox\" id = \"inlineCheckbox1\" value = \"option1\"> Option 1\n" +
                        "   </label>\n" +
                        "   \n" +
                        "   <label class = \"checkbox-inline\">\n" +
                        "      <input type = \"checkbox\" id = \"inlineCheckbox2\" value = \"option2\"> Option 2\n" +
                        "   </label>\n" +
                        "   \n" +
                        "   <label class = \"checkbox-inline\">\n" +
                        "      <input type = \"checkbox\" id = \"inlineCheckbox3\" value = \"option3\"> Option 3\n" +
                        "   </label>\n" +
                        "   \n" +
                        "   <label class = \"checkbox-inline\">\n" +
                        "      <input type = \"radio\" name = \"optionsRadiosinline\" id = \"optionsRadios3\" value = \"option1\" checked> Option 1\n" +
                        "   </label>\n" +
                        "   \n" +
                        "   <label class = \"checkbox-inline\">\n" +
                        "      <input type = \"radio\" name = \"optionsRadiosinline\" id = \"optionsRadios4\" value = \"option2\"> Option 2\n" +
                        "   </label>\n" +
                        "</div>",
                ""
        );
        final LearnDetailsModel l8 = new LearnDetailsModel(
                "Selects",
                "A select is used when you want to allow the user to pick from multiple options, but by default it only allows one.\n" +
                        "\n" +
                        "Use <select> for list options with which the user is familiar, such as states or numbers.\n" +
                        "\n" +
                        "Use multiple = \"multiple\" to allow the users to select more than one option.\n" +
                        "\n" +
                        "The following example demonstrates both (select and multiple) types −",
                "<form role = \"form\">\n" +
                        "   \n" +
                        "   <div class = \"form-group\">\n" +
                        "      <label for = \"name\">Select list</label>\n" +
                        "      \n" +
                        "      <select class = \"form-control\">\n" +
                        "         <option>1</option>\n" +
                        "         <option>2</option>\n" +
                        "         <option>3</option>\n" +
                        "         <option>4</option>\n" +
                        "         <option>5</option>\n" +
                        "      </select>\n" +
                        "\n" +
                        "      <label for = \"name\">Multiple Select list</label>\n" +
                        "      \n" +
                        "      <select multiple class = \"form-control\">\n" +
                        "         <option>1</option>\n" +
                        "         <option>2</option>\n" +
                        "         <option>3</option>\n" +
                        "         <option>4</option>\n" +
                        "         <option>5</option>\n" +
                        "      </select>\n" +
                        "      \n" +
                        "   </div>\n" +
                        "\t\n" +
                        "</form>",
                ""
        );final LearnDetailsModel l9 = new LearnDetailsModel(
                "Static Control",
                "Use the class .form-control-static on a <p>, when you need to place plain text next to a form label within a horizontal form.",
                "<form class = \"form-horizontal\" role = \"form\">\n" +
                        "   <div class = \"form-group\">\n" +
                        "      <label class = \"col-sm-2 control-label\">Email</label>\n" +
                        "      \n" +
                        "      <div class = \"col-sm-10\">\n" +
                        "         <p class = \"form-control-static\">email@example.com</p>\n" +
                        "      </div>\n" +
                        "      \n" +
                        "   </div>\n" +
                        "   \n" +
                        "   <div class = \"form-group\">\n" +
                        "      <label for = \"inputPassword\" class = \"col-sm-2 control-label\">Password</label>\n" +
                        "      \n" +
                        "      <div class = \"col-sm-10\">\n" +
                        "         <input type = \"password\" class = \"form-control\" id = \"inputPassword\" placeholder = \"Password\">\n" +
                        "      </div>\n" +
                        "      \n" +
                        "   </div>\n" +
                        "</form>",
                ""
        );final LearnDetailsModel l10 = new LearnDetailsModel(
                "Form Control States",
                "In addition to the :focus (i.e., a user clicks into the input or tabs onto it) state, Bootstrap offers styling for disabled inputs and classes for form validation.\n" +
                        "\n" +
                        "Input Focus\n" +
                        "When an input receives :focus, the outline of the input is removed and a box-shadow is applied.\n" +
                        "\n" +
                        "Disabled lnputs\n" +
                        "If you need to disable an input, simply adding the disabled attribute will not only disable it; it will also change the styling and the mouse cursor when the cursor hovers over the element.\n" +
                        "\n" +
                        "Disabled Fieldsets\n" +
                        "Add the disabled attribute to a <fieldset> to disable all the controls within the <fieldset> at once.\n" +
                        "\n" +
                        "Validation States\n" +
                        "Bootstrap includes validation styles for errors, warnings, and success messages. To use, simply add the appropriate class (.has-warning, .has-error, or .has-success) to the parent element.\n" +
                        "\n" +
                        "The following example demonstrates all the form control states −",
                "<form class = \"form-horizontal\" role = \"form\">\n" +
                        "   <div class = \"form-group\">\n" +
                        "      <label class = \"col-sm-2 control-label\">Focused</label>\n" +
                        "      <div class = \"col-sm-10\">\n" +
                        "         <input class = \"form-control\" id = \"focusedInput\" type = \"text\" value = \"This is focused...\">\n" +
                        "      </div>\n" +
                        "   </div>\n" +
                        "   \n" +
                        "   <div class = \"form-group\">\n" +
                        "      <label for = \"inputPassword\" class = \"col-sm-2 control-label\">\n" +
                        "         Disabled\n" +
                        "      </label>\n" +
                        "      <div class = \"col-sm-10\">\n" +
                        "         <input class = \"form-control\" id = \"disabledInput\" type = \"text\" placeholder = \"Disabled input here...\" disabled>\n" +
                        "      </div>\n" +
                        "   </div>\n" +
                        "   \n" +
                        "   <fieldset disabled>\n" +
                        "      <div class = \"form-group\">\n" +
                        "         <label for = \"disabledTextInput\" class = \"col-sm-2 control-label\">\n" +
                        "            Disabled input (Fieldset disabled)\n" +
                        "         </label>\n" +
                        "         <div class = \"col-sm-10\">\n" +
                        "            <input type = \"text\" id = \"disabledTextInput\" class = \"form-control\" placeholder = \"Disabled input\">\n" +
                        "         </div> \n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <div class = \"form-group\">\n" +
                        "         <label for = \"disabledSelect\" class = \"col-sm-2 control-label\"> \n" +
                        "            Disabled select menu (Fieldset disabled)\n" +
                        "         </label>\n" +
                        "         <div class = \"col-sm-10\">\n" +
                        "            <select id = \"disabledSelect\" class = \"form-control\"> \n" +
                        "               <option>Disabled select</option>\n" +
                        "            </select> \n" +
                        "         </div>\n" +
                        "      </div> \n" +
                        "   </fieldset>\n" +
                        "   \n" +
                        "   <div class = \"form-group has-success\">\n" +
                        "      <label class = \"col-sm-2 control-label\" for = \"inputSuccess\">\n" +
                        "         Input with success\n" +
                        "      </label>\n" +
                        "      <div class = \"col-sm-10\">\n" +
                        "         <input type = \"text\" class = \"form-control\" id = \"inputSuccess\">\n" +
                        "      </div>\n" +
                        "   </div>\n" +
                        "   \n" +
                        "   <div class = \"form-group has-warning\">\n" +
                        "      <label class = \"col-sm-2 control-label\" for = \"inputWarning\">\n" +
                        "         Input with warning\n" +
                        "      </label>\n" +
                        "      <div class = \"col-sm-10\">\n" +
                        "         <input type = \"text\" class = \"form-control\" id = \"inputWarning\">\n" +
                        "      </div>\n" +
                        "   </div>\n" +
                        "   \n" +
                        "   <div class = \"form-group has-error\">\n" +
                        "      <label class = \"col-sm-2 control-label\" for = \"inputError\">\n" +
                        "         Input with error\n" +
                        "      </label>\n" +
                        "      <div class = \"col-sm-10\">\n" +
                        "         <input type = \"text\" class = \"form-control\" id = \"inputError\">\n" +
                        "      </div>\n" +
                        "   </div>\n" +
                        "</form>",
                ""
        );final LearnDetailsModel l11 = new LearnDetailsModel(
                "Form Control Sizing",
                "You can set heights and widths of forms using classes like .input-lg and .col-lg-* respectively. The following example demonstrates this −",
                "<form role = \"form\">\n" +
                        "\n" +
                        "   <div class = \"form-group\">\n" +
                        "      <input class = \"form-control input-lg\" type = \"text\" placeholder =\".input-lg\">\n" +
                        "   </div>\n" +
                        "\n" +
                        "   <div class = \"form-group\">\n" +
                        "      <input class = \"form-control\" type = \"text\" placeholder = \"Default input\">\n" +
                        "   </div>\n" +
                        "\n" +
                        "   <div class = \"form-group\">\n" +
                        "      <input class = \"form-control input-sm\" type = \"text\" placeholder = \".input-sm\">\n" +
                        "   </div>\n" +
                        "   \n" +
                        "   <div class = \"form-group\"></div>\n" +
                        "   \n" +
                        "   <div class = \"form-group\">\n" +
                        "      <select class = \"form-control input-lg\">\n" +
                        "         <option value = \"\">.input-lg</option>\n" +
                        "      </select>\n" +
                        "   </div>\n" +
                        "   \n" +
                        "   <div class = \"form-group\">\n" +
                        "      <select class = \"form-control\">\n" +
                        "         <option value = \"\">Default select</option>\n" +
                        "      </select>\n" +
                        "   </div>\n" +
                        "   \n" +
                        "   <div class = \"form-group\">\n" +
                        "      <select class = \"form-control input-sm\">\n" +
                        "         <option value = \"\">.input-sm</option>\n" +
                        "      </select>\n" +
                        "   </div>\n" +
                        "\n" +
                        "   <div class = \"row\">\n" +
                        "      <div class = \"col-lg-2\">\n" +
                        "         <input type = \"text\" class = \"form-control\" placeholder = \".col-lg-2\">\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <div class = \"col-lg-3\">\n" +
                        "         <input type = \"text\" class = \"form-control\" placeholder = \".col-lg-3\">\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <div class = \"col-lg-4\">\n" +
                        "         <input type = \"text\" class = \"form-control\" placeholder = \".col-lg-4\">\n" +
                        "      </div>\n" +
                        "      \n" +
                        "   </div>\n" +
                        "</form>",
                ""
        );final LearnDetailsModel l12 = new LearnDetailsModel(
                "Help Text",
                "Bootstrap form controls can have a block level help text that flows with the inputs. To add a full width block of content, use the .help-block after the <input>. The following example demonstrates this −",
                "<form role = \"form\">\n" +
                        "   <span>Example of Help Text</span>\n" +
                        "   <input class = \"form-control\" type = \"text\" placeholder = \"\">\n" +
                        "   \n" +
                        "   <span class = \"help-block\">\n" +
                        "      A longer block of help text that breaks onto a new line and may extend beyond one line.\n" +
                        "   </span>\n" +
                        "\t\n" +
                        "</form>",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        list.add(l8);
        list.add(l9);
        list.add(l10);
        list.add(l11);
        list.add(l12);

        return list;
    }
    //Bootstrap Buttons
    private static List<LearnDetailsModel> BootstrapButtons(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Bootstrap Buttons",
                "This chapter covers the use age of Bootstrap button with examples. Anything that is given a class of .btn will inherit the default look of a gray button with rounded corners. However, Bootstrap provides some options to style buttons, which are summarized in the following table −" +
                        "\n\n" +
                        "1. btn\n" +
                        "\n" +
                        "Default/ Standard button.\n" +
                        "\n" +
                        "2. btn-primary\n" +
                        "\n" +
                        "Provides extra visual weight and identifies the primary action in a set of buttons.\n" +
                        "\n" +
                        "3. btn-success\n" +
                        "\n" +
                        "Indicates a successful or positive action.\n" +
                        "\n" +
                        "4. btn-info\n" +
                        "\n" +
                        "Contextual button for informational alert messages.\n" +
                        "\n" +
                        "5. btn-warning\n" +
                        "\n" +
                        "Indicates caution should be taken with this action.\n" +
                        "\n" +
                        "6. btn-danger\n" +
                        "\n" +
                        "Indicates a dangerous or potentially negative action.\n" +
                        "\n" +
                        "7. btn-link\n" +
                        "\n" +
                        "Deemphasize a button by making it look like a link while maintaining button behavior.",
                "<!-- Standard button -->\n" +
                        "<button type = \"button\" class = \"btn btn-default\">Default Button</button>\n" +
                        "\n" +
                        "<!-- Provides extra visual weight and identifies the primary action in a set of buttons -->\n" +
                        "<button type = \"button\" class = \"btn btn-primary\">Primary Button</button>\n" +
                        "\n" +
                        "<!-- Indicates a successful or positive action -->\n" +
                        "<button type = \"button\" class = \"btn btn-success\">Success Button</button>\n" +
                        "\n" +
                        "<!-- Contextual button for informational alert messages -->\n" +
                        "<button type = \"button\" class = \"btn btn-info\">Info Button</button>\n" +
                        "\n" +
                        "<!-- Indicates caution should be taken with this action -->\n" +
                        "<button type = \"button\" class = \"btn btn-warning\">Warning Button</button>\n" +
                        "\n" +
                        "<!-- Indicates a dangerous or potentially negative action -->\n" +
                        "<button type = \"button\" class = \"btn btn-danger\">Danger Button</button>\n" +
                        "\n" +
                        "<!-- Deemphasize a button by making it look like a link while maintaining button behavior -->\n" +
                        "<button type = \"button\" class = \"btn btn-link\">Link Button</button>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Button Size",
                "The following table summarizes the classes used to get buttons of various sizes −" +
                        "\n\n" +
                        "1(.btn-lg)\n" +
                        "\n" +
                        "This makes the button size large.\n" +
                        "\n" +
                        "2(.btn-sm)\n" +
                        "\n" +
                        "This makes the button size small.\n" +
                        "\n" +
                        "3(.btn-xs)\n" +
                        "\n" +
                        "This makes the button size extra small.\n" +
                        "\n" +
                        "4(.btn-block)\n" +
                        "\n" +
                        "This creates block level buttons—those that span the full width of a parent.\n" +
                        "\n" +
                        "The following example demonstrates this −",
                "<p>\n" +
                        "   <button type = \"button\" class = \"btn btn-primary btn-lg\">\n" +
                        "      Large Primary button\n" +
                        "   </button>\n" +
                        "   \n" +
                        "   <button type = \"button\" class = \"btn btn-default btn-lg\">\n" +
                        "      Large button\n" +
                        "   </button>\n" +
                        "</p>\n" +
                        "\n" +
                        "<p>\n" +
                        "   <button type = \"button\" class = \"btn btn-primary\">\n" +
                        "      Default size Primary button\n" +
                        "   </button>\n" +
                        "   \n" +
                        "   <button type = \"button\" class = \"btn btn-default\">\n" +
                        "      Default size button\n" +
                        "   </button>\n" +
                        "</p>\n" +
                        "\n" +
                        "<p>\n" +
                        "   <button type = \"button\" class = \"btn btn-primary btn-sm\">\n" +
                        "      Small Primary button\n" +
                        "   </button>\n" +
                        "   \n" +
                        "   <button type = \"button\" class = \"btn btn-default btn-sm\">\n" +
                        "      Small button\n" +
                        "   </button>\n" +
                        "</p>\n" +
                        "\n" +
                        "<p>\n" +
                        "   <button type = \"button\" class = \"btn btn-primary btn-xs\">\n" +
                        "      Extra small Primary button\n" +
                        "   </button>\n" +
                        "   \n" +
                        "   <button type = \"button\" class = \"btn btn-default btn-xs\">\n" +
                        "      Extra small button\n" +
                        "   </button>\n" +
                        "</p>\n" +
                        "\n" +
                        "<p>\n" +
                        "   <button type = \"button\" class = \"btn btn-primary btn-lg btn-block\">\n" +
                        "      Block level Primary button\n" +
                        "   </button>\n" +
                        "   \n" +
                        "   <button type = \"button\" class = \"btn btn-default btn-lg btn-block\">\n" +
                        "      Block level button\n" +
                        "   </button>\n" +
                        "</p>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Button State",
                "Bootstrap provides classes which allow you to change the state of buttons as active, disabled etc. each of which are discussed in the following sections.\n" +
                        "\n" +
                        "Active State\n" +
                        "Buttons will appear pressed (with a darker background, darker border, and inset shadow) when active. The following table summarizes classes used to make button elements and anchor elements active −" +
                        "\n\n" +
                        "Button element => Use .active class to show that it is activated.\n" +
                        "Anchor element => Use .active class to <a> buttons to show that it is activated.\n" +
                        "The following example demonstrates this −",
                "<p>\n" +
                        "   <button type = \"button\" class = \"btn btn-default btn-lg \">\n" +
                        "      Default Button\n" +
                        "   </button>\n" +
                        "   \n" +
                        "   <button type = \"button\" class = \"btn btn-default btn-lg active\">\n" +
                        "      Active Button\n" +
                        "   </button>\n" +
                        "</p>\n" +
                        "\n" +
                        "<p>\n" +
                        "   <button type = \"button\" class = \"btn btn-primary btn-lg\">\n" +
                        "      Primary button\n" +
                        "   </button>\n" +
                        "   \n" +
                        "   <button type = \"button\" class = \"btn btn-primary btn-lg active\">\n" +
                        "      Active Primary button\n" +
                        "   </button>\n" +
                        "</p>",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Disabled State",
                "When you disable a button, it will fade in color by 50%, and lose the gradient.\n" +
                        "\n" +
                        "The following table summarizes classes used to make button element and anchor element disabled −" +
                        "\n\n" +
                        "(Button element)" +
                        "\nAdd the disabled attribute to <button> buttons.\n" +
                        "(Anchor element)\n" +
                        "Add the disabled class to <a> buttons.\n" +
                        "\n" +
                        "Note − This class will only change the <a>'s appearance, not its functionality. You need to use custom JavaScript to disable links here.\n" +
                        "\n" +
                        "The following example demonstrates this −",
                "<p>\n" +
                        "   <button type = \"button\" class = \"btn btn-default btn-lg\">\n" +
                        "      Default Button\n" +
                        "   </button>\n" +
                        "   \n" +
                        "   <button type = \"button\" class = \"btn btn-default btn-lg\" disabled = \"disabled\">\n" +
                        "      Disabled Button\n" +
                        "   </button>\n" +
                        "</p>\n" +
                        "\n" +
                        "<p>\n" +
                        "   <button type = \"button\" class = \"btn btn-primary btn-lg\">\n" +
                        "      Primary button\n" +
                        "   </button>\n" +
                        "   \n" +
                        "   <button type = \"button\" class = \"btn btn-primary btn-lg\" disabled = \"disabled\">\n" +
                        "      Disabled Primary button\n" +
                        "   </button>\n" +
                        "</p>\n" +
                        "\n" +
                        "<p>\n" +
                        "   <a href = \"#\" class = \"btn btn-default btn-lg\" role = \"button\">\n" +
                        "      Link\n" +
                        "   </a>\n" +
                        "   \n" +
                        "   <a href = \"#\" class = \"btn btn-default btn-lg disabled\" role = \"button\">\n" +
                        "      Disabled Link\n" +
                        "   </a>\n" +
                        "</p>\n" +
                        "\n" +
                        "<p>\n" +
                        "   <a href = \"#\" class = \"btn btn-primary btn-lg\" role = \"button\">\n" +
                        "      Primary link\n" +
                        "   </a>\n" +
                        "   \n" +
                        "   <a href = \"#\" class = \"btn btn-primary btn-lg disabled\" role = \"button\">\n" +
                        "      Disabled Primary link\n" +
                        "   </a>\n" +
                        "</p>",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Button Tags",
                "You may use button classes with <a>, <button>, or <input> element. But it is recommended that you use it with <button> elements mostly to avoid cross browser inconsistency issues.\n" +
                        "\n" +
                        "The following example demonstrates this −",
                "<a class = \"btn btn-default\" href = \"#\" role = \"button\">Link</a>\n" +
                        "<button class = \"btn btn-default\" type = \"submit\">Button</button>\n" +
                        "<input class = \"btn btn-default\" type = \"button\" value = \"Input\">\n" +
                        "<input class = \"btn btn-default\" type = \"submit\" value = \"Submit\">",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }
    //Bootstrap Images
    private static List<LearnDetailsModel> BootstrapImages(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Bootstrap Images",
                "This chapter covers the Bootstrap support for images. Bootstrap provides three classes that can be used to apply some simple styles to images −\n" +
                        "\n" +
                        ".img-rounded − adds border-radius:6px to give the image rounded corners.\n" +
                        "\n" +
                        ".img-circle − makes the entire image round by adding border-radius:500px.\n" +
                        "\n" +
                        ".img-thumbnail − adds a bit of padding and a gray border −\n" +
                        "\n" +
                        "The following example demonstrates this −",
                "<img src = \"/bootstrap/images/download.png\" class = \"img-rounded\">\n" +
                        "<img src = \"/bootstrap/images/download.png\" class = \"img-circle\">\n" +
                        "<img src = \"/bootstrap/images/download.png\" class = \"img-thumbnail\">",
                ""
        );
        list.add(l1);
        return list;
    }
    //Bootstrap Helper Classes
    private static List<LearnDetailsModel> BootstrapHelperClasses(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Close icon",
                "This chapter discusses some of the helper classes in Bootstrap that might come in handy." +
                        "\n\n" +
                        "Use the generic close icon for dismissing content like modals and alerts. Use the class close to get the close icon.",
                "<p>Close Icon Example\n" +
                        "   <button type = \"button\" class = \"close\" aria-hidden = \"true\">\n" +
                        "      &times;\n" +
                        "   </button>\n" +
                        "</p>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Carets",
                "Use carets to indicate dropdown functionality and direction. To get this functionality use the class caret with a <span> element.",
                "<p>Caret Example<span class = \"caret\"></span></p>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Quick Floats",
                "You can float an element to the left or right with class pull-left or pull-right respectively the following example demonstrates this.",
                "<div class = \"pull-left\">Quick Float to left</div>\n" +
                        "<div class = \"pull-right\">Quick Float to right</div>",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Center Content Blocks",
                "Use class center-block to set an element to center.",
                "<div class = \"row\">\n" +
                        "   <div class = \"center-block\" style = \"width:200px; background-color:#ccc;\">\n" +
                        "      This is an example for center-block\n" +
                        "   </div>\n" +
                        "</div>",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Clearfix",
                "To clear the float of any element, use the .clearfix class.",
                "<div class = \"clearfix\" style = \"background: #D8D8D8;border: 1px solid #000; padding: 10px;\">\n" +
                        "   \n" +
                        "   <div class = \"pull-left\" style = \"background:#58D3F7;\">\n" +
                        "      Quick Float to left\n" +
                        "   </div>\n" +
                        "   \n" +
                        "   <div class = \"pull-right\" style = \"background: #DA81F5;\">\n" +
                        "      Quick Float to right\n" +
                        "   </div>\n" +
                        "   \n" +
                        "</div>",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Showing and Hiding Content",
                "You can force an element to be shown or hidden (including for screen readers) with the use of classes .show and .hidden.",
                "<div class = \"row\" style = \"padding: 91px 100px 19px 50px;\">\n" +
                        "   \n" +
                        "   <div class = \"show\" style = \"left-margin:10px; width:300px; background-color:#ccc;\">\n" +
                        "      This is an example for show class\n" +
                        "   </div>\n" +
                        "   \n" +
                        "   <div class = \"hidden\" style = \"width:200px; background-color:#ccc;\">\n" +
                        "      This is an example for hide class\n" +
                        "   </div>\n" +
                        "   \n" +
                        "</div>",
                ""
        );final LearnDetailsModel l7 = new LearnDetailsModel(
                "Screen Reader Content",
                "You can hide an element to all devices except screen readers with the class .sr-only.",
                "<div class = \"row\" style = \"padding: 91px 100px 19px 50px;\">\n" +
                        "   <form class = \"form-inline\" role = \"form\">\n" +
                        "      \n" +
                        "      <div class = \"form-group\">\n" +
                        "         <label class = \"sr-only\" for = \"email\">Email address</label>\n" +
                        "         <input type = \"email\" class = \"form-control\" placeholder = \"Enter email\">\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <div class = \"form-group\">\n" +
                        "         <label class = \"sr-only\" for = \"pass\">Password</label>\n" +
                        "         <input type = \"password\" class = \"form-control\" placeholder = \"Password\">\n" +
                        "      </div>\n" +
                        "      \n" +
                        "   </form>\n" +
                        "</div>",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        return list;
    }
    //Bootstrap Responsive Utilities
    private static List<LearnDetailsModel> BootstrapResponsiveUtilities(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Responsive utilities",
                "Bootstrap provides some handful helper classes, for faster mobile-friendly development. These can be used for showing and hiding content by device via media query, combined with large, small, and medium devices.\n" +
                        "\n" +
                        "Use these sparingly and avoid creating entirely different versions of the same site. Responsive utilities are currently only available for block and table toggling." +
                        "\n\n" +
                        "(.visible-xs) Extra small (less than 768px) visible\n\n" +
                        "(.visible-sm) Small (up to 768 px) visible\n\n" +
                        "(.visible-md) Medium (768 px to 991 px) visible\n\n" +
                        "(.visible-lg) Larger (992 px and above) visible\n\n" +
                        "(.hidden-xs) Extra small (less than 768px) hidden\n\n" +
                        "(.hidden-sm) Small (up to 768 px) hidden\n\n" +
                        "(.hidden-md) Medium (768 px to 991 px) hidden\n\n" +
                        "(.hidden-lg) Larger (992 px and above) hidden",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Print Classes",
                "The following table lists the print classes. Use these for toggling the content for print." +
                        "\n\n" +
                        "(.visible-print) Yes Visible\n\n" +
                        "(.hidden-print) Visible only to browser not to print.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Example",
                "The following example demonstrates the use of above listed helper classes. Resize your browser or load the example on different devices to test the responsive utility classes.",
                "<div class = \"container\" style = \"padding: 40px;\">\n" +
                        "   <div class = \"row visible-on\">\n" +
                        "      \n" +
                        "      <div class = \"col-xs-6 col-sm-3\" style = \"background-color: #dedef8;\n" +
                        "         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n" +
                        "         \n" +
                        "         <span class = \"hidden-xs\">Extra small</span>\n" +
                        "         <span class = \"visible-xs\">✔ Visible on x-small</span>\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <div class = \"col-xs-6 col-sm-3\" style = \"background-color: #dedef8;\n" +
                        "         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n" +
                        "         \n" +
                        "         <span class = \"hidden-sm\">Small</span>\n" +
                        "         <span class = \"visible-sm\">✔ Visible on small</span>\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <div class = \"clearfix visible-xs\"></div>\n" +
                        "      \n" +
                        "      <div class = \"col-xs-6 col-sm-3\" style = \"background-color: #dedef8;\n" +
                        "         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n" +
                        "         \n" +
                        "         <span class = \"hidden-md\">Medium</span>\n" +
                        "         <span class = \"visible-md\">✔ Visible on medium</span>\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <div class = \"col-xs-6 col-sm-3\" style = \"background-color: #dedef8;\n" +
                        "         box-shadow: inset 1px -1px 1px #444, inset -1px 1px 1px #444;\">\n" +
                        "         \n" +
                        "         <span class = \"hidden-lg\">Large</span>\n" +
                        "         <span class = \"visible-lg\">✔ Visible on large</span>\n" +
                        "      </div>\n" +
                        "      \n" +
                        "   </div>  \n" +
                        "</div>",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }
    //NodeJs
    //NodeJs Introduction
    private static List<LearnDetailsModel> NodeJsIntroduction(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is Node.js?",
                "Node.js is a server-side platform built on Google Chrome's JavaScript Engine (V8 Engine). Node.js was developed by Ryan Dahl in 2009 and its latest version is v0.10.36. The definition of Node.js as supplied by its official documentation is as follows −\n" +
                        "\n" +
                        "Node.js is a platform built on Chrome's JavaScript runtime for easily building fast and scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.\n" +
                        "\n" +
                        "Node.js is an open source, cross-platform runtime environment for developing server-side and networking applications. Node.js applications are written in JavaScript, and can be run within the Node.js runtime on OS X, Microsoft Windows, and Linux.\n" +
                        "\n" +
                        "Node.js also provides a rich library of various JavaScript modules which simplifies the development of web applications using Node.js to a great extent.",
                "Node.js = Runtime Environment + JavaScript Library",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Features of Node.js",
                "Following are some of the important features that make Node.js the first choice of software architects.\n" +
                        "\n" +
                        "Asynchronous and Event Driven − All APIs of Node.js library are asynchronous, that is, non-blocking. It essentially means a Node.js based server never waits for an API to return data. The server moves to the next API after calling it and a notification mechanism of Events of Node.js helps the server to get a response from the previous API call.\n" +
                        "\n" +
                        "Very Fast − Being built on Google Chrome's V8 JavaScript Engine, Node.js library is very fast in code execution.\n" +
                        "\n" +
                        "Single Threaded but Highly Scalable − Node.js uses a single threaded model with event looping. Event mechanism helps the server to respond in a non-blocking way and makes the server highly scalable as opposed to traditional servers which create limited threads to handle requests. Node.js uses a single threaded program and the same program can provide service to a much larger number of requests than traditional servers like Apache HTTP Server.\n" +
                        "\n" +
                        "No Buffering − Node.js applications never buffer any data. These applications simply output the data in chunks.\n" +
                        "\n" +
                        "License − Node.js is released under the MIT license",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Who Uses Node.js?",
                "Following is the link on github wiki containing an exhaustive list of projects, application and companies which are using Node.js. This list includes eBay, General Electric, GoDaddy, Microsoft, PayPal, Uber, Wikipins, Yahoo!, and Yammer to name a few.\n" +
                        "\n" +
                        "Projects, Applications, and Companies Using Node" +
                        "\n\n" +
                        "https://github.com/nodejs/node",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Where to Use Node.js?",
                "Following are the areas where Node.js is proving itself as a perfect technology partner.\n" +
                        "\n" +
                        "I/O bound Applications\n" +
                        "Data Streaming Applications\n" +
                        "Data Intensive Real-time Applications (DIRT)\n" +
                        "JSON APIs based Applications\n" +
                        "Single Page Applications",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Where Not to Use Node.js?",
                "It is not advisable to use Node.js for CPU intensive applications.",
                "",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Audience",
                "This tutorial is designed for software programmers who want to learn the basics of Node.js and its architectural concepts. This tutorial will give you enough understanding on all the necessary components of Node.js with suitable examples." +
                        "",
                "",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Prerequisites",
                "Before proceeding with this tutorial, you should have a basic understanding of JavaScript. As we are going to develop web-based applications using Node.js, it will be good if you have some understanding of other web technologies such as HTML, CSS, AJAX, etc.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        return list;
    }
    //NodeJs First Application
    private static List<LearnDetailsModel> NodeJsFirstApplication(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "First Application",
                "Before creating an actual \"Hello, World!\" application using Node.js, let us see the components of a Node.js application. A Node.js application consists of the following three important components −\n" +
                        "\n" +
                        "Import required modules − We use the require directive to load Node.js modules.\n" +
                        "\n" +
                        "Create server − A server which will listen to client's requests similar to Apache HTTP Server.\n" +
                        "\n" +
                        "Read request and return response − The server created in an earlier step will read the HTTP request made by the client which can be a browser or a console and return the response.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Creating Node.js Application",
                "Step 1 - Import Required Module\n" +
                        "We use the require directive to load the http module and store the returned HTTP instance into an http variable as follows −",
                "var http = require(\"http\");",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Step 2 - Create Server",
                "We use the created http instance and call http.createServer() method to create a server instance and then we bind it at port 8081 using the listen method associated with the server instance. Pass it a function with parameters request and response. Write the sample implementation to always return \"Hello World\".",
                "http.createServer(function (request, response) {\n" +
                        "   // Send the HTTP header \n" +
                        "   // HTTP Status: 200 : OK\n" +
                        "   // Content Type: text/plain\n" +
                        "   response.writeHead(200, {'Content-Type': 'text/plain'});\n" +
                        "   \n" +
                        "   // Send the response body as \"Hello World\"\n" +
                        "   response.end('Hello World\\n');\n" +
                        "}).listen(8081);\n" +
                        "\n" +
                        "// Console will print the message\n" +
                        "console.log('Server running at http://127.0.0.1:8081/');",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Step 3 - Testing Request & Response",
                "Let's put step 1 and 2 together in a file called main.js and start our HTTP server as shown below −",
                "var http = require(\"http\");\n" +
                        "\n" +
                        "http.createServer(function (request, response) {\n" +
                        "   // Send the HTTP header \n" +
                        "   // HTTP Status: 200 : OK\n" +
                        "   // Content Type: text/plain\n" +
                        "   response.writeHead(200, {'Content-Type': 'text/plain'});\n" +
                        "   \n" +
                        "   // Send the response body as \"Hello World\"\n" +
                        "   response.end('Hello World\\n');\n" +
                        "}).listen(8081);\n" +
                        "\n" +
                        "// Console will print the message\n" +
                        "console.log('Server running at http://127.0.0.1:8081/');",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Make a Request to the Node.js Server",
                "Now execute the main.js to start the server as follows −",
                "$ node main.js",
                "Hello World"
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }
    //NodeJs REPL Terminal
    private static List<LearnDetailsModel> NodeJsREPLTerminal(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "REPL Terminal",
                "REPL stands for Read Eval Print Loop and it represents a computer environment like a Windows console or Unix/Linux shell where a command is entered and the system responds with an output in an interactive mode. Node.js or Node comes bundled with a REPL environment. It performs the following tasks −\n" +
                        "\n" +
                        "Read − Reads user's input, parses the input into JavaScript data-structure, and stores in memory.\n" +
                        "\n" +
                        "Eval − Takes and evaluates the data structure.\n" +
                        "\n" +
                        "Print − Prints the result.\n" +
                        "\n" +
                        "Loop − Loops the above command until the user presses ctrl-c twice.\n" +
                        "\n" +
                        "The REPL feature of Node is very useful in experimenting with Node.js codes and to debug JavaScript codes.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Online REPL Terminal",
                "To simplify your learning, we have set up an easy to use Node.js REPL environment online, where you can practice Node.js syntax − Launch Node.js REPL Terminal ",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Starting REPL",
                "REPL can be started by simply running node on shell/console without any arguments as follows.\n" +
                        "\n" +
                        "$ node" +
                        "\n\n" +
                        "You will see the REPL Command prompt > where you can type any Node.js command −",
                "$ node\n" +
                        ">",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Simple Expression",
                "Let's try a simple mathematics at the Node.js REPL command prompt −",
                "$ node\n" +
                        "> 1 + 3\n" +
                        "4\n" +
                        "> 1 + ( 2 * 3 ) - 4\n" +
                        "3\n" +
                        ">",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Use Variables",
                "You can make use variables to store values and print later like any conventional script. If var keyword is not used, then the value is stored in the variable and printed. Whereas if var keyword is used, then the value is stored but not printed. You can print variables using console.log().",
                "$ node\n" +
                        "> x = 10\n" +
                        "10\n" +
                        "> var y = 10\n" +
                        "undefined\n" +
                        "> x + y\n" +
                        "20\n" +
                        "> console.log(\"Hello World\")\n" +
                        "Hello World\n" +
                        "undefined",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Multiline Expression",
                "Node REPL supports multiline expression similar to JavaScript. Let's check the following do-while loop in action −",
                "$ node\n" +
                        "> var x = 0\n" +
                        "undefined\n" +
                        "> do {\n" +
                        "   ... x++;\n" +
                        "   ... console.log(\"x: \" + x);\n" +
                        "   ... } \n" +
                        "while ( x < 5 );\n" +
                        "x: 1\n" +
                        "x: 2\n" +
                        "x: 3\n" +
                        "x: 4\n" +
                        "x: 5\n" +
                        "undefined\n" +
                        ">",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Underscore Variable",
                "You can use underscore (_) to get the last result −",
                "$ node\n" +
                        "> var x = 10\n" +
                        "undefined\n" +
                        "> var y = 20\n" +
                        "undefined\n" +
                        "> x + y\n" +
                        "30\n" +
                        "> var sum = _\n" +
                        "undefined\n" +
                        "> console.log(sum)\n" +
                        "30\n" +
                        "undefined\n" +
                        ">",
                ""
        );final LearnDetailsModel l8 = new LearnDetailsModel(
                "REPL Commands",
                "ctrl + c − terminate the current command.\n" +
                        "\n" +
                        "ctrl + c twice − terminate the Node REPL.\n" +
                        "\n" +
                        "ctrl + d − terminate the Node REPL.\n" +
                        "\n" +
                        "Up/Down Keys − see command history and modify previous commands.\n" +
                        "\n" +
                        "tab Keys − list of current commands.\n" +
                        "\n" +
                        ".help − list of all commands.\n" +
                        "\n" +
                        ".break − exit from multiline expression.\n" +
                        "\n" +
                        ".clear − exit from multiline expression.\n" +
                        "\n" +
                        ".save filename − save the current Node REPL session to a file.\n" +
                        "\n" +
                        ".load filename − load file content in current Node REPL session.",
                "",
                ""
        );final LearnDetailsModel l9 = new LearnDetailsModel(
                "Stopping REPL",
                "As mentioned above, you will need to use ctrl-c twice to come out of Node.js REPL.",
                "$ node\n" +
                        ">\n" +
                        "(^C again to quit)\n" +
                        ">",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        list.add(l8);
        list.add(l9);
        return list;
    }
    //NodeJs NPM
    private static List<LearnDetailsModel> NodeJsNPM(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is NodeJs NPM?",
                "Node Package Manager (NPM) provides two main functionalities −\n" +
                        "\n" +
                        "Online repositories for node.js packages/modules which are searchable on search.nodejs.org\n" +
                        "\n" +
                        "Command line utility to install Node.js packages, do version management and dependency management of Node.js packages.\n" +
                        "\n" +
                        "NPM comes bundled with Node.js installable after v0.6.3 version. To verify the same, open console and type the following command and see the result −\n" +
                        "\n" +
                        "$ npm --version\n" +
                        "2.7.1\n" +
                        "If you are running an old version of NPM then it is quite easy to update it to the latest version. Just use the following command from root −\n",
                "$ sudo npm install npm -g\n" +
                        "/usr/bin/npm -> /usr/lib/node_modules/npm/bin/npm-cli.js\n" +
                        "npm@2.7.1 /usr/lib/node_modules/npm",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Installing Modules using NPM",
                "There is a simple syntax to install any Node.js module −\n" +
                        "\n" +
                        "$ npm install <Module Name>\n" +
                        "For example, following is the command to install a famous Node.js web framework module called express −\n" +
                        "\n" +
                        "$ npm install express\n" +
                        "Now you can use this module in your js file as following −",
                "var express = require('express');",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Global vs Local Installation",
                "By default, NPM installs any dependency in the local mode. Here local mode refers to the package installation in node_modules directory lying in the folder where Node application is present. Locally deployed packages are accessible via require() method. For example, when we installed express module, it created node_modules directory in the current directory where it installed the express module.\n" +
                        "\n" +
                        "$ ls -l\n" +
                        "total 0\n" +
                        "drwxr-xr-x 3 root root 20 Mar 17 02:23 node_modules\n" +
                        "Alternatively, you can use npm ls command to list down all the locally installed modules.\n" +
                        "\n" +
                        "Globally installed packages/dependencies are stored in system directory. Such dependencies can be used in CLI (Command Line Interface) function of any node.js but cannot be imported using require() in Node application directly. Now let's try installing the express module using global installation.\n" +
                        "\n" +
                        "$ npm install express -g\n" +
                        "This will produce a similar result but the module will be installed globally. Here, the first line shows the module version and the location where it is getting installed.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Using package.json",
                "package.json is present in the root directory of any Node application/module and is used to define the properties of a package. Let's open package.json of express package present in node_modules/express/",
                "{\n" +
                        "   \"name\": \"express\",\n" +
                        "      \"description\": \"Fast, unopinionated, minimalist web framework\",\n" +
                        "      \"version\": \"4.11.2\",\n" +
                        "      \"author\": {\n" +
                        "      \n" +
                        "         \"name\": \"TJ Holowaychuk\",\n" +
                        "         \"email\": \"tj@vision-media.ca\"\n" +
                        "      },\n" +
                        "   \n" +
                        "   \"contributors\": [{\n" +
                        "      \"name\": \"Aaron Heckmann\",\n" +
                        "      \"email\": \"aaron.heckmann+github@gmail.com\"\n" +
                        "   }, \n" +
                        "   \n" +
                        "   {\n" +
                        "      \"name\": \"Ciaran Jessup\",\n" +
                        "      \"email\": \"ciaranj@gmail.com\"\n" +
                        "   },\n" +
                        "   \n" +
                        "   {\n" +
                        "      \"name\": \"Douglas Christopher Wilson\",\n" +
                        "      \"email\": \"doug@somethingdoug.com\"\n" +
                        "   },\n" +
                        "   \n" +
                        "   {\n" +
                        "      \"name\": \"Guillermo Rauch\",\n" +
                        "      \"email\": \"rauchg@gmail.com\"\n" +
                        "   },\n" +
                        "   \n" +
                        "   {\n" +
                        "      \"name\": \"Jonathan Ong\",\n" +
                        "      \"email\": \"me@jongleberry.com\"\n" +
                        "   },\n" +
                        "   \n" +
                        "   {\n" +
                        "      \"name\": \"Roman Shtylman\",\n" +
                        "      \"email\": \"shtylman+expressjs@gmail.com\"\n" +
                        "   },\n" +
                        "   \n" +
                        "   {\n" +
                        "      \"name\": \"Young Jae Sim\",\n" +
                        "      \"email\": \"hanul@hanul.me\"\n" +
                        "   } ],\n" +
                        "   \n" +
                        "   \"license\": \"MIT\", \"repository\": {\n" +
                        "      \"type\": \"git\",\n" +
                        "      \"url\": \"https://github.com/strongloop/express\"\n" +
                        "   },\n" +
                        "   \n" +
                        "   \"homepage\": \"https://expressjs.com/\", \"keywords\": [\n" +
                        "      \"express\",\n" +
                        "      \"framework\",\n" +
                        "      \"sinatra\",\n" +
                        "      \"web\",\n" +
                        "      \"rest\",\n" +
                        "      \"restful\",\n" +
                        "      \"router\",\n" +
                        "      \"app\",\n" +
                        "      \"api\"\n" +
                        "   ],\n" +
                        "   \n" +
                        "   \"dependencies\": {\n" +
                        "      \"accepts\": \"~1.2.3\",\n" +
                        "      \"content-disposition\": \"0.5.0\",\n" +
                        "      \"cookie-signature\": \"1.0.5\",\n" +
                        "      \"debug\": \"~2.1.1\",\n" +
                        "      \"depd\": \"~1.0.0\",\n" +
                        "      \"escape-html\": \"1.0.1\",\n" +
                        "      \"etag\": \"~1.5.1\",\n" +
                        "      \"finalhandler\": \"0.3.3\",\n" +
                        "      \"fresh\": \"0.2.4\",\n" +
                        "      \"media-typer\": \"0.3.0\",\n" +
                        "      \"methods\": \"~1.1.1\",\n" +
                        "      \"on-finished\": \"~2.2.0\",\n" +
                        "      \"parseurl\": \"~1.3.0\",\n" +
                        "      \"path-to-regexp\": \"0.1.3\",\n" +
                        "      \"proxy-addr\": \"~1.0.6\",\n" +
                        "      \"qs\": \"2.3.3\",\n" +
                        "      \"range-parser\": \"~1.0.2\",\n" +
                        "      \"send\": \"0.11.1\",\n" +
                        "      \"serve-static\": \"~1.8.1\",\n" +
                        "      \"type-is\": \"~1.5.6\",\n" +
                        "      \"vary\": \"~1.0.0\",\n" +
                        "      \"cookie\": \"0.1.2\",\n" +
                        "      \"merge-descriptors\": \"0.0.2\",\n" +
                        "      \"utils-merge\": \"1.0.0\"\n" +
                        "   },\n" +
                        "   \n" +
                        "   \"devDependencies\": {\n" +
                        "      \"after\": \"0.8.1\",\n" +
                        "      \"ejs\": \"2.1.4\",\n" +
                        "      \"istanbul\": \"0.3.5\",\n" +
                        "      \"marked\": \"0.3.3\",\n" +
                        "      \"mocha\": \"~2.1.0\",\n" +
                        "      \"should\": \"~4.6.2\",\n" +
                        "      \"supertest\": \"~0.15.0\",\n" +
                        "      \"hjs\": \"~0.0.6\",\n" +
                        "      \"body-parser\": \"~1.11.0\",\n" +
                        "      \"connect-redis\": \"~2.2.0\",\n" +
                        "      \"cookie-parser\": \"~1.3.3\",\n" +
                        "      \"express-session\": \"~1.10.2\",\n" +
                        "      \"jade\": \"~1.9.1\",\n" +
                        "      \"method-override\": \"~2.3.1\",\n" +
                        "      \"morgan\": \"~1.5.1\",\n" +
                        "      \"multiparty\": \"~4.1.1\",\n" +
                        "      \"vhost\": \"~3.0.0\"\n" +
                        "   },\n" +
                        "   \n" +
                        "   \"engines\": {\n" +
                        "      \"node\": \">= 0.10.0\"\n" +
                        "   },\n" +
                        "   \n" +
                        "   \"files\": [\n" +
                        "      \"LICENSE\",\n" +
                        "      \"History.md\",\n" +
                        "      \"Readme.md\",\n" +
                        "      \"index.js\",\n" +
                        "      \"lib/\"\n" +
                        "   ],\n" +
                        "   \n" +
                        "   \"scripts\": {\n" +
                        "      \"test\": \"mocha --require test/support/env \n" +
                        "         --reporter spec --bail --check-leaks test/ test/acceptance/\",\n" +
                        "      \"test-cov\": \"istanbul cover node_modules/mocha/bin/_mocha \n" +
                        "         -- --require test/support/env --reporter dot --check-leaks test/ test/acceptance/\",\n" +
                        "      \"test-tap\": \"mocha --require test/support/env \n" +
                        "         --reporter tap --check-leaks test/ test/acceptance/\",\n" +
                        "      \"test-travis\": \"istanbul cover node_modules/mocha/bin/_mocha \n" +
                        "         --report lcovonly -- --require test/support/env \n" +
                        "         --reporter spec --check-leaks test/ test/acceptance/\"\n" +
                        "   },\n" +
                        "   \n" +
                        "   \"gitHead\": \"63ab25579bda70b4927a179b580a9c580b6c7ada\",\n" +
                        "   \"bugs\": {\n" +
                        "      \"url\": \"https://github.com/strongloop/express/issues\"\n" +
                        "   },\n" +
                        "   \n" +
                        "   \"_id\": \"express@4.11.2\",\n" +
                        "   \"_shasum\": \"8df3d5a9ac848585f00a0777601823faecd3b148\",\n" +
                        "   \"_from\": \"express@*\",\n" +
                        "   \"_npmVersion\": \"1.4.28\",\n" +
                        "   \"_npmUser\": {\n" +
                        "      \"name\": \"dougwilson\",\n" +
                        "      \"email\": \"doug@somethingdoug.com\"\n" +
                        "   },\n" +
                        "   \n" +
                        "   \"maintainers\": [{\n" +
                        "      \"name\": \"tjholowaychuk\",\n" +
                        "      \"email\": \"tj@vision-media.ca\"\n" +
                        "   },\n" +
                        "   \n" +
                        "   {\n" +
                        "      \"name\": \"jongleberry\",\n" +
                        "      \"email\": \"jonathanrichardong@gmail.com\"\n" +
                        "   },\n" +
                        "   \n" +
                        "   {\n" +
                        "      \"name\": \"shtylman\",\n" +
                        "      \"email\": \"shtylman@gmail.com\"\n" +
                        "   },\n" +
                        "   \n" +
                        "   {\n" +
                        "      \"name\": \"dougwilson\",\n" +
                        "      \"email\": \"doug@somethingdoug.com\"\n" +
                        "   },\n" +
                        "   \n" +
                        "   {\n" +
                        "      \"name\": \"aredridel\",\n" +
                        "      \"email\": \"aredridel@nbtsc.org\"\n" +
                        "   },\n" +
                        "   \n" +
                        "   {\n" +
                        "      \"name\": \"strongloop\",\n" +
                        "      \"email\": \"callback@strongloop.com\"\n" +
                        "   },\n" +
                        "   \n" +
                        "   {\n" +
                        "      \"name\": \"rfeng\",\n" +
                        "      \"email\": \"enjoyjava@gmail.com\"\n" +
                        "   }],\n" +
                        "   \n" +
                        "   \"dist\": {\n" +
                        "      \"shasum\": \"8df3d5a9ac848585f00a0777601823faecd3b148\",\n" +
                        "      \"tarball\": \"https://registry.npmjs.org/express/-/express-4.11.2.tgz\"\n" +
                        "   },\n" +
                        "   \n" +
                        "   \"directories\": {},\n" +
                        "      \"_resolved\": \"https://registry.npmjs.org/express/-/express-4.11.2.tgz\",\n" +
                        "      \"readme\": \"ERROR: No README data found!\"\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Attributes of Package.json",
                "name − name of the package\n" +
                        "\n" +
                        "version − version of the package\n" +
                        "\n" +
                        "description − description of the package\n" +
                        "\n" +
                        "homepage − homepage of the package\n" +
                        "\n" +
                        "author − author of the package\n" +
                        "\n" +
                        "contributors − name of the contributors to the package\n" +
                        "\n" +
                        "dependencies − list of dependencies. NPM automatically installs all the dependencies mentioned here in the node_module folder of the package.\n" +
                        "\n" +
                        "repository − repository type and URL of the package\n" +
                        "\n" +
                        "main − entry point of the package\n" +
                        "\n" +
                        "keywords − keywords",
                "",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Uninstalling a Module",
                "Use the following command to uninstall a Node.js module.\n" +
                        "\n" +
                        "$ npm uninstall express\n" +
                        "Once NPM uninstalls the package, you can verify it by looking at the content of /node_modules/ directory or type the following command −\n" +
                        "\n" +
                        "$ npm ls",
                "",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Updating a Module",
                "Update package.json and change the version of the dependency to be updated and run the following command.",
                "$ npm update express",
                ""
        );
        final LearnDetailsModel l8 = new LearnDetailsModel(
                "Search a Module",
                "Search a package name using NPM.",
                "$ npm search express",
                ""
        );final LearnDetailsModel l9 = new LearnDetailsModel(
                "Create a Module",
                "Creating a module requires package.json to be generated. Let's generate package.json using NPM, which will generate the basic skeleton of the package.json.",
                "$ npm init\n" +
                        "This utility will walk you through creating a package.json file.\n" +
                        "It only covers the most common items, and tries to guess sane defaults.\n" +
                        "\n" +
                        "See 'npm help json' for definitive documentation on these fields\n" +
                        "and exactly what they do.\n" +
                        "\n" +
                        "Use 'npm install <pkg> --save' afterwards to install a package and\n" +
                        "save it as a dependency in the package.json file.\n" +
                        "\n" +
                        "Press ^C at any time to quit.\n" +
                        "name: (webmaster)",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        list.add(l8);
        list.add(l9);

        return list;
    }
    //NodeJs Callbacks Concept
    private static List<LearnDetailsModel> NodeJsCallbacksConcept(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is Callback?",
                "Callback is an asynchronous equivalent for a function. A callback function is called at the completion of a given task. Node makes heavy use of callbacks. All the APIs of Node are written in such a way that they support callbacks.\n" +
                        "\n" +
                        "For example, a function to read a file may start reading file and return the control to the execution environment immediately so that the next instruction can be executed. Once file I/O is complete, it will call the callback function while passing the callback function, the content of the file as a parameter. So there is no blocking or wait for File I/O. This makes Node.js highly scalable, as it can process a high number of requests without waiting for any function to return results.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Blocking Code Example",
                "Create a text file named input.txt with the following content −\n" +
                        "\n" +
                        "SHR Creation is giving self learning content\n" +
                        "to teach the world in simple and easy way!!!!!\n" +
                        "Create a js file named main.js with the following code −" +
                        "\n\n" +
                        "Now run the main.js to see the result −\n" +
                        "\n" +
                        "$ node main.js",
                "var fs = require(\"fs\");\n" +
                        "var data = fs.readFileSync('input.txt');\n" +
                        "\n" +
                        "console.log(data.toString());\n" +
                        "console.log(\"Program Ended\");",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Non-Blocking Code Example",
                "Create a text file named input.txt with the following content.\n" +
                        "\n" +
                        "SHR Creation is giving self learning content\n" +
                        "to teach the world in simple and easy way!!!!!\n" +
                        "Update main.js to have the following code −" +
                        "\n\n" +
                        "Now run the main.js to see the result −\n" +
                        "\n" +
                        "$ node main.js",
                "var fs = require(\"fs\");\n" +
                        "\n" +
                        "fs.readFile('input.txt', function (err, data) {\n" +
                        "   if (err) return console.error(err);\n" +
                        "   console.log(data.toString());\n" +
                        "});\n" +
                        "\n" +
                        "console.log(\"Program Ended\");",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        return list;
    }
    //NodeJs Event Loop
    private static List<LearnDetailsModel> NodeJsEventLoop(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Event Loop",
                "Node.js is a single-threaded application, but it can support concurrency via the concept of event and callbacks. Every API of Node.js is asynchronous and being single-threaded, they use async function calls to maintain concurrency. Node uses observer pattern. Node thread keeps an event loop and whenever a task gets completed, it fires the corresponding event which signals the event-listener function to execute.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Event-Driven Programming",
                "Node.js uses events heavily and it is also one of the reasons why Node.js is pretty fast compared to other similar technologies. As soon as Node starts its server, it simply initiates its variables, declares functions and then simply waits for the event to occur.\n" +
                        "\n" +
                        "In an event-driven application, there is generally a main loop that listens for events, and then triggers a callback function when one of those events is detected." +
                        "\n\n" +
                        "Although events look quite similar to callbacks, the difference lies in the fact that callback functions are called when an asynchronous function returns its result, whereas event handling works on the observer pattern. The functions that listen to events act as Observers. Whenever an event gets fired, its listener function starts executing. Node.js has multiple in-built events available through events module and EventEmitter class which are used to bind events and event-listeners as follows −",
                "// Import events module\n" +
                        "var events = require('events');\n" +
                        "\n" +
                        "// Create an eventEmitter object\n" +
                        "var eventEmitter = new events.EventEmitter();",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Example",
                "Create a js file named main.js with the following code −" +
                        "\n\n" +
                        "After write the bellow codes, Now let's try to run the above program and check its output −\n" +
                        "\n" +
                        "$ node main.js",
                "// Import events module\n" +
                        "var events = require('events');\n" +
                        "\n" +
                        "// Create an eventEmitter object\n" +
                        "var eventEmitter = new events.EventEmitter();\n" +
                        "\n" +
                        "// Create an event handler as follows\n" +
                        "var connectHandler = function connected() {\n" +
                        "   console.log('connection succesful.');\n" +
                        "  \n" +
                        "   // Fire the data_received event \n" +
                        "   eventEmitter.emit('data_received');\n" +
                        "}\n" +
                        "\n" +
                        "// Bind the connection event with the handler\n" +
                        "eventEmitter.on('connection', connectHandler);\n" +
                        " \n" +
                        "// Bind the data_received event with the anonymous function\n" +
                        "eventEmitter.on('data_received', function() {\n" +
                        "   console.log('data received succesfully.');\n" +
                        "});\n" +
                        "\n" +
                        "// Fire the connection event \n" +
                        "eventEmitter.emit('connection');\n" +
                        "\n" +
                        "console.log(\"Program Ended.\");",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "How Node Applications Work?",
                "In Node Application, any async function accepts a callback as the last parameter and a callback function accepts an error as the first parameter. Let's revisit the previous example again. Create a text file named input.txt with the following content.\n" +
                        "\n" +
                        "SHR Creation is giving self learning content\n" +
                        "to teach the world in simple and easy way!!!!!\n" +
                        "Create a js file named main.js having the following code −" +
                        "\n\n" +
                        "Explanation:\n" +
                        "Here fs.readFile() is a async function whose purpose is to read a file. If an error occurs during the read operation, then the err object will contain the corresponding error, else data will contain the contents of the file. readFile passes err and data to the callback function after the read operation is complete, which finally prints the content.",
                "var fs = require(\"fs\");\n" +
                        "\n" +
                        "fs.readFile('input.txt', function (err, data) {\n" +
                        "   if (err) {\n" +
                        "      console.log(err.stack);\n" +
                        "      return;\n" +
                        "   }\n" +
                        "   console.log(data.toString());\n" +
                        "});\n" +
                        "console.log(\"Program Ended\");",
                "Program Ended\n" +
                        "SHR Creation is giving self learning content\n" +
                        "to teach the world in simple and easy way!!!!!"
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        return list;
    }
    //NodeJs Event Emitter
    private static List<LearnDetailsModel> NodeJsEventEmitter(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Event Emitter ",
                "Many objects in a Node emit events, for example, a net.Server emits an event each time a peer connects to it, an fs.readStream emits an event when the file is opened. All objects which emit events are the instances of events.EventEmitter.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "EventEmitter Class",
                "As we have seen in the previous section, EventEmitter class lies in the events module. It is accessible via the following code −" +
                        "\n\n" +
                        "When an EventEmitter instance faces any error, it emits an 'error' event. When a new listener is added, 'newListener' event is fired and when a listener is removed, 'removeListener' event is fired.\n" +
                        "\n" +
                        "EventEmitter provides multiple properties like on and emit. on property is used to bind a function with the event and emit is used to fire an event.",
                "// Import events module\n" +
                        "var events = require('events');\n" +
                        "\n" +
                        "// Create an eventEmitter object\n" +
                        "var eventEmitter = new events.EventEmitter();",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Methods",
                "1. addListener(event, listener)\n" +
                        "\n" +
                        "Adds a listener at the end of the listeners array for the specified event. No checks are made to see if the listener has already been added. Multiple calls passing the same combination of event and listener will result in the listener being added multiple times. Returns emitter, so calls can be chained.\n" +
                        "\n" +
                        "2. on(event, listener)\n" +
                        "\n" +
                        "Adds a listener at the end of the listeners array for the specified event. No checks are made to see if the listener has already been added. Multiple calls passing the same combination of event and listener will result in the listener being added multiple times. Returns emitter, so calls can be chained.\n" +
                        "\n" +
                        "3. once(event, listener)\n" +
                        "\n" +
                        "Adds a one time listener to the event. This listener is invoked only the next time the event is fired, after which it is removed. Returns emitter, so calls can be chained.\n" +
                        "\n" +
                        "4. removeListener(event, listener)\n" +
                        "\n" +
                        "Removes a listener from the listener array for the specified event. Caution − It changes the array indices in the listener array behind the listener. removeListener will remove, at most, one instance of a listener from the listener array. If any single listener has been added multiple times to the listener array for the specified event, then removeListener must be called multiple times to remove each instance. Returns emitter, so calls can be chained.\n" +
                        "\n" +
                        "5. removeAllListeners([event])\n" +
                        "\n" +
                        "Removes all listeners, or those of the specified event. It's not a good idea to remove listeners that were added elsewhere in the code, especially when it's on an emitter that you didn't create (e.g. sockets or file streams). Returns emitter, so calls can be chained.\n" +
                        "\n" +
                        "6. setMaxListeners(n)\n" +
                        "\n" +
                        "By default, EventEmitters will print a warning if more than 10 listeners are added for a particular event. This is a useful default which helps finding memory leaks. Obviously not all Emitters should be limited to 10. This function allows that to be increased. Set to zero for unlimited.\n" +
                        "\n" +
                        "7. listeners(event)\n" +
                        "\n" +
                        "Returns an array of listeners for the specified event.\n" +
                        "\n" +
                        "8. emit(event, [arg1], [arg2], [...])\n" +
                        "\n" +
                        "Execute each of the listeners in order with the supplied arguments. Returns true if the event had listeners, false otherwise.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Class Methods",
                "listenerCount(emitter, event)\n" +
                        "\n" +
                        "Returns the number of listeners for a given event.",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Events",
                "1. newListener\n" +
                        "\n" +
                        "event − String: the event name\n" +
                        "\n" +
                        "listener − Function: the event handler function\n" +
                        "\n" +
                        "This event is emitted any time a listener is added. When this event is triggered, the listener may not yet have been added to the array of listeners for the event.\n" +
                        "\n" +
                        "2. removeListener\n" +
                        "\n" +
                        "event − String The event name\n" +
                        "\n" +
                        "listener − Function The event handler function\n" +
                        "\n" +
                        "This event is emitted any time someone removes a listener. When this event is triggered, the listener may not yet have been removed from the array of listeners for the event.",
                "",
                ""
        );final LearnDetailsModel l6 = new LearnDetailsModel(
                "Example",
                "Create a js file named main.js with the following Node.js code −" +
                        "\n\n" +
                        "After write the bellow codes, Now run the main.js to see the result −\n" +
                        "\n" +
                        "$ node main.js",
                "var events = require('events');\n" +
                        "var eventEmitter = new events.EventEmitter();\n" +
                        "\n" +
                        "// listener #1\n" +
                        "var listner1 = function listner1() {\n" +
                        "   console.log('listner1 executed.');\n" +
                        "}\n" +
                        "\n" +
                        "// listener #2\n" +
                        "var listner2 = function listner2() {\n" +
                        "   console.log('listner2 executed.');\n" +
                        "}\n" +
                        "\n" +
                        "// Bind the connection event with the listner1 function\n" +
                        "eventEmitter.addListener('connection', listner1);\n" +
                        "\n" +
                        "// Bind the connection event with the listner2 function\n" +
                        "eventEmitter.on('connection', listner2);\n" +
                        "\n" +
                        "var eventListeners = require('events').EventEmitter.listenerCount\n" +
                        "   (eventEmitter,'connection');\n" +
                        "console.log(eventListeners + \" Listner(s) listening to connection event\");\n" +
                        "\n" +
                        "// Fire the connection event \n" +
                        "eventEmitter.emit('connection');\n" +
                        "\n" +
                        "// Remove the binding of listner1 function\n" +
                        "eventEmitter.removeListener('connection', listner1);\n" +
                        "console.log(\"Listner1 will not listen now.\");\n" +
                        "\n" +
                        "// Fire the connection event \n" +
                        "eventEmitter.emit('connection');\n" +
                        "\n" +
                        "eventListeners = require('events').EventEmitter.listenerCount(eventEmitter,'connection');\n" +
                        "console.log(eventListeners + \" Listner(s) listening to connection event\");\n" +
                        "\n" +
                        "console.log(\"Program Ended.\");",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        return list;
    }
    //NodeJs Buffers
    private static List<LearnDetailsModel> NodeJsBuffers(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "NodeJs Buffers",
                "Pure JavaScript is Unicode friendly, but it is not so for binary data. While dealing with TCP streams or the file system, it's necessary to handle octet streams. Node provides Buffer class which provides instances to store raw data similar to an array of integers but corresponds to a raw memory allocation outside the V8 heap.\n" +
                        "\n" +
                        "Buffer class is a global class that can be accessed in an application without importing the buffer module.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Creating Buffers",
                "Node Buffer can be constructed in a variety of ways.\n" +
                        "\n" +
                        "Method 1\n" +
                        "Following is the syntax to create an uninitiated Buffer of 10 octets −\n" +
                        "\n" +
                        "var buf = new Buffer(10);\n" +
                        "Method 2\n" +
                        "Following is the syntax to create a Buffer from a given array −\n" +
                        "\n" +
                        "var buf = new Buffer([10, 20, 30, 40, 50]);\n" +
                        "Method 3\n" +
                        "Following is the syntax to create a Buffer from a given string and optionally encoding type −\n" +
                        "\n" +
                        "var buf = new Buffer(\"Simply Easy Learning\", \"utf-8\");\n" +
                        "Though \"utf8\" is the default encoding, you can use any of the following encodings \"ascii\", \"utf8\", \"utf16le\", \"ucs2\", \"base64\" or \"hex\".",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Writing to Buffers",
                "Syntax\n" +
                        "Following is the syntax of the method to write into a Node Buffer −",
                "buf.write(string[, offset][, length][, encoding])",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Parameters",
                "Here is the description of the parameters used −\n" +
                        "\n" +
                        "string − This is the string data to be written to buffer.\n" +
                        "\n" +
                        "offset − This is the index of the buffer to start writing at. Default value is 0.\n" +
                        "\n" +
                        "length − This is the number of bytes to write. Defaults to buffer.length.\n" +
                        "\n" +
                        "encoding − Encoding to use. 'utf8' is the default encoding.",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Return Value",
                "This method returns the number of octets written. If there is not enough space in the buffer to fit the entire string, it will write a part of the string.",
                "buf = new Buffer(256);\n" +
                        "len = buf.write(\"Simply Easy Learning\");\n" +
                        "\n" +
                        "console.log(\"Octets written : \"+  len);",
                "Octets written : 20"
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Reading from Buffers",
                "Syntax\n" +
                        "Following is the syntax of the method to read data from a Node Buffer −",
                "buf.toString([encoding][, start][, end])",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Parameters",
                "Here is the description of the parameters used −\n" +
                        "\n" +
                        "encoding − Encoding to use. 'utf8' is the default encoding.\n" +
                        "\n" +
                        "start − Beginning index to start reading, defaults to 0.\n" +
                        "\n" +
                        "end − End index to end reading, defaults is complete buffer.",
                "",
                ""
        );
        final LearnDetailsModel l8 = new LearnDetailsModel(
                "Return Value",
                "This method decodes and returns a string from buffer data encoded using the specified character set encoding.",
                "buf = new Buffer(26);\n" +
                        "for (var i = 0 ; i < 26 ; i++) {\n" +
                        "  buf[i] = i + 97;\n" +
                        "}\n" +
                        "\n" +
                        "console.log( buf.toString('ascii'));       // outputs: abcdefghijklmnopqrstuvwxyz\n" +
                        "console.log( buf.toString('ascii',0,5));   // outputs: abcde\n" +
                        "console.log( buf.toString('utf8',0,5));    // outputs: abcde\n" +
                        "console.log( buf.toString(undefined,0,5)); // encoding defaults to 'utf8', outputs abcde",
                "abcdefghijklmnopqrstuvwxyz\n" +
                        "abcde\n" +
                        "abcde\n" +
                        "abcde"
        );
        final LearnDetailsModel l9 = new LearnDetailsModel(
                "Convert Buffer to JSON",
                "Syntax\n" +
                        "Following is the syntax of the method to convert a Node Buffer into JSON object −",
                "buf.toJSON()",
                ""
        );
        final LearnDetailsModel l10 = new LearnDetailsModel(
                "Return Value",
                "This method returns a JSON-representation of the Buffer instance.",
                "var buf = new Buffer('Simply Easy Learning');\n" +
                        "var json = buf.toJSON(buf);\n" +
                        "\n" +
                        "console.log(json);",
                "{ type: 'Buffer',\n" +
                        "   data: \n" +
                        "   [ \n" +
                        "      83,\n" +
                        "      105,\n" +
                        "      109,\n" +
                        "      112,\n" +
                        "      108,\n" +
                        "      121,\n" +
                        "      32,\n" +
                        "      69,\n" +
                        "      97,\n" +
                        "      115,\n" +
                        "      121,\n" +
                        "      32,\n" +
                        "      76,\n" +
                        "      101,\n" +
                        "      97,\n" +
                        "      114,\n" +
                        "      110,\n" +
                        "      105,\n" +
                        "      110,\n" +
                        "      103 \n" +
                        "   ]\n" +
                        "}"
        );
        final LearnDetailsModel l11 = new LearnDetailsModel(
                "Concatenate Buffers",
                "Syntax\n" +
                        "Following is the syntax of the method to concatenate Node buffers to a single Node Buffer −",
                "Buffer.concat(list[, totalLength])",
                ""
        );
        final LearnDetailsModel l12 = new LearnDetailsModel(
                "Parameters",
                "Here is the description of the parameters used −\n" +
                        "\n" +
                        "list − Array List of Buffer objects to be concatenated.\n" +
                        "\n" +
                        "totalLength − This is the total length of the buffers when concatenated.",
                "",
                ""
        );final LearnDetailsModel l13 = new LearnDetailsModel(
                "Return Value",
                "This method returns a Buffer instance.",
                "var buffer1 = new Buffer('SHR Creation ');\n" +
                        "var buffer2 = new Buffer('Simply Easy Learning');\n" +
                        "var buffer3 = Buffer.concat([buffer1,buffer2]);\n" +
                        "\n" +
                        "console.log(\"buffer3 content: \" + buffer3.toString());",
                "buffer3 content: SHR Creation Simply Easy Learning"
        );final LearnDetailsModel l14 = new LearnDetailsModel(
                "Compare Buffers",
                "Syntax\n" +
                        "Following is the syntax of the method to compare two Node buffers −",
                "buf.compare(otherBuffer);",
                ""
        );final LearnDetailsModel l15 = new LearnDetailsModel(
                "Parameters",
                "Here is the description of the parameters used −\n" +
                        "\n" +
                        "otherBuffer − This is the other buffer which will be compared with buf\n" +
                        "\n" +
                        "Return Value\n" +
                        "Returns a number indicating whether it comes before or after or is the same as the otherBuffer in sort order.",
                "var buffer1 = new Buffer('ABC');\n" +
                        "var buffer2 = new Buffer('ABCD');\n" +
                        "var result = buffer1.compare(buffer2);\n" +
                        "\n" +
                        "if(result < 0) {\n" +
                        "   console.log(buffer1 +\" comes before \" + buffer2);\n" +
                        "} else if(result === 0) {\n" +
                        "   console.log(buffer1 +\" is same as \" + buffer2);\n" +
                        "} else {\n" +
                        "   console.log(buffer1 +\" comes after \" + buffer2);\n" +
                        "}",
                "ABC comes before ABCD"
        );final LearnDetailsModel l16 = new LearnDetailsModel(
                "Copy Buffer",
                "Syntax\n" +
                        "Following is the syntax of the method to copy a node buffer −",
                "buf.copy(targetBuffer[, targetStart][, sourceStart][, sourceEnd])",
                ""
        );final LearnDetailsModel l17 = new LearnDetailsModel(
                "Parameters",
                "Here is the description of the parameters used −\n" +
                        "\n" +
                        "targetBuffer − Buffer object where buffer will be copied.\n" +
                        "\n" +
                        "targetStart − Number, Optional, Default: 0\n" +
                        "\n" +
                        "sourceStart − Number, Optional, Default: 0\n" +
                        "\n" +
                        "sourceEnd − Number, Optional, Default: buffer.length" +
                        "\n\n" +
                        "Return Value\n" +
                        "No return value. Copies data from a region of this buffer to a region in the target buffer even if the target memory region overlaps with the source. If undefined, the targetStart and sourceStart parameters default to 0, while sourceEnd defaults to buffer.length.",
                "var buffer1 = new Buffer('ABC');\n" +
                        "\n" +
                        "//copy a buffer\n" +
                        "var buffer2 = new Buffer(3);\n" +
                        "buffer1.copy(buffer2);\n" +
                        "console.log(\"buffer2 content: \" + buffer2.toString());",
                "buffer2 content: ABC"
        );final LearnDetailsModel l18 = new LearnDetailsModel(
                "Slice Buffer",
                "Syntax\n" +
                        "Following is the syntax of the method to get a sub-buffer of a node buffer −",
                "buf.slice([start][, end])",
                ""
        );final LearnDetailsModel l19 = new LearnDetailsModel(
                "Parameters",
                "Here is the description of the parameters used −\n" +
                        "\n" +
                        "start − Number, Optional, Default: 0\n" +
                        "\n" +
                        "end − Number, Optional, Default: buffer.length\n" +
                        "\n" +
                        "Return Value\n" +
                        "Returns a new buffer which references the same memory as the old one, but offset and cropped by the start (defaults to 0) and end (defaults to buffer.length) indexes. Negative indexes start from the end of the buffer.",
                "var buffer1 = new Buffer('SHR Creation');\n" +
                        "\n" +
                        "//slicing a buffer\n" +
                        "var buffer2 = buffer1.slice(0,9);\n" +
                        "console.log(\"buffer2 content: \" + buffer2.toString());",
                "buffer2 content: SHR Creat"
        );final LearnDetailsModel l20 = new LearnDetailsModel(
                "Buffer Length",
                "Syntax\n" +
                        "Following is the syntax of the method to get a size of a node buffer in bytes −\n" +
                        "\n" +
                        "buf.length;\n" +
                        "Return Value\n" +
                        "Returns the size of a buffer in bytes.",
                "var buffer = new Buffer('SHR Creation');\n" +
                        "\n" +
                        "//length of the buffer\n" +
                        "console.log(\"buffer length: \" + buffer.length);",
                "buffer length: 14"
        );final LearnDetailsModel l21 = new LearnDetailsModel(
                "Class Methods",
                "1. Buffer.isEncoding(encoding)\n" +
                        "\n" +
                        "Returns true if the encoding is a valid encoding argument, false otherwise.\n" +
                        "\n" +
                        "2. Buffer.isBuffer(obj)\n" +
                        "\n" +
                        "Tests if obj is a Buffer.\n" +
                        "\n" +
                        "3. Buffer.byteLength(string[, encoding])\n" +
                        "\n" +
                        "Gives the actual byte length of a string. encoding defaults to 'utf8'. It is not the same as String.prototype.length, since String.prototype.length returns the number of characters in a string.\n" +
                        "\n" +
                        "4. Buffer.concat(list[, totalLength])\n" +
                        "\n" +
                        "Returns a buffer which is the result of concatenating all the buffers in the list together.\n" +
                        "\n" +
                        "5. Buffer.compare(buf1, buf2)\n" +
                        "\n" +
                        "The same as buf1.compare(buf2). Useful for sorting an array of buffers.",
                "",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        list.add(l8);
        list.add(l9);
        list.add(l10);
        list.add(l11);
        list.add(l12);
        list.add(l13);
        list.add(l14);
        list.add(l15);
        list.add(l16);
        list.add(l17);
        list.add(l18);
        list.add(l19);
        list.add(l20);
        list.add(l21);

        return list;
    }
    //NodeJs Streams
    private static List<LearnDetailsModel> NodeJsStreams(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What are Streams?",
                "Streams are objects that let you read data from a source or write data to a destination in continuous fashion. In Node.js, there are four types of streams −\n" +
                        "\n" +
                        "Readable − Stream which is used for read operation.\n" +
                        "\n" +
                        "Writable − Stream which is used for write operation.\n" +
                        "\n" +
                        "Duplex − Stream which can be used for both read and write operation.\n" +
                        "\n" +
                        "Transform − A type of duplex stream where the output is computed based on input.\n" +
                        "\n" +
                        "Each type of Stream is an EventEmitter instance and throws several events at different instance of times. For example, some of the commonly used events are −\n" +
                        "\n" +
                        "data − This event is fired when there is data is available to read.\n" +
                        "\n" +
                        "end − This event is fired when there is no more data to read.\n" +
                        "\n" +
                        "error − This event is fired when there is any error receiving or writing data.\n" +
                        "\n" +
                        "finish − This event is fired when all the data has been flushed to underlying system.\n" +
                        "\n" +
                        "This tutorial provides a basic understanding of the commonly used operations on Streams.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Reading from a Stream",
                "Create a text file named input.txt having the following content −\n" +
                        "\n" +
                        "SHR Creation is giving self learning content\n" +
                        "to teach the world in simple and easy way!!!!!\n" +
                        "Create a js file named main.js with the following code −" +
                        "\n\n" +
                        "After write the bellow codes, Now run the main.js to see the result −\n" +
                        "\n" +
                        "$ node main.js",
                "var fs = require(\"fs\");\n" +
                        "var data = '';\n" +
                        "\n" +
                        "// Create a readable stream\n" +
                        "var readerStream = fs.createReadStream('input.txt');\n" +
                        "\n" +
                        "// Set the encoding to be utf8. \n" +
                        "readerStream.setEncoding('UTF8');\n" +
                        "\n" +
                        "// Handle stream events --> data, end, and error\n" +
                        "readerStream.on('data', function(chunk) {\n" +
                        "   data += chunk;\n" +
                        "});\n" +
                        "\n" +
                        "readerStream.on('end',function() {\n" +
                        "   console.log(data);\n" +
                        "});\n" +
                        "\n" +
                        "readerStream.on('error', function(err) {\n" +
                        "   console.log(err.stack);\n" +
                        "});\n" +
                        "\n" +
                        "console.log(\"Program Ended\");",
                "Program Ended\n" +
                        "SHR Creation is giving self learning content\n" +
                        "to teach the world in simple and easy way!!!!!"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Writing to a Stream",
                "Create a js file named main.js with the following code −" +
                        "\n\n" +
                        "Now run the main.js to see the result −\n" +
                        "\n" +
                        "$ node main.js",
                "var fs = require(\"fs\");\n" +
                        "var data = 'Simply Easy Learning';\n" +
                        "\n" +
                        "// Create a writable stream\n" +
                        "var writerStream = fs.createWriteStream('output.txt');\n" +
                        "\n" +
                        "// Write the data to stream with encoding to be utf8\n" +
                        "writerStream.write(data,'UTF8');\n" +
                        "\n" +
                        "// Mark the end of file\n" +
                        "writerStream.end();\n" +
                        "\n" +
                        "// Handle stream events --> finish, and error\n" +
                        "writerStream.on('finish', function() {\n" +
                        "   console.log(\"Write completed.\");\n" +
                        "});\n" +
                        "\n" +
                        "writerStream.on('error', function(err) {\n" +
                        "   console.log(err.stack);\n" +
                        "});\n" +
                        "\n" +
                        "console.log(\"Program Ended\");",
                "Simply Easy Learning"
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Piping the Streams",
                "Piping is a mechanism where we provide the output of one stream as the input to another stream. It is normally used to get data from one stream and to pass the output of that stream to another stream. There is no limit on piping operations. Now we'll show a piping example for reading from one file and writing it to another file.\n" +
                        "\n" +
                        "Create a js file named main.js with the following code −" +
                        "\n\n" +
                        "Now run the main.js to see the result −\n" +
                        "\n" +
                        "$ node main.js",
                "var fs = require(\"fs\");\n" +
                        "\n" +
                        "// Create a readable stream\n" +
                        "var readerStream = fs.createReadStream('input.txt');\n" +
                        "\n" +
                        "// Create a writable stream\n" +
                        "var writerStream = fs.createWriteStream('output.txt');\n" +
                        "\n" +
                        "// Pipe the read and write operations\n" +
                        "// read input.txt and write data to output.txt\n" +
                        "readerStream.pipe(writerStream);\n" +
                        "\n" +
                        "console.log(\"Program Ended\");",
                "SHR Creation is giving self learning content\n" +
                        "to teach the world in simple and easy way!!!!!"
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Chaining the Streams",
                "Chaining is a mechanism to connect the output of one stream to another stream and create a chain of multiple stream operations. It is normally used with piping operations. Now we'll use piping and chaining to first compress a file and then decompress the same.\n" +
                        "\n" +
                        "Create a js file named main.js with the following code −" +
                        "\n\n" +
                        "Now run the main.js to see the result −\n" +
                        "\n" +
                        "$ node main.js",
                "var fs = require(\"fs\");\n" +
                        "var zlib = require('zlib');\n" +
                        "\n" +
                        "// Compress the file input.txt to input.txt.gz\n" +
                        "fs.createReadStream('input.txt')\n" +
                        "   .pipe(zlib.createGzip())\n" +
                        "   .pipe(fs.createWriteStream('input.txt.gz'));\n" +
                        "  \n" +
                        "console.log(\"File Compressed.\");",
                "File Compressed."
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }
    //NodeJs File System
    private static List<LearnDetailsModel> NodeJsFileSystem(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "File System",
                "Node implements File I/O using simple wrappers around standard POSIX functions. The Node File System (fs) module can be imported using the following syntax −",
                "var fs = require(\"fs\")",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Synchronous vs Asynchronous",
                "Every method in the fs module has synchronous as well as asynchronous forms. Asynchronous methods take the last parameter " +
                        "as the completion function callback and the first parameter of the callback function as error. " +
                        "It is better to use an asynchronous method instead of a synchronous method, as the former never blocks a " +
                        "program during its execution, whereas the second one does." +
                        "\n\n" +
                        "Example\n" +
                        "Create a text file named input.txt with the following content −\n" +
                        "\n" +
                        "SHR Creation is giving self learning content\n" +
                        "to teach the world in simple and easy way!!!!!" +
                        "\n\n" +
                        "After write the bellow codes, Now run the main.js to see the result −\n" +
                        "\n" +
                        "$ node main.js",
                "var fs = require(\"fs\");\n" +
                        "\n" +
                        "// Asynchronous read\n" +
                        "fs.readFile('input.txt', function (err, data) {\n" +
                        "   if (err) {\n" +
                        "      return console.error(err);\n" +
                        "   }\n" +
                        "   console.log(\"Asynchronous read: \" + data.toString());\n" +
                        "});\n" +
                        "\n" +
                        "// Synchronous read\n" +
                        "var data = fs.readFileSync('input.txt');\n" +
                        "console.log(\"Synchronous read: \" + data.toString());\n" +
                        "\n" +
                        "console.log(\"Program Ended\");",
                "Synchronous read: SHR Creation is giving self learning content\n" +
                        "to teach the world in simple and easy way!!!!!\n" +
                        "\n" +
                        "Program Ended\n" +
                        "Asynchronous read: SHR Creation is giving self learning content\n" +
                        "to teach the world in simple and easy way!!!!!"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Open a File",
                "Syntax\n" +
                        "Following is the syntax of the method to open a file in asynchronous mode −",
                "fs.open(path, flags[, mode], callback)",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Parameters",
                "Here is the description of the parameters used −\n" +
                        "\n" +
                        "path − This is the string having file name including path.\n" +
                        "\n" +
                        "flags − Flags indicate the behavior of the file to be opened. All possible values have been mentioned below.\n" +
                        "\n" +
                        "mode − It sets the file mode (permission and sticky bits), but only if the file was created. It defaults to 0666, readable and writeable.\n" +
                        "\n" +
                        "callback − This is the callback function which gets two arguments (err, fd).",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Flags",
                "Flags for read/write operations are −" +
                        "\n\n" +
                        "1. r\n" +
                        "\n" +
                        "Open file for reading. An exception occurs if the file does not exist.\n" +
                        "\n" +
                        "2. r+\n" +
                        "\n" +
                        "Open file for reading and writing. An exception occurs if the file does not exist.\n" +
                        "\n" +
                        "3. rs\n" +
                        "\n" +
                        "Open file for reading in synchronous mode.\n" +
                        "\n" +
                        "4. rs+\n" +
                        "\n" +
                        "Open file for reading and writing, asking the OS to open it synchronously. See notes for 'rs' about using this with caution.\n" +
                        "\n" +
                        "5. w\n" +
                        "\n" +
                        "Open file for writing. The file is created (if it does not exist) or truncated (if it exists).\n" +
                        "\n" +
                        "6. wx\n" +
                        "\n" +
                        "Like 'w' but fails if the path exists.\n" +
                        "\n" +
                        "7. w+\n" +
                        "\n" +
                        "Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).\n" +
                        "\n" +
                        "8. wx+\n" +
                        "\n" +
                        "Like 'w+' but fails if path exists.\n" +
                        "\n" +
                        "9. a\n" +
                        "\n" +
                        "Open file for appending. The file is created if it does not exist.\n" +
                        "\n" +
                        "10. ax\n" +
                        "\n" +
                        "Like 'a' but fails if the path exists.\n" +
                        "\n" +
                        "11. a+\n" +
                        "\n" +
                        "Open file for reading and appending. The file is created if it does not exist.\n" +
                        "\n" +
                        "12. ax+\n" +
                        "\n" +
                        "Like 'a+' but fails if the the path exists.",
                "",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Example",
                "Let us create a js file named main.js having the following code to open a file input.txt for reading and writing." +
                        "\n\n" +
                        "Now run the main.js to see the result −\n" +
                        "\n" +
                        "$ node main.js",
                "var fs = require(\"fs\");\n" +
                        "\n" +
                        "// Asynchronous - Opening File\n" +
                        "console.log(\"Going to open file!\");\n" +
                        "fs.open('input.txt', 'r+', function(err, fd) {\n" +
                        "   if (err) {\n" +
                        "      return console.error(err);\n" +
                        "   }\n" +
                        "   console.log(\"File opened successfully!\");     \n" +
                        "});",
                "Going to open file!\n" +
                        "File opened successfully!"
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Get File Information",
                "Syntax\n" +
                        "Following is the syntax of the method to get the information about a file −",
                "fs.stat(path, callback)",
                ""
        );
        final LearnDetailsModel l8 = new LearnDetailsModel(
                "Parameters",
                "Here is the description of the parameters used −\n" +
                        "\n" +
                        "path − This is the string having file name including path.\n" +
                        "\n" +
                        "callback − This is the callback function which gets two arguments (err, stats) where stats is an object of fs.Stats type which is printed below in the example.\n" +
                        "\n" +
                        "Apart from the important attributes which are printed below in the example, there are several useful methods available in fs.Stats class which can be used to check file type. These methods are given in the following table." +
                        "\n\n\n" +
                        "1. stats.isFile()\n" +
                        "\n" +
                        "Returns true if file type of a simple file.\n" +
                        "\n" +
                        "2. stats.isDirectory()\n" +
                        "\n" +
                        "Returns true if file type of a directory.\n" +
                        "\n" +
                        "3. stats.isBlockDevice()\n" +
                        "\n" +
                        "Returns true if file type of a block device.\n" +
                        "\n" +
                        "4. stats.isCharacterDevice()\n" +
                        "\n" +
                        "Returns true if file type of a character device.\n" +
                        "\n" +
                        "5. stats.isSymbolicLink()\n" +
                        "\n" +
                        "Returns true if file type of a symbolic link.\n" +
                        "\n" +
                        "6. stats.isFIFO()\n" +
                        "\n" +
                        "Returns true if file type of a FIFO.\n" +
                        "\n" +
                        "7. stats.isSocket()\n" +
                        "\n" +
                        "Returns true if file type of asocket.",
                "",
                ""
        );
        final LearnDetailsModel l9 = new LearnDetailsModel(
                "Example",
                "Let us create a js file named main.js with the following code −" +
                        "\n\n" +
                        "Now run the main.js to see the result −\n" +
                        "\n" +
                        "$ node main.js",
                "var fs = require(\"fs\");\n" +
                        "\n" +
                        "console.log(\"Going to get file info!\");\n" +
                        "fs.stat('input.txt', function (err, stats) {\n" +
                        "   if (err) {\n" +
                        "      return console.error(err);\n" +
                        "   }\n" +
                        "   console.log(stats);\n" +
                        "   console.log(\"Got file info successfully!\");\n" +
                        "   \n" +
                        "   // Check file type\n" +
                        "   console.log(\"isFile ? \" + stats.isFile());\n" +
                        "   console.log(\"isDirectory ? \" + stats.isDirectory());    \n" +
                        "});",
                "Going to get file info!\n" +
                        "{ \n" +
                        "   dev: 1792,\n" +
                        "   mode: 33188,\n" +
                        "   nlink: 1,\n" +
                        "   uid: 48,\n" +
                        "   gid: 48,\n" +
                        "   rdev: 0,\n" +
                        "   blksize: 4096,\n" +
                        "   ino: 4318127,\n" +
                        "   size: 97,\n" +
                        "   blocks: 8,\n" +
                        "   atime: Sun Mar 22 2015 13:40:00 GMT-0500 (CDT),\n" +
                        "   mtime: Sun Mar 22 2015 13:40:57 GMT-0500 (CDT),\n" +
                        "   ctime: Sun Mar 22 2015 13:40:57 GMT-0500 (CDT) \n" +
                        "}\n" +
                        "Got file info successfully!\n" +
                        "isFile ? true\n" +
                        "isDirectory ? false"
        );
        final LearnDetailsModel l10 = new LearnDetailsModel(
                "Writing a File",
                "Syntax\n" +
                        "Following is the syntax of one of the methods to write into a file −\n" +
                        "\n" +
                        "fs.writeFile(filename, data[, options], callback)\n" +
                        "This method will over-write the file if the file already exists. If you want to write into an existing file then you should use another method available.\n" +
                        "\n" +
                        "Parameters\n" +
                        "Here is the description of the parameters used −\n" +
                        "\n" +
                        "path − This is the string having the file name including path.\n" +
                        "\n" +
                        "data − This is the String or Buffer to be written into the file.\n" +
                        "\n" +
                        "options − The third parameter is an object which will hold {encoding, mode, flag}. By default. encoding is utf8, mode is octal value 0666. and flag is 'w'\n" +
                        "\n" +
                        "callback − This is the callback function which gets a single parameter err that returns an error in case of any writing error.\n" +
                        "\n" +
                        "Example\n" +
                        "Let us create a js file named main.js having the following code −" +
                        "\n\n" +
                        "Now run the main.js to see the result −\n" +
                        "\n" +
                        "$ node main.js",
                "var fs = require(\"fs\");\n" +
                        "\n" +
                        "console.log(\"Going to write into existing file\");\n" +
                        "fs.writeFile('input.txt', 'Simply Easy Learning!', function(err) {\n" +
                        "   if (err) {\n" +
                        "      return console.error(err);\n" +
                        "   }\n" +
                        "   \n" +
                        "   console.log(\"Data written successfully!\");\n" +
                        "   console.log(\"Let's read newly written data\");\n" +
                        "   \n" +
                        "   fs.readFile('input.txt', function (err, data) {\n" +
                        "      if (err) {\n" +
                        "         return console.error(err);\n" +
                        "      }\n" +
                        "      console.log(\"Asynchronous read: \" + data.toString());\n" +
                        "   });\n" +
                        "});",
                "Going to write into existing file\n" +
                        "Data written successfully!\n" +
                        "Let's read newly written data\n" +
                        "Asynchronous read: Simply Easy Learning!"
        );
        final LearnDetailsModel l11 = new LearnDetailsModel(
                "Reading a File",
                "Syntax\n" +
                        "Following is the syntax of one of the methods to read from a file −\n" +
                        "\n" +
                        "fs.read(fd, buffer, offset, length, position, callback)\n" +
                        "This method will use file descriptor to read the file. If you want to read the file directly using the file name, then you should use another method available.\n" +
                        "\n" +
                        "Parameters\n" +
                        "Here is the description of the parameters used −\n" +
                        "\n" +
                        "fd − This is the file descriptor returned by fs.open().\n" +
                        "\n" +
                        "buffer − This is the buffer that the data will be written to.\n" +
                        "\n" +
                        "offset − This is the offset in the buffer to start writing at.\n" +
                        "\n" +
                        "length − This is an integer specifying the number of bytes to read.\n" +
                        "\n" +
                        "position − This is an integer specifying where to begin reading from in the file. If position is null, data will be read from the current file position.\n" +
                        "\n" +
                        "callback − This is the callback function which gets the three arguments, (err, bytesRead, buffer).\n" +
                        "\n" +
                        "Example\n" +
                        "Let us create a js file named main.js with the following code −" +
                        "\n\n" +
                        "Now run the main.js to see the result −\n" +
                        "\n" +
                        "$ node main.js",
                "var fs = require(\"fs\");\n" +
                        "var buf = new Buffer(1024);\n" +
                        "\n" +
                        "console.log(\"Going to open an existing file\");\n" +
                        "fs.open('input.txt', 'r+', function(err, fd) {\n" +
                        "   if (err) {\n" +
                        "      return console.error(err);\n" +
                        "   }\n" +
                        "   console.log(\"File opened successfully!\");\n" +
                        "   console.log(\"Going to read the file\");\n" +
                        "   \n" +
                        "   fs.read(fd, buf, 0, buf.length, 0, function(err, bytes){\n" +
                        "      if (err){\n" +
                        "         console.log(err);\n" +
                        "      }\n" +
                        "      console.log(bytes + \" bytes read\");\n" +
                        "      \n" +
                        "      // Print only read bytes to avoid junk.\n" +
                        "      if(bytes > 0){\n" +
                        "         console.log(buf.slice(0, bytes).toString());\n" +
                        "      }\n" +
                        "   });\n" +
                        "});",
                "Going to open an existing file\n" +
                        "File opened successfully!\n" +
                        "Going to read the file\n" +
                        "97 bytes read\n" +
                        "SHR Creation is giving self learning content\n" +
                        "to teach the world in simple and easy way!!!!!"
        );
        final LearnDetailsModel l12 = new LearnDetailsModel(
                "Closing a File",
                "Syntax\n" +
                        "Following is the syntax to close an opened file −\n" +
                        "\n" +
                        "fs.close(fd, callback)\n" +
                        "Parameters\n" +
                        "Here is the description of the parameters used −\n" +
                        "\n" +
                        "fd − This is the file descriptor returned by file fs.open() method.\n" +
                        "\n" +
                        "callback − This is the callback function No arguments other than a possible exception are given to the completion callback.\n" +
                        "\n" +
                        "Example\n" +
                        "Let us create a js file named main.js having the following code −" +
                        "\n\n" +
                        "Now run the main.js to see the result −\n" +
                        "\n" +
                        "$ node main.js",
                "var fs = require(\"fs\");\n" +
                        "var buf = new Buffer(1024);\n" +
                        "\n" +
                        "console.log(\"Going to open an existing file\");\n" +
                        "fs.open('input.txt', 'r+', function(err, fd) {\n" +
                        "   if (err) {\n" +
                        "      return console.error(err);\n" +
                        "   }\n" +
                        "   console.log(\"File opened successfully!\");\n" +
                        "   console.log(\"Going to read the file\");\n" +
                        "   \n" +
                        "   fs.read(fd, buf, 0, buf.length, 0, function(err, bytes) {\n" +
                        "      if (err) {\n" +
                        "         console.log(err);\n" +
                        "      }\n" +
                        "\n" +
                        "      // Print only read bytes to avoid junk.\n" +
                        "      if(bytes > 0) {\n" +
                        "         console.log(buf.slice(0, bytes).toString());\n" +
                        "      }\n" +
                        "\n" +
                        "      // Close the opened file.\n" +
                        "      fs.close(fd, function(err) {\n" +
                        "         if (err) {\n" +
                        "            console.log(err);\n" +
                        "         } \n" +
                        "         console.log(\"File closed successfully.\");\n" +
                        "      });\n" +
                        "   });\n" +
                        "});",
                "Going to open an existing file\n" +
                        "File opened successfully!\n" +
                        "Going to read the file\n" +
                        "SHR Creation is giving self learning content\n" +
                        "to teach the world in simple and easy way!!!!!\n" +
                        "\n" +
                        "File closed successfully."
        );final LearnDetailsModel l13 = new LearnDetailsModel(
                "Truncate a File",
                "Syntax\n" +
                        "Following is the syntax of the method to truncate an opened file −\n" +
                        "\n" +
                        "fs.ftruncate(fd, len, callback)\n" +
                        "Parameters\n" +
                        "Here is the description of the parameters used −\n" +
                        "\n" +
                        "fd − This is the file descriptor returned by fs.open().\n" +
                        "\n" +
                        "len − This is the length of the file after which the file will be truncated.\n" +
                        "\n" +
                        "callback − This is the callback function No arguments other than a possible exception are given to the completion callback.\n" +
                        "\n" +
                        "Example\n" +
                        "Let us create a js file named main.js having the following code −" +
                        "\n\n" +
                        "Now run the main.js to see the result −\n" +
                        "\n" +
                        "$ node main.js",
                "var fs = require(\"fs\");\n" +
                        "var buf = new Buffer(1024);\n" +
                        "\n" +
                        "console.log(\"Going to open an existing file\");\n" +
                        "fs.open('input.txt', 'r+', function(err, fd) {\n" +
                        "   if (err) {\n" +
                        "      return console.error(err);\n" +
                        "   }\n" +
                        "   console.log(\"File opened successfully!\");\n" +
                        "   console.log(\"Going to truncate the file after 10 bytes\");\n" +
                        "   \n" +
                        "   // Truncate the opened file.\n" +
                        "   fs.ftruncate(fd, 10, function(err) {\n" +
                        "      if (err) {\n" +
                        "         console.log(err);\n" +
                        "      } \n" +
                        "      console.log(\"File truncated successfully.\");\n" +
                        "      console.log(\"Going to read the same file\"); \n" +
                        "      \n" +
                        "      fs.read(fd, buf, 0, buf.length, 0, function(err, bytes){\n" +
                        "         if (err) {\n" +
                        "            console.log(err);\n" +
                        "         }\n" +
                        "\n" +
                        "         // Print only read bytes to avoid junk.\n" +
                        "         if(bytes > 0) {\n" +
                        "            console.log(buf.slice(0, bytes).toString());\n" +
                        "         }\n" +
                        "\n" +
                        "         // Close the opened file.\n" +
                        "         fs.close(fd, function(err) {\n" +
                        "            if (err) {\n" +
                        "               console.log(err);\n" +
                        "            } \n" +
                        "            console.log(\"File closed successfully.\");\n" +
                        "         });\n" +
                        "      });\n" +
                        "   });\n" +
                        "});",
                "Going to open an existing file\n" +
                        "File opened successfully!\n" +
                        "Going to truncate the file after 10 bytes\n" +
                        "File truncated successfully.\n" +
                        "Going to read the same file\n" +
                        "Tutorials \n" +
                        "File closed successfully."
        );final LearnDetailsModel l14 = new LearnDetailsModel(
                "Delete a File",
                "Syntax\n" +
                        "Following is the syntax of the method to delete a file −\n" +
                        "\n" +
                        "fs.unlink(path, callback)\n" +
                        "Parameters\n" +
                        "Here is the description of the parameters used −\n" +
                        "\n" +
                        "path − This is the file name including path.\n" +
                        "\n" +
                        "callback − This is the callback function No arguments other than a possible exception are given to the completion callback.\n" +
                        "\n" +
                        "Example\n" +
                        "Let us create a js file named main.js having the following code −" +
                        "\n\n" +
                        "Now run the main.js to see the result −\n" +
                        "\n" +
                        "$ node main.js",
                "var fs = require(\"fs\");\n" +
                        "\n" +
                        "console.log(\"Going to delete an existing file\");\n" +
                        "fs.unlink('input.txt', function(err) {\n" +
                        "   if (err) {\n" +
                        "      return console.error(err);\n" +
                        "   }\n" +
                        "   console.log(\"File deleted successfully!\");\n" +
                        "});",
                "Going to delete an existing file\n" +
                        "File deleted successfully!"
        );final LearnDetailsModel l15 = new LearnDetailsModel(
                "Create a Directory",
                "Syntax\n" +
                        "Following is the syntax of the method to create a directory −\n" +
                        "\n" +
                        "fs.mkdir(path[, mode], callback)\n" +
                        "Parameters\n" +
                        "Here is the description of the parameters used −\n" +
                        "\n" +
                        "path − This is the directory name including path.\n" +
                        "\n" +
                        "mode − This is the directory permission to be set. Defaults to 0777.\n" +
                        "\n" +
                        "callback − This is the callback function No arguments other than a possible exception are given to the completion callback.\n" +
                        "\n" +
                        "Example\n" +
                        "Let us create a js file named main.js having the following code −" +
                        "\n\n" +
                        "Now run the main.js to see the result −\n" +
                        "\n" +
                        "$ node main.js",
                "var fs = require(\"fs\");\n" +
                        "\n" +
                        "console.log(\"Going to create directory /tmp/test\");\n" +
                        "fs.mkdir('/tmp/test',function(err) {\n" +
                        "   if (err) {\n" +
                        "      return console.error(err);\n" +
                        "   }\n" +
                        "   console.log(\"Directory created successfully!\");\n" +
                        "});",
                "Going to create directory /tmp/test\n" +
                        "Directory created successfully!"
        );final LearnDetailsModel l16 = new LearnDetailsModel(
                "Read a Directory",
                "Syntax\n" +
                        "Following is the syntax of the method to read a directory −\n" +
                        "\n" +
                        "fs.readdir(path, callback)\n" +
                        "Parameters\n" +
                        "Here is the description of the parameters used −\n" +
                        "\n" +
                        "path − This is the directory name including path.\n" +
                        "\n" +
                        "callback − This is the callback function which gets two arguments (err, files) where files is an array of the names of the files in the directory excluding '.' and '..'.\n" +
                        "\n" +
                        "Example\n" +
                        "Let us create a js file named main.js having the following code −" +
                        "\n\n" +
                        "Now run the main.js to see the result −\n" +
                        "\n" +
                        "$ node main.js",
                "var fs = require(\"fs\");\n" +
                        "\n" +
                        "console.log(\"Going to read directory /tmp\");\n" +
                        "fs.readdir(\"/tmp/\",function(err, files) {\n" +
                        "   if (err) {\n" +
                        "      return console.error(err);\n" +
                        "   }\n" +
                        "   files.forEach( function (file) {\n" +
                        "      console.log( file );\n" +
                        "   });\n" +
                        "});",
                "Going to read directory /tmp\n" +
                        "ccmzx99o.out\n" +
                        "ccyCSbkF.out\n" +
                        "employee.ser\n" +
                        "hsperfdata_apache\n" +
                        "test\n" +
                        "test.txt"
        );final LearnDetailsModel l17 = new LearnDetailsModel(
                "Remove a Directory",
                "Syntax\n" +
                        "Following is the syntax of the method to remove a directory −\n" +
                        "\n" +
                        "fs.rmdir(path, callback)\n" +
                        "Parameters\n" +
                        "Here is the description of the parameters used −\n" +
                        "\n" +
                        "path − This is the directory name including path.\n" +
                        "\n" +
                        "callback − This is the callback function No arguments other than a possible exception are given to the completion callback.\n" +
                        "\n" +
                        "Example\n" +
                        "Let us create a js file named main.js having the following code −" +
                        "\n\n" +
                        "Now run the main.js to see the result −\n" +
                        "\n" +
                        "$ node main.js",
                "var fs = require(\"fs\");\n" +
                        "\n" +
                        "console.log(\"Going to delete directory /tmp/test\");\n" +
                        "fs.rmdir(\"/tmp/test\",function(err) {\n" +
                        "   if (err) {\n" +
                        "      return console.error(err);\n" +
                        "   }\n" +
                        "   console.log(\"Going to read directory /tmp\");\n" +
                        "   \n" +
                        "   fs.readdir(\"/tmp/\",function(err, files) {\n" +
                        "      if (err) {\n" +
                        "         return console.error(err);\n" +
                        "      }\n" +
                        "      files.forEach( function (file) {\n" +
                        "         console.log( file );\n" +
                        "      });\n" +
                        "   });\n" +
                        "});",
                "Going to read directory /tmp\n" +
                        "ccmzx99o.out\n" +
                        "ccyCSbkF.out\n" +
                        "employee.ser\n" +
                        "hsperfdata_apache\n" +
                        "test.txt"
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        list.add(l8);
        list.add(l9);
        list.add(l10);
        list.add(l11);
        list.add(l12);
        list.add(l13);
        list.add(l14);
        list.add(l15);
        list.add(l16);
        list.add(l17);
        return list;
    }
    //NodeJs Global Objects
    private static List<LearnDetailsModel> NodeJsGlobalObjects(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is Global Objects?",
                "Node.js global objects are global in nature and they are available in all modules. We do not need to include these objects in our application, rather we can use them directly. These objects are modules, functions, strings and object itself as explained below.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "__filename",
                "The __filename represents the filename of the code being executed. This is the resolved absolute path of this code file. For a main program, this is not necessarily the same filename used in the command line. The value inside a module is the path to that module file.\n" +
                        "\n" +
                        "Example\n" +
                        "Create a js file named main.js with the following code −" +
                        "\n\n" +
                        "Now run the main.js to see the result −\n" +
                        "\n" +
                        "$ node main.js\n" +
                        "Based on the location of your program, it will print the main file name as follows −\n" +
                        "\n" +
                        "/web/com/1427091028_21099/main.js",
                "// Let's try to print the value of __filename\n" +
                        "\n" +
                        "console.log( __filename );",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "__dirname",
                "The __dirname represents the name of the directory that the currently executing script resides in.\n" +
                        "\n" +
                        "Example\n" +
                        "Create a js file named main.js with the following code −" +
                        "\n\n" +
                        "Now run the main.js to see the result −\n" +
                        "\n" +
                        "$ node main.js\n" +
                        "Based on the location of your program, it will print current directory name as follows −\n" +
                        "\n" +
                        "/web/com/1427091028_21099",
                "// Let's try to print the value of __dirname\n" +
                        "\n" +
                        "console.log( __dirname );",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "setTimeout(cb, ms)",
                "The setTimeout(cb, ms) global function is used to run callback cb after at least ms milliseconds. The actual delay depends on external factors like OS timer granularity and system load. A timer cannot span more than 24.8 days.\n" +
                        "\n" +
                        "This function returns an opaque value that represents the timer which can be used to clear the timer.\n" +
                        "\n" +
                        "Example\n" +
                        "Create a js file named main.js with the following code −" +
                        "\n\n" +
                        "Now run the main.js to see the result −\n" +
                        "\n" +
                        "$ node main.js",
                "function printHello() {\n" +
                        "   console.log( \"Hello, World!\");\n" +
                        "}\n" +
                        "\n" +
                        "// Now call above function after 2 seconds\n" +
                        "setTimeout(printHello, 2000);",
                "Hello, World!"
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "clearTimeout(t)",
                "The clearTimeout(t) global function is used to stop a timer that was previously created with setTimeout(). Here t is the timer returned by the setTimeout() function.\n" +
                        "\n" +
                        "Example\n" +
                        "Create a js file named main.js with the following code −" +
                        "\n\n" +
                        "Now run the main.js to see the result −\n" +
                        "\n" +
                        "$ node main.js",
                "function printHello() {\n" +
                        "   console.log( \"Hello, World!\");\n" +
                        "}\n" +
                        "\n" +
                        "// Now call above function after 2 seconds\n" +
                        "var t = setTimeout(printHello, 2000);\n" +
                        "\n" +
                        "// Now clear the timer\n" +
                        "clearTimeout(t);",
                "Verify the output where you will not find anything printed."
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "setInterval(cb, ms)",
                "The setInterval(cb, ms) global function is used to run callback cb repeatedly after at least ms milliseconds. The actual delay depends on external factors like OS timer granularity and system load. A timer cannot span more than 24.8 days.\n" +
                        "\n" +
                        "This function returns an opaque value that represents the timer which can be used to clear the timer using the function clearInterval(t).\n" +
                        "\n" +
                        "Example\n" +
                        "Create a js file named main.js with the following code −" +
                        "\n\n" +
                        "Now run the main.js to see the result −\n" +
                        "\n" +
                        "$ node main.js",
                "function printHello() {\n" +
                        "   console.log( \"Hello, World!\");\n" +
                        "}\n" +
                        "\n" +
                        "// Now call above function after 2 seconds\n" +
                        "setInterval(printHello, 2000);",
                "The above program will execute printHello() after every 2 second. Due to system limitation."
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Global Objects",
                "The following table provides a list of other objects which we use frequently in our applications. For a more detail, you can refer to the official documentation.",
                "1. Console\n" +
                        "Used to print information on stdout and stderr.\n" +
                        "\n" +
                        "2. Process\n" +
                        "Used to get information on current process. Provides multiple events related to process activities.",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        return list;
    }
    //NodeJs Web Module
    private static List<LearnDetailsModel> NodeJsWebModule(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is a Web Server?",
                "A Web Server is a software application which handles HTTP requests sent by the HTTP client, like web browsers, and returns web pages in response to the clients. Web servers usually deliver html documents along with images, style sheets, and scripts.\n" +
                        "\n" +
                        "Most of the web servers support server-side scripts, using scripting languages or redirecting the task to an application server which retrieves data from a database and performs complex logic and then sends a result to the HTTP client through the Web server.\n" +
                        "\n" +
                        "Apache web server is one of the most commonly used web servers. It is an open source project.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Web Application Architecture",
                "A Web application is usually divided into four layers −" +
                        "\n\n" +
                        "Client − This layer consists of web browsers, mobile browsers or applications which can make HTTP requests to the web server.\n" +
                        "\n" +
                        "Server − This layer has the Web server which can intercept the requests made by the clients and pass them the response.\n" +
                        "\n" +
                        "Business − This layer contains the application server which is utilized by the web server to do the required processing. This layer interacts with the data layer via the database or some external programs.\n" +
                        "\n" +
                        "Data − This layer contains the databases or any other source of data.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Creating a Web Server using Node",
                "Node.js provides an http module which can be used to create an HTTP client of a server. Following is the bare minimum structure of the HTTP server which listens at 8081 port.\n" +
                        "\n" +
                        "Create a js file named server.js −" +
                        "\n\n\n" +
                        "Next let's create the following html file named index.htm in the same directory where you created server.js.\n" +
                        "\n" +
                        "File: index.htm\n" +
                        "\n" +
                        "<html>\n" +
                        "   <head>\n" +
                        "      <title>Sample Page</title>\n" +
                        "   </head>\n" +
                        "   \n" +
                        "   <body>\n" +
                        "      Hello World!\n" +
                        "   </body>\n" +
                        "</html>\n" +
                        "Now let us run the server.js to see the result −\n" +
                        "\n" +
                        "$ node server.js",
                "var http = require('http');\n" +
                        "var fs = require('fs');\n" +
                        "var url = require('url');\n" +
                        "\n" +
                        "// Create a server\n" +
                        "http.createServer( function (request, response) {  \n" +
                        "   // Parse the request containing file name\n" +
                        "   var pathname = url.parse(request.url).pathname;\n" +
                        "   \n" +
                        "   // Print the name of the file for which request is made.\n" +
                        "   console.log(\"Request for \" + pathname + \" received.\");\n" +
                        "   \n" +
                        "   // Read the requested file content from file system\n" +
                        "   fs.readFile(pathname.substr(1), function (err, data) {\n" +
                        "      if (err) {\n" +
                        "         console.log(err);\n" +
                        "         \n" +
                        "         // HTTP Status: 404 : NOT FOUND\n" +
                        "         // Content Type: text/plain\n" +
                        "         response.writeHead(404, {'Content-Type': 'text/html'});\n" +
                        "      } else {\t\n" +
                        "         //Page found\t  \n" +
                        "         // HTTP Status: 200 : OK\n" +
                        "         // Content Type: text/plain\n" +
                        "         response.writeHead(200, {'Content-Type': 'text/html'});\t\n" +
                        "         \n" +
                        "         // Write the content of the file to response body\n" +
                        "         response.write(data.toString());\t\t\n" +
                        "      }\n" +
                        "      \n" +
                        "      // Send the response body \n" +
                        "      response.end();\n" +
                        "   });   \n" +
                        "}).listen(8081);\n" +
                        "\n" +
                        "// Console will print the message\n" +
                        "console.log('Server running at http://127.0.0.1:8081/');",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Creating Web client using Node",
                "A web client can be created using http module. Let's check the following example.\n" +
                        "\n" +
                        "Create a js file named client.js −" +
                        "\n\n\n" +
                        "Now run the client.js from a different command terminal other than server.js to see the result −\n" +
                        "\n" +
                        "$ node client.js",
                "var http = require('http');\n" +
                        "\n" +
                        "// Options to be used by request \n" +
                        "var options = {\n" +
                        "   host: 'localhost',\n" +
                        "   port: '8081',\n" +
                        "   path: '/index.htm'  \n" +
                        "};\n" +
                        "\n" +
                        "// Callback function is used to deal with response\n" +
                        "var callback = function(response) {\n" +
                        "   // Continuously update stream with data\n" +
                        "   var body = '';\n" +
                        "   response.on('data', function(data) {\n" +
                        "      body += data;\n" +
                        "   });\n" +
                        "   \n" +
                        "   response.on('end', function() {\n" +
                        "      // Data received completely.\n" +
                        "      console.log(body);\n" +
                        "   });\n" +
                        "}\n" +
                        "// Make a request to the server\n" +
                        "var req = http.request(options, callback);\n" +
                        "req.end();",
                "Server running at http://127.0.0.1:8081/\n" +
                        "Request for /index.htm received."
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        return list;
    }
    //jQuery
    //jQuery Introduction
    private static List<LearnDetailsModel> jQueryIntroduction(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is jQuery?",
                "jQuery is a fast and concise JavaScript Library created by John Resig in 2006 with a nice motto: Write less, do more. jQuery simplifies HTML document traversing, event handling, animating, and Ajax interactions for rapid web development. jQuery is a JavaScript toolkit designed to simplify various tasks by writing less code. Here is the list of important core features supported by jQuery −\n" +
                        "\n" +
                        "DOM manipulation − The jQuery made it easy to select DOM elements, negotiate them and modifying their content by using cross-browser open source selector engine called Sizzle.\n" +
                        "\n" +
                        "Event handling − The jQuery offers an elegant way to capture a wide variety of events, such as a user clicking on a link, without the need to clutter the HTML code itself with event handlers.\n" +
                        "\n" +
                        "AJAX Support − The jQuery helps you a lot to develop a responsive and feature rich site using AJAX technology.\n" +
                        "\n" +
                        "Animations − The jQuery comes with plenty of built-in animation effects which you can use in your websites.\n" +
                        "\n" +
                        "Lightweight − The jQuery is very lightweight library - about 19KB in size (Minified and gzipped).\n" +
                        "\n" +
                        "Cross Browser Support − The jQuery has cross-browser support, and works well in IE 6.0+, FF 2.0+, Safari 3.0+, Chrome and Opera 9.0+\n" +
                        "\n" +
                        "Latest Technology − The jQuery supports CSS3 selectors and basic XPath syntax.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "How to use jQuery?",
                "There are two ways to use jQuery.\n" +
                        "\n" +
                        "Local Installation − You can download jQuery library on your local machine and include it in your HTML code.\n" +
                        "\n" +
                        "CDN Based Version − You can include jQuery library into your HTML code directly from Content Delivery Network (CDN).",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Local Installation",
                "Go to the https://jquery.com/download/ to download the latest version available.\n" +
                        "\n" +
                        "Now put downloaded jquery-2.1.3.min.js file in a directory of your website, e.g. /jquery.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Example",
                "Now you can include jquery library in your HTML file as follows −",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The jQuery Example</title>\n" +
                        "      <script type = \"text/javascript\" src = \"/jquery/jquery-2.1.3.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            document.write(\"Hello, World!\");\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <h1>Hello</h1>\n" +
                        "   </body>\n" +
                        "</html>",
                "Hello, World!"
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "CDN Based Version",
                "You can include jQuery library into your HTML code directly from Content Delivery Network (CDN). Google and Microsoft provides content deliver for the latest version.\n" +
                        "\n" +
                        "We are using Google CDN version of the library throughout this tutorial.\n" +
                        "Example\n" +
                        "Now let us rewrite above example using jQuery library from Google CDN.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The jQuery Example</title>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            document.write(\"Hello, World!\");\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <h1>Hello</h1>\n" +
                        "   </body>\n" +
                        "</html>",
                "Hello, World!"
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "How to Call a jQuery Library Functions?",
                "As almost everything, we do when using jQuery reads or manipulates the document object model (DOM), we need to make sure that we start adding events etc. as soon as the DOM is ready.\n" +
                        "\n" +
                        "If you want an event to work on your page, you should call it inside the $(document).ready() function. Everything inside it will load as soon as the DOM is loaded and before the page contents are loaded.\n" +
                        "\n" +
                        "To do this, we register a ready event for the document as follows −\n" +
                        "\n" +
                        "$(document).ready(function() {\n" +
                        "   // do stuff when DOM is ready\n" +
                        "});\n" +
                        "To call upon any jQuery library function, use HTML script tags as shown below −",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The jQuery Example</title>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\n" +
                        "      <script type = \"text/javascript\" language = \"javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            $(\"div\").click(function() {alert(\"Hello, world!\");});\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div id = \"mydiv\">\n" +
                        "         Click on this to see a dialogue box.\n" +
                        "      </div>\n" +
                        "   </body>\n" +
                        "</html>",
                "Hello, world!"
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "How to Use Custom Scripts?",
                "It is better to write our custom code in the custom JavaScript file : custom.js, as follows −\n" +
                        "\n" +
                        "/* Filename: custom.js */\n" +
                        "$(document).ready(function() {\n" +
                        "\n" +
                        "   $(\"div\").click(function() {\n" +
                        "      alert(\"Hello, world!\");\n" +
                        "   });\n" +
                        "});\n" +
                        "Now we can include custom.js file in our HTML file as follows −",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The jQuery Example</title>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" src = \"/jquery/custom.js\">\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div id = \"mydiv\">\n" +
                        "         Click on this to see a dialogue box.\n" +
                        "      </div>\n" +
                        "   </body>\n" +
                        "</html>",
                "Hello, world!"
        );
        final LearnDetailsModel l8 = new LearnDetailsModel(
                "Using Multiple Libraries",
                "You can use multiple libraries all together without conflicting each others. For example, you can use jQuery and MooTool javascript libraries together. You can check jQuery noConflict Method for more detail.",
                "",
                ""
        );
        final LearnDetailsModel l9 = new LearnDetailsModel(
                "What is Next ?",
                "Do not worry too much if you did not understand above examples. You are going to grasp them very soon in subsequent chapters.\n" +
                        "\n" +
                        "Next chapter would try to cover few basic concepts which are coming from conventional JavaScript.",
                "",
                ""
        );
        final LearnDetailsModel l10 = new LearnDetailsModel(
                "Audience",
                "This tutorial is designed for software programmers who wants to learn the basics of jQuery and its programming concepts in simple and easy ways. This tutorial will give you enough understanding on components of jQuery with suitable examples.",
                "",
                ""
        );
        final LearnDetailsModel l11 = new LearnDetailsModel(
                "Prerequisites",
                "Before proceeding with this tutorial, you should have a basic understanding of HTML, CSS, JavaScript, Document Object Model (DOM) and any text editor. As we are going to develop web based application using jQuery, it will be good if you have understanding on how internet and web based applications work.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        list.add(l8);
        list.add(l9);
        list.add(l10);
        list.add(l11);
        return list;
    }
    //jQuery Basics
    private static List<LearnDetailsModel> jQueryBasics(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Basics",
                "jQuery is a framework built using JavaScript capabilities. So, you can use all the functions and other capabilities available in JavaScript. This chapter would explain most basic concepts but frequently used in jQuery.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "String",
                "A string in JavaScript is an immutable object that contains none, one or many characters. Following are the valid examples of a JavaScript String −",
                "\"This is JavaScript String\"\n" +
                        "'This is JavaScript String'\n" +
                        "'This is \"really\" a JavaScript String'\n" +
                        "\"This is 'really' a JavaScript String\"",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Numbers",
                "Numbers in JavaScript are double-precision 64-bit format IEEE 754 values. They are immutable, just as strings. Following are the valid examples of a JavaScript Numbers −",
                "5350\n" +
                        "120.27\n" +
                        "0.26",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Boolean",
                "A boolean in JavaScript can be either true or false. If a number is zero, it defaults to false. If an empty string defaults to false.\n" +
                        "\n" +
                        "Following are the valid examples of a JavaScript Boolean −",
                "true      // true\n" +
                        "false     // false\n" +
                        "0         // false\n" +
                        "1         // true\n" +
                        "\"\"        // false\n" +
                        "\"hello\"   // true",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Objects",
                "JavaScript supports Object concept very well. You can create an object using the object literal as follows −\n" +
                        "\n" +
                        "var emp = {\n" +
                        "   name: \"Zara\",\n" +
                        "   age: 10\n" +
                        "};\n\n" +
                        "You can write and read properties of an object using the dot notation as follows −",
                "// Getting object properties\n" +
                        "emp.name  // ==> Zara\n" +
                        "emp.age   // ==> 10\n" +
                        "\n" +
                        "// Setting object properties\n" +
                        "emp.name = \"Daisy\"  // <== Daisy\n" +
                        "emp.age  =  20      // <== 20",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Arrays",
                "You can define arrays using the array literal as follows −\n" +
                        "\n" +
                        "var x = [];\n" +
                        "var y = [1, 2, 3, 4, 5];" +
                        "\n\n" +
                        "An array has a length property that is useful for iteration −",
                "var x = [1, 2, 3, 4, 5];\n" +
                        "\n" +
                        "for (var i = 0; i < x.length; i++) {\n" +
                        "   // Do something with x[i]\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Functions",
                "A function in JavaScript can be either named or anonymous. A named function can be defined using function keyword as follows −\n" +
                        "\n" +
                        "function named(){\n" +
                        "   // do some stuff here\n" +
                        "}\n\n" +
                        "An anonymous function can be defined in similar way as a normal function but it would not have any name.\n" +
                        "\n" +
                        "A anonymous function can be assigned to a variable or passed to a method as shown below.\n" +
                        "\n" +
                        "var handler = function (){\n" +
                        "   // do some stuff here\n" +
                        "}\n\n" +
                        "JQuery makes a use of anonymous functions very frequently as follows −\n" +
                        "\n" +
                        "$(document).ready(function(){\n" +
                        "   // do some stuff here\n" +
                        "});",
                "",
                ""
        );
        final LearnDetailsModel l8 = new LearnDetailsModel(
                "Arguments",
                "JavaScript variable arguments is a kind of array which has length property. Following example explains it very well −\n" +
                        "\n" +
                        "function func(x){\n" +
                        "   console.log(typeof x, arguments.length);\n" +
                        "}\n" +
                        "\n" +
                        "func();                //==> \"undefined\", 0\n" +
                        "func(1);               //==> \"number\", 1\n" +
                        "func(\"1\", \"2\", \"3\");   //==> \"string\", 3\n\n" +
                        "The arguments object also has a callee property, which refers to the function you're inside of. For example −",
                "function func() {\n" +
                        "   return arguments.callee; \n" +
                        "}\n" +
                        "\n" +
                        "func();// ==> func",
                ""
        );
        final LearnDetailsModel l9 = new LearnDetailsModel(
                "Context",
                "JavaScript famous keyword this always refers to the current context. Within a function this context can change, depending on how the function is called −\n" +
                        "\n" +
                        "$(document).ready(function() {\n" +
                        "   // this refers to window.document\n" +
                        "});\n" +
                        "\n" +
                        "$(\"div\").click(function() {\n" +
                        "   // this refers to a div DOM element\n" +
                        "});\n\n" +
                        "You can specify the context for a function call using the function-built-in methods call() and apply() methods.\n" +
                        "\n" +
                        "The difference between them is how they pass arguments. Call passes all arguments through as arguments to the function, while apply accepts an array as the arguments.",
                "function scope() {\n" +
                        "   console.log(this, arguments.length);\n" +
                        "}\n" +
                        "\n" +
                        "scope() // window, 0\n" +
                        "scope.call(\"foobar\", [1,2]);  //==> \"foobar\", 1\n" +
                        "scope.apply(\"foobar\", [1,2]); //==> \"foobar\", 2",
                ""
        );
        final LearnDetailsModel l10 = new LearnDetailsModel(
                "Scope",
                "The scope of a variable is the region of your program in which it is defined. JavaScript variable will have only two scopes.\n" +
                        "\n" +
                        "Global Variables − A global variable has global scope which means it is defined everywhere in your JavaScript code.\n" +
                        "\n" +
                        "Local Variables − A local variable will be visible only within a function where it is defined. Function parameters are always local to that function.\n" +
                        "\n" +
                        "Within the body of a function, a local variable takes precedence over a global variable with the same name −",
                "var myVar = \"global\";     // ==> Declare a global variable\n" +
                        "\n" +
                        "function ( ) {\n" +
                        "   var myVar = \"local\";   // ==> Declare a local variable\n" +
                        "   document.write(myVar); // ==> local\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l11 = new LearnDetailsModel(
                "Callback",
                "A callback is a plain JavaScript function passed to some method as an argument or option. Some callbacks are just events, called to give the user a chance to react when a certain state is triggered.\n" +
                        "\n" +
                        "jQuery's event system uses such callbacks everywhere for example −\n" +
                        "\n" +
                        "$(\"body\").click(function(event) {\n" +
                        "   console.log(\"clicked: \" + event.target);\n" +
                        "});\n" +
                        "Most callbacks provide arguments and a context. In the event-handler example, the callback is called with one argument, an Event.\n" +
                        "\n" +
                        "Some callbacks are required to return something, others make that return value optional. To prevent a form submission, a submit event handler can return false as follows −",
                "$(\"#myform\").submit(function() {\n" +
                        "   return false;\n" +
                        "});",
                ""
        );
        final LearnDetailsModel l12 = new LearnDetailsModel(
                "Closures",
                "Closures are created whenever a variable that is defined outside the current scope is accessed from within some inner scope.\n" +
                        "\n" +
                        "Following example shows how the variable counter is visible within the create, increment, and print functions, but not outside of them −",
                "function create() {\n" +
                        "   var counter = 0;\n" +
                        "\t\n" +
                        "   return {\n" +
                        "      increment: function() {\n" +
                        "         counter++;\n" +
                        "      },\n" +
                        "\t   print: function() {\n" +
                        "         console.log(counter);\n" +
                        "      }\n" +
                        "   }\n" +
                        "}\n" +
                        "\n" +
                        "var c = create();\n" +
                        "c.increment();\n" +
                        "c.print();     // ==> 1",
                ""
        );final LearnDetailsModel l13 = new LearnDetailsModel(
                "Proxy Pattern",
                "A proxy is an object that can be used to control access to another object. It implements the same interface as this other object and passes on any method invocations to it. This other object is often called the real subject.\n" +
                        "\n" +
                        "A proxy can be instantiated in place of this real subject and allow it to be accessed remotely. We can saves jQuery's setArray method in a closure and overwrites it as follows −",
                "(function() {\n" +
                        "   // log all calls to setArray\n" +
                        "   var proxied = jQuery.fn.setArray;\n" +
                        "\n" +
                        "   jQuery.fn.setArray = function() {\n" +
                        "      console.log(this, arguments);\n" +
                        "      return proxied.apply(this, arguments);\n" +
                        "   };\n" +
                        "\t\n" +
                        "})();",
                ""
        );final LearnDetailsModel l14 = new LearnDetailsModel(
                "Built-in Functions",
                "JavaScript comes along with a useful set of built-in functions. These methods can be used to manipulate Strings, Numbers and Dates.\n" +
                        "\n" +
                        "Following are important JavaScript functions −" +
                        "\n\n" +
                        "1. charAt()\n" +
                        "\n" +
                        "Returns the character at the specified index.\n" +
                        "\n" +
                        "2. concat()\n" +
                        "\n" +
                        "Combines the text of two strings and returns a new string.\n" +
                        "\n" +
                        "3. forEach()\n" +
                        "\n" +
                        "Calls a function for each element in the array.\n" +
                        "\n" +
                        "4. indexOf()\n" +
                        "\n" +
                        "Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found.\n" +
                        "\n" +
                        "5. length()\n" +
                        "\n" +
                        "Returns the length of the string.\n" +
                        "\n" +
                        "6. pop()\n" +
                        "\n" +
                        "Removes the last element from an array and returns that element.\n" +
                        "\n" +
                        "7. push()\n" +
                        "\n" +
                        "Adds one or more elements to the end of an array and returns the new length of the array.\n" +
                        "\n" +
                        "8. reverse()\n" +
                        "\n" +
                        "Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first.\n" +
                        "\n" +
                        "9. sort()\n" +
                        "\n" +
                        "Sorts the elements of an array.\n" +
                        "\n" +
                        "10. substr()\n" +
                        "\n" +
                        "Returns the characters in a string beginning at the specified location through the specified number of characters.\n" +
                        "\n" +
                        "11. toLowerCase()\n" +
                        "\n" +
                        "Returns the calling string value converted to lower case.\n" +
                        "\n" +
                        "12. toString()\n" +
                        "\n" +
                        "Returns the string representation of the number's value.\n" +
                        "\n" +
                        "13. toUpperCase()\n" +
                        "\n" +
                        "Returns the calling string value converted to uppercase.",
                "",
                ""
        );final LearnDetailsModel l15 = new LearnDetailsModel(
                "The Document Object Model",
                "The Document Object Model is a tree structure of various elements of HTML as follows −" +
                        "\n\n" +
                        "Following are the important points about the above tree structure −\n" +
                        "\n" +
                        "The <html> is the ancestor of all the other elements; in other words, all the other elements are descendants of <html>.\n" +
                        "\n" +
                        "The <head> and <body> elements are not only descendants, but children of <html>, as well.\n" +
                        "\n" +
                        "Likewise, in addition to being the ancestor of <head> and <body>, <html> is also their parent.\n" +
                        "\n" +
                        "The <p> elements are children (and descendants) of <div>, descendants of <body> and <html>, and siblings of each other <p> elements.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        list.add(l8);
        list.add(l9);
        list.add(l10);
        list.add(l11);
        list.add(l12);
        list.add(l13);
        list.add(l14);
        list.add(l15);

        return list;
    }
    //jQuery Selectors
    private static List<LearnDetailsModel> jQuerySelectors(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Selectors",
                "The jQuery library harnesses the power of Cascading Style Sheets (CSS) selectors to let us quickly and easily access elements or groups of elements in the Document Object Model (DOM).\n" +
                        "\n" +
                        "A jQuery Selector is a function which makes use of expressions to find out matching elements from a DOM based on the given criteria. Simply you can say, selectors are used to select one or more HTML elements using jQuery. Once an element is selected then we can perform various operations on that selected element.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "The $() factory function",
                "jQuery selectors start with the dollar sign and parentheses − $(). The factory function $() makes use of following three building blocks while selecting elements in a given document −" +
                        "\n\n" +
                        "All the bellow items can be used either on their own or in combination with other selectors. All the jQuery selectors are based on the same principle except some tweaking.\n" +
                        "\n" +
                        "NOTE − The factory function $() is a synonym of jQuery() function. So in case you are using any other JavaScript library where $ sign is conflicting with some thing else then you can replace $ sign by jQuery name and you can use function jQuery() instead of $()." +
                        "\n\n" +
                        "1. Tag Name\n" +
                        "\n" +
                        "Represents a tag name available in the DOM. For example $('p') selects all paragraphs <p> in the document.\n" +
                        "\n" +
                        "2. Tag ID\n" +
                        "\n" +
                        "Represents a tag available with the given ID in the DOM. For example $('#some-id') selects the single element in the document that has an ID of some-id.\n" +
                        "\n" +
                        "3. Tag Class\n" +
                        "\n" +
                        "Represents a tag available with the given class in the DOM. For example $('.some-class') selects all elements in the document that have a class of some-class.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The jQuery Example</title>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\n" +
                        "      <script type = \"text/javascript\" language = \"javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            $(\"p\").css(\"background-color\", \"yellow\");\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div>\n" +
                        "         <p class = \"myclass\">This is a paragraph.</p>\n" +
                        "         <p id = \"myid\">This is second paragraph.</p>\n" +
                        "         <p>This is third paragraph.</p>\n" +
                        "      </div>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "How to Use Selectors?",
                "The selectors are very useful and would be required at every step while using jQuery. They get the exact element that you want from your HTML document.\n" +
                        "\n" +
                        "Following table lists down few basic selectors and explains them with examples." +
                        "\n\n" +
                        "1(Name)\n" +
                        "Selects all elements which match with the given element Name.\n" +
                        "\n" +
                        "2(#ID)\n" +
                        "Selects a single element which matches with the given ID.\n" +
                        "\n" +
                        "3(.Class)\n" +
                        "Selects all elements which match with the given Class.\n" +
                        "\n" +
                        "4(Universal (*))\n" +
                        "Selects all elements available in a DOM.\n" +
                        "\n" +
                        "5(Multiple Elements E, F, G)\n" +
                        "Selects the combined results of all the specified selectors E, F or G.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Selectors Examples",
                "Similar to previous syntax and examples, following examples would give you understanding on using different type of other useful selectors −\n" +
                        "\n" +
                        "Here, you have different type of other useful selectors −\n" +
                        "You can use all the above selectors with any HTML/XML element in generic way. For example if selector $(\"li:first\") works for <li> element then $(\"p:first\") would also work for <p> element.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        return list;
    }
    //jQuery Attributes
    private static List<LearnDetailsModel> jQueryAttributes(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Attributes",
                "Some of the most basic components we can manipulate when it comes to DOM elements are the properties and attributes assigned to those elements.\n" +
                        "\n" +
                        "Most of these attributes are available through JavaScript as DOM node properties. Some of the more common properties are −\n" +
                        "\n" +
                        "className\n" +
                        "tagName\n" +
                        "id\n" +
                        "href\n" +
                        "title\n" +
                        "rel\n" +
                        "src\n" +
                        "Consider the following HTML markup for an image element −" +
                        "\n\n" +
                        "Explanation:" +
                        "\n\n" +
                        "In this element's markup, the tag name is img, and the markup for id, src, alt, class, and title represents the element's attributes, each of which consists of a name and a value.\n" +
                        "\n" +
                        "jQuery gives us the means to easily manipulate an element's attributes and gives us access to the element so that we can also change its properties.",
                "<img id = \"imageid\" src = \"image.gif\" alt = \"Image\" class = \"myclass\" \n" +
                        "   title = \"This is an image\"/>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Get Attribute Value",
                "The attr() method can be used to either fetch the value of an attribute from the first element in the matched set or set attribute values onto all matched elements.\n" +
                        "\n" +
                        "Example\n" +
                        "Following is a simple example which fetches title attribute of <em> tag and set <div id = \"divid\"> value with the same value −",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The jQuery Example</title>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" language = \"javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            var title = $(\"em\").attr(\"title\");\n" +
                        "            $(\"#divid\").text(title);\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div>\n" +
                        "         <em title = \"Bold and Brave\">This is first paragraph.</em>\n" +
                        "         <p id = \"myid\">This is second paragraph.</p>\n" +
                        "         <div id = \"divid\"></div>\n" +
                        "      </div>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Set Attribute Value",
                "The attr(name, value) method can be used to set the named attribute onto all elements in the wrapped set using the passed value.\n" +
                        "\n" +
                        "Example\n" +
                        "Following is a simple example which set src attribute of an image tag to a correct location −",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The jQuery Example</title>\n" +
                        "      <base href=\"https://www.tutorialspoint.com\" />\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" language = \"javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            $(\"#myimg\").attr(\"src\", \"/jquery/images/jquery.jpg\");\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div>\n" +
                        "         <img id = \"myimg\" src = \"/images/jquery.jpg\" alt = \"Sample image\" />\n" +
                        "      </div>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Applying Styles",
                "The addClass( classes ) method can be used to apply defined style sheets onto all the matched elements. You can specify multiple classes separated by space.\n" +
                        "\n" +
                        "Example\n" +
                        "Following is a simple example which sets class attribute of a para <p> tag −",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The jQuery Example</title>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" language = \"javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            $(\"em\").addClass(\"selected\");\n" +
                        "            $(\"#myid\").addClass(\"highlight\");\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <style>\n" +
                        "         .selected { color:red; }\n" +
                        "         .highlight { background:yellow; }\n" +
                        "      </style>\t\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <em title = \"Bold and Brave\">This is first paragraph.</em>\n" +
                        "      <p id = \"myid\">This is second paragraph.</p>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Attribute Methods",
                "Following table lists down few useful methods which you can use to manipulate attributes and properties −" +
                        "\n\n" +
                        "1.attr( properties )\n" +
                        "Set a key/value object as properties to all matched elements.\n" +
                        "\n" +
                        "2.attr( key, fn )\n" +
                        "Set a single property to a computed value, on all matched elements.\n" +
                        "\n" +
                        "3.removeAttr( name )\n" +
                        "Remove an attribute from each of the matched elements.\n" +
                        "\n" +
                        "4.hasClass( class )\n" +
                        "Returns true if the specified class is present on at least one of the set of matched elements.\n" +
                        "\n" +
                        "5.removeClass( class )\n" +
                        "Removes all or the specified class(es) from the set of matched elements.\n" +
                        "\n" +
                        "6.toggleClass( class )\n" +
                        "Adds the specified class if it is not present, removes the specified class if it is present.\n" +
                        "\n" +
                        "7.html( )\n" +
                        "Get the html contents (innerHTML) of the first matched element.\n" +
                        "\n" +
                        "8.html( val )\n" +
                        "Set the html contents of every matched element.\n" +
                        "\n" +
                        "9.text( )\n" +
                        "Get the combined text contents of all matched elements.\n" +
                        "\n" +
                        "10.text( val )\n" +
                        "Set the text contents of all matched elements.\n" +
                        "\n" +
                        "11.val( )\n" +
                        "Get the input value of the first matched element.\n" +
                        "\n" +
                        "12.val( val )\n" +
                        "Set the value attribute of every matched element if it is called on <input> but if it is called on <select> with the passed <option> value then passed option would be selected, if it is called on check box or radio box then all the matching check box and radiobox would be checked.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }
    //jQuery DOM Traversing
    private static List<LearnDetailsModel> jQueryDOMTraversing(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "DOM Traversing",
                "jQuery is a very powerful tool which provides a variety of DOM traversal methods to help us select elements in a document randomly as well as in sequential method. Most of the DOM Traversal Methods do not modify the jQuery object and they are used to filter out elements from a document based on given conditions.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Find Elements by Index",
                "Consider a simple document with the following HTML content −" +
                        "\n\n" +
                        "Every list has its own index, and can be located directly by using eq(index) method as below example.\n" +
                        "\n" +
                        "Every child element starts its index from zero, thus, list item 2 would be accessed by using $(\"li\").eq(1) and so on.\n" +
                        "\n" +
                        "Example\n" +
                        "Following is a simple example which adds the color to second list item.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The JQuery Example</title>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" language = \"javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            $(\"li\").eq(2).addClass(\"selected\");\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <style>\n" +
                        "         .selected { color:red; }\n" +
                        "      </style>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div>\n" +
                        "         <ul>\n" +
                        "            <li>list item 1</li>\n" +
                        "            <li>list item 2</li>\n" +
                        "            <li>list item 3</li>\n" +
                        "            <li>list item 4</li>\n" +
                        "            <li>list item 5</li>\n" +
                        "            <li>list item 6</li>\n" +
                        "         </ul>\n" +
                        "      </div>\n" +
                        "   </body>\n" +
                        "</html>",
                "list item 1\n" +
                        "list item 2\n" +
                        "list item 3\n" +
                        "list item 4\n" +
                        "list item 5\n" +
                        "list item 6"
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Filtering out Elements",
                "The filter( selector ) method can be used to filter out all elements from the set of matched elements that do not match the specified selector(s). The selector can be written using any selector syntax.\n" +
                        "\n" +
                        "Example\n" +
                        "Following is a simple example which applies color to the lists associated with middle class −",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The JQuery Example</title>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" language = \"javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            $(\"li\").filter(\".middle\").addClass(\"selected\");\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <style>\n" +
                        "         .selected { color:red; }\n" +
                        "      </style>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div>\n" +
                        "         <ul>\n" +
                        "            <li class = \"top\">list item 1</li>\n" +
                        "            <li class = \"top\">list item 2</li>\n" +
                        "            <li class = \"middle\">list item 3</li>\n" +
                        "            <li class = \"middle\">list item 4</li>\n" +
                        "            <li class = \"bottom\">list item 5</li>\n" +
                        "            <li class = \"bottom\">list item 6</li>\n" +
                        "         </ul>\n" +
                        "      </div>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Locating Descendant Elements",
                "The find( selector ) method can be used to locate all the descendant elements of a particular type of elements. The selector can be written using any selector syntax.\n" +
                        "\n" +
                        "Example\n" +
                        "Following is an example which selects all the <span> elements available inside different <p> elements −",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The JQuery Example</title>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" language = \"javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            $(\"p\").find(\"span\").addClass(\"selected\");\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <style>\n" +
                        "         .selected { color:red; }\n" +
                        "      </style>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <p>This is 1st paragraph and <span>THIS IS RED</span></p>\n" +
                        "      <p>This is 2nd paragraph and <span>THIS IS ALSO RED</span></p>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "JQuery DOM Filter Methods",
                "Following table lists down useful methods which you can use to filter out various elements from a list of DOM elements −" +
                        "\n\n" +
                        "1.eq( index )\n" +
                        "Reduce the set of matched elements to a single element.\n" +
                        "\n" +
                        "2.filter( selector )\n" +
                        "Removes all elements from the set of matched elements that do not match the specified selector(s).\n" +
                        "\n" +
                        "3.filter( fn )\n" +
                        "Removes all elements from the set of matched elements that do not match the specified function.\n" +
                        "\n" +
                        "4.is( selector )\n" +
                        "Checks the current selection against an expression and returns true, if at least one element of the selection fits the given selector.\n" +
                        "\n" +
                        "5.map( callback )\n" +
                        "Translate a set of elements in the jQuery object into another set of values in a jQuery array (which may, or may not contain elements).\n" +
                        "\n" +
                        "6.not( selector )\n" +
                        "Removes elements matching the specified selector from the set of matched elements.\n" +
                        "\n" +
                        "7.slice( start, [end] )\n" +
                        "Selects a subset of the matched elements.",
                "",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "JQuery DOM Traversing Methods",
                "Following table lists down other useful methods which you can use to locate various elements in a DOM −",
                "1.add( selector )\n" +
                        "Adds more elements, matched by the given selector, to the set of matched elements.\n" +
                        "\n" +
                        "2.andSelf( )\n" +
                        "Add the previous selection to the current selection.\n" +
                        "\n" +
                        "3.children( [selector])\n" +
                        "Get a set of elements containing all of the unique immediate children of each of the matched set of elements.\n" +
                        "\n" +
                        "4.closest( selector )\n" +
                        "Get a set of elements containing the closest parent element that matches the specified selector, the starting element included.\n" +
                        "\n" +
                        "5.contents( )\n" +
                        "Find all the child nodes inside the matched elements (including text nodes), or the content document, if the element is an iframe.\n" +
                        "\n" +
                        "6.end( )\n" +
                        "Revert the most recent 'destructive' operation, changing the set of matched elements to its previous state.\n" +
                        "\n" +
                        "7.find( selector )\n" +
                        "Searches for descendant elements that match the specified selectors.\n" +
                        "\n" +
                        "8.next( [selector] )\n" +
                        "Get a set of elements containing the unique next siblings of each of the given set of elements.\n" +
                        "\n" +
                        "9.nextAll( [selector] )\n" +
                        "Find all sibling elements after the current element.\n" +
                        "\n" +
                        "10.offsetParent( )\n" +
                        "Returns a jQuery collection with the positioned parent of the first matched element.\n" +
                        "\n" +
                        "11.parent( [selector] )\n" +
                        "Get the direct parent of an element. If called on a set of elements, parent returns a set of their unique direct parent elements.\n" +
                        "\n" +
                        "12.parents( [selector] )\n" +
                        "Get a set of elements containing the unique ancestors of the matched set of elements (except for the root element).\n" +
                        "\n" +
                        "13.prev( [selector] )\n" +
                        "Get a set of elements containing the unique previous siblings of each of the matched set of elements.\n" +
                        "\n" +
                        "14.prevAll( [selector] )\n" +
                        "Find all sibling elements in front of the current element.\n" +
                        "\n" +
                        "15.siblings( [selector] )\n" +
                        "Get a set of elements containing all of the unique siblings of each of the matched set of elements.\n" +
                        "\n",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        return list;
    }
    //jQuery CSS
    private static List<LearnDetailsModel> jQueryCSS(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "CSS Selectors Methods",
                "The jQuery library supports nearly all of the selectors included in Cascading Style Sheet (CSS) specifications 1 through 3, as outlined on the World Wide Web Consortium's site.\n" +
                        "\n" +
                        "Using JQuery library developers can enhance their websites without worrying about browsers and their versions as long as the browsers have JavaScript enabled.\n" +
                        "\n" +
                        "Most of the JQuery CSS Methods do not modify the content of the jQuery object and they are used to apply CSS properties on DOM elements.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Apply CSS Properties",
                "This is very simple to apply any CSS property using JQuery method css( PropertyName, PropertyValue ).\n" +
                        "\n" +
                        "Here is the syntax for the method −\n" +
                        "\n" +
                        "selector.css( PropertyName, PropertyValue );\n" +
                        "Here you can pass PropertyName as a javascript string and based on its value, PropertyValue could be string or integer.\n" +
                        "\n" +
                        "Example\n" +
                        "Following is an example which adds font color to the second list item.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The jQuery Example</title>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" language = \"javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            $(\"li\").eq(2).css(\"color\", \"red\");\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div>\n" +
                        "         <ul>\n" +
                        "            <li>list item 1</li>\n" +
                        "            <li>list item 2</li>\n" +
                        "            <li>list item 3</li>\n" +
                        "            <li>list item 4</li>\n" +
                        "            <li>list item 5</li>\n" +
                        "            <li>list item 6</li>\n" +
                        "         </ul>\n" +
                        "      </div>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Apply Multiple CSS Properties",
                "You can apply multiple CSS properties using a single JQuery method CSS( {key1:val1, key2:val2....). You can apply as many properties as you like in a single call.\n" +
                        "\n" +
                        "Here is the syntax for the method −\n" +
                        "\n" +
                        "selector.css( {key1:val1, key2:val2....keyN:valN})\n" +
                        "Here you can pass key as property and val as its value as described above.\n" +
                        "\n" +
                        "Example\n" +
                        "Following is an example which adds font color as well as background color to the second list item.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The jQuery Example</title>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" language = \"javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            $(\"li\").eq(2).css({\"color\":\"red\", \"background-color\":\"green\"});\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div>\n" +
                        "         <ul>\n" +
                        "            <li>list item 1</li>\n" +
                        "            <li>list item 2</li>\n" +
                        "            <li>list item 3</li>\n" +
                        "            <li>list item 4</li>\n" +
                        "            <li>list item 5</li>\n" +
                        "            <li>list item 6</li>\n" +
                        "         </ul>\n" +
                        "      </div>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Setting Element Width & Height",
                "The width( val ) and height( val ) method can be used to set the width and height respectively of any element.\n" +
                        "\n" +
                        "Example\n" +
                        "Following is a simple example which sets the width of first division element where as rest of the elements have width set by style sheet",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The jQuery Example</title>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" language = \"javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            $(\"div:first\").width(100);\n" +
                        "            $(\"div:first\").css(\"background-color\", \"blue\");\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <style>\n" +
                        "         div { \n" +
                        "            width:70px; height:50px; float:left; \n" +
                        "            margin:5px; background:red; cursor:pointer; \n" +
                        "         }\n" +
                        "      </style>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div></div>\n" +
                        "      <div>d</div>\n" +
                        "      <div>d</div>\n" +
                        "      <div>d</div>\n" +
                        "      <div>d</div>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "JQuery CSS Methods",
                "Following table lists down all the methods which you can use to play with CSS properties −" +
                        "\n\n" +
                        "1.css( name )\n" +
                        "Return a style property on the first matched element.\n" +
                        "\n" +
                        "2.css( name, value )\n" +
                        "Set a single style property to a value on all matched elements.\n" +
                        "\n" +
                        "3.css( properties )\n" +
                        "Set a key/value object as style properties to all matched elements.\n" +
                        "\n" +
                        "4.height( val )\n" +
                        "Set the CSS height of every matched element.\n" +
                        "\n" +
                        "5.height( )\n" +
                        "Get the current computed, pixel, height of the first matched element.\n" +
                        "\n" +
                        "6.innerHeight( )\n" +
                        "Gets the inner height (excludes the border and includes the padding) for the first matched element.\n" +
                        "\n" +
                        "7.innerWidth( )\n" +
                        "Gets the inner width (excludes the border and includes the padding) for the first matched element.\n" +
                        "\n" +
                        "8.offset( )\n" +
                        "Get the current offset of the first matched element, in pixels, relative to the document.\n" +
                        "\n" +
                        "9.offsetParent( )\n" +
                        "Returns a jQuery collection with the positioned parent of the first matched element.\n" +
                        "\n" +
                        "10.outerHeight( [margin] )\n" +
                        "Gets the outer height (includes the border and padding by default) for the first matched element.\n" +
                        "\n" +
                        "11.outerWidth( [margin] )\n" +
                        "Get the outer width (includes the border and padding by default) for the first matched element.\n" +
                        "\n" +
                        "12.position( )\n" +
                        "Gets the top and left position of an element relative to its offset parent.\n" +
                        "\n" +
                        "13.scrollLeft( val )\n" +
                        "When a value is passed in, the scroll left offset is set to that value on all matched elements.\n" +
                        "\n" +
                        "14.scrollLeft( )\n" +
                        "Gets the scroll left offset of the first matched element.\n" +
                        "\n" +
                        "15.scrollTop( val )\n" +
                        "When a value is passed in, the scroll top offset is set to that value on all matched elements.\n" +
                        "\n" +
                        "16.scrollTop( )\n" +
                        "Gets the scroll top offset of the first matched element.\n" +
                        "\n" +
                        "17.width( val )\n" +
                        "Set the CSS width of every matched element.\n" +
                        "\n" +
                        "18.width( )\n" +
                        "Get the current computed, pixel, width of the first matched element.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }
    //jQuery DOM
    private static List<LearnDetailsModel> jQueryDOM(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "DOM Manipulation",
                "JQuery provides methods to manipulate DOM in efficient way. You do not need to write big code to modify the value of any element's attribute or to extract HTML code from a paragraph or division.\n" +
                        "\n" +
                        "JQuery provides methods such as .attr(), .html(), and .val() which act as getters, retrieving information from DOM elements for later use.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Content Manipulation",
                "The html( ) method gets the html contents (innerHTML) of the first matched element.\n" +
                        "\n" +
                        "Here is the syntax for the method −\n" +
                        "\n" +
                        "selector.html( )\n" +
                        "Example\n" +
                        "Following is an example which makes use of .html() and .text(val) methods. Here .html() retrieves HTML content from the object and then .text( val ) method sets value of the object using passed parameter −",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The jQuery Example</title>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" language = \"javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            $(\"div\").click(function () {\n" +
                        "               var content = $(this).html();\n" +
                        "               $(\"#result\").text( content );\n" +
                        "            });\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <style>\n" +
                        "         #division{ margin:10px;padding:12px; border:2px solid #666; width:60px;}\n" +
                        "      </style>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <p>Click on the square below:</p>\n" +
                        "      <span id = \"result\"> </span>\n" +
                        "\t\t\n" +
                        "      <div id = \"division\" style = \"background-color:blue;\">\n" +
                        "         This is Blue Square!!\n" +
                        "      </div>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "DOM Element Replacement",
                "You can replace a complete DOM element with the specified HTML or DOM elements. The replaceWith( content ) method serves this purpose very well.\n" +
                        "\n" +
                        "Here is the syntax for the method −\n" +
                        "\n" +
                        "selector.replaceWith( content )\n" +
                        "Here content is what you want to have instead of original element. This could be HTML or simple text.\n" +
                        "\n" +
                        "Example\n" +
                        "Following is an example which would replace division element with \"<h1>JQuery is Great </h1>\" −",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The jQuery Example</title>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" language = \"javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            $(\"div\").click(function () {\n" +
                        "               $(this).replaceWith(\"<h1>JQuery is Great</h1>\");\n" +
                        "            });\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <style>\n" +
                        "         #division{ margin:10px;padding:12px; border:2px solid #666; width:60px;}\n" +
                        "      </style>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <p>Click on the square below:</p>\n" +
                        "      <span id = \"result\"> </span>\n" +
                        "\t\t\n" +
                        "      <div id = \"division\" style = \"background-color:blue;\">\n" +
                        "         This is Blue Square!!\n" +
                        "      </div>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Removing DOM Elements",
                "There may be a situation when you would like to remove one or more DOM elements from the document. JQuery provides two methods to handle the situation.\n" +
                        "\n" +
                        "The empty( ) method remove all child nodes from the set of matched elements where as the method remove( expr ) method removes all matched elements from the DOM.\n" +
                        "\n" +
                        "Here is the syntax for the method −\n" +
                        "\n" +
                        "selector.remove( [ expr ])\n" +
                        "\n" +
                        "or \n" +
                        "\n" +
                        "selector.empty( )\n" +
                        "You can pass optional parameter expr to filter the set of elements to be removed.\n" +
                        "\n" +
                        "Example\n" +
                        "Following is an example where elements are being removed as soon as they are clicked −",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The jQuery Example</title>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" language = \"javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            $(\"div\").click(function () {\n" +
                        "               $(this).remove( );\n" +
                        "            });\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <style>\n" +
                        "         .div{ margin:10px;padding:12px; border:2px solid #666; width:60px;}\n" +
                        "      </style>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <p>Click on any square below:</p>\n" +
                        "      <span id = \"result\"> </span>\n" +
                        "\t\t\n" +
                        "      <div class = \"div\" style = \"background-color:blue;\"></div>\n" +
                        "      <div class = \"div\" style = \"background-color:green;\"></div>\n" +
                        "      <div class = \"div\" style = \"background-color:red;\"></div>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Inserting DOM Elements",
                "There may be a situation when you would like to insert new one or more DOM elements in your existing document. JQuery provides various methods to insert elements at various locations.\n" +
                        "\n" +
                        "The after( content ) method insert content after each of the matched elements where as the method before( content ) method inserts content before each of the matched elements.\n" +
                        "\n" +
                        "Here is the syntax for the method −\n" +
                        "\n" +
                        "selector.after( content )\n" +
                        "\n" +
                        "or\n" +
                        "\n" +
                        "selector.before( content )\n" +
                        "Here content is what you want to insert. This could be HTML or simple text.\n" +
                        "\n" +
                        "Example\n" +
                        "Following is an example where <div> elements are being inserted just before the clicked element −",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The jQuery Example</title>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" language = \"javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            $(\"div\").click(function () {\n" +
                        "               $(this).before('<div class=\"div\"></div>' );\n" +
                        "            });\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <style>\n" +
                        "         .div{ margin:10px;padding:12px; border:2px solid #666; width:60px;}\n" +
                        "      </style>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <p>Click on any square below:</p>\n" +
                        "      <span id = \"result\"> </span>\n" +
                        "\t\t\n" +
                        "      <div class = \"div\" style = \"background-color:blue;\"></div>\n" +
                        "      <div class = \"div\" style = \"background-color:green;\"></div>\n" +
                        "      <div class = \"div\" style = \"background-color:red;\"></div>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "DOM Manipulation Methods",
                "Following table lists down all the methods which you can use to manipulate DOM elements −" +
                        "\n\n" +
                        "1.after( content )\n" +
                        "Insert content after each of the matched elements.\n" +
                        "\n" +
                        "2.append( content )\n" +
                        "Append content to the inside of every matched element.\n" +
                        "\n" +
                        "3.appendTo( selector )\n" +
                        "Append all of the matched elements to another, specified, set of elements.\n" +
                        "\n" +
                        "4.before( content )\n" +
                        "Insert content before each of the matched elements.\n" +
                        "\n" +
                        "5.clone( bool )\n" +
                        "Clone matched DOM Elements, and all their event handlers, and select the clones.\n" +
                        "\n" +
                        "6.clone( )\n" +
                        "Clone matched DOM Elements and select the clones.\n" +
                        "\n" +
                        "7.empty( )\n" +
                        "Remove all child nodes from the set of matched elements.\n" +
                        "\n" +
                        "8.html( val )\n" +
                        "Set the html contents of every matched element.\n" +
                        "\n" +
                        "9.html( )\n" +
                        "Get the html contents (innerHTML) of the first matched element.\n" +
                        "\n" +
                        "10.insertAfter( selector )\n" +
                        "Insert all of the matched elements after another, specified, set of elements.\n" +
                        "\n" +
                        "11.insertBefore( selector )\n" +
                        "Insert all of the matched elements before another, specified, set of elements.\n" +
                        "\n" +
                        "12.prepend( content )\n" +
                        "Prepend content to the inside of every matched element.\n" +
                        "\n" +
                        "13.prependTo( selector )\n" +
                        "Prepend all of the matched elements to another, specified, set of elements.\n" +
                        "\n" +
                        "14.remove( expr )\n" +
                        "Removes all matched elements from the DOM.\n" +
                        "\n" +
                        "15.replaceAll( selector )\n" +
                        "Replaces the elements matched by the specified selector with the matched elements.\n" +
                        "\n" +
                        "16.replaceWith( content )\n" +
                        "Replaces all matched elements with the specified HTML or DOM elements.\n" +
                        "\n" +
                        "17.text( val )\n" +
                        "Set the text contents of all matched elements.\n" +
                        "\n" +
                        "18.text( )\n" +
                        "Get the combined text contents of all matched elements.\n" +
                        "\n" +
                        "19.wrap( elem )\n" +
                        "Wrap each matched element with the specified element.\n" +
                        "\n" +
                        "20.wrap( html )\n" +
                        "Wrap each matched element with the specified HTML content.\n" +
                        "\n" +
                        "21.wrapAll( elem )\n" +
                        "Wrap all the elements in the matched set into a single wrapper element.\n" +
                        "\n" +
                        "22.wrapAll( html )\n" +
                        "Wrap all the elements in the matched set into a single wrapper element.\n" +
                        "\n" +
                        "23.wrapInner( elem )\n" +
                        "Wrap the inner child contents of each matched element (including text nodes) with a DOM element.\n" +
                        "\n" +
                        "24.wrapInner( html )\n" +
                        "Wrap the inner child contents of each matched element (including text nodes) with an HTML structure.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        return list;
    }
    //jQuery Events Handling
    private static List<LearnDetailsModel> jQueryEventsHandling(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Events Handling",
                "We have the ability to create dynamic web pages by using events. Events are actions that can be detected by your Web Application.\n" +
                        "\n" +
                        "Following are the examples events −\n" +
                        "\n" +
                        "A mouse click\n" +
                        "A web page loading\n" +
                        "Taking mouse over an element\n" +
                        "Submitting an HTML form\n" +
                        "A keystroke on your keyboard, etc.\n" +
                        "When these events are triggered, you can then use a custom function to do pretty much whatever you want with the event. These custom functions call Event Handlers.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Binding Event Handlers",
                "Using the jQuery Event Model, we can establish event handlers on DOM elements with the bind() method as follows −" +
                        "\n\n" +
                        "The full syntax of the bind() command is as follows −\n" +
                        "\n" +
                        "selector.bind( eventType[, eventData], handler)\n" +
                        "Following is the description of the parameters −\n" +
                        "\n" +
                        "eventType − A string containing a JavaScript event type, such as click or submit. Refer to the next section for a complete list of event types.\n" +
                        "\n" +
                        "eventData − This is optional parameter is a map of data that will be passed to the event handler.\n" +
                        "\n" +
                        "handler − A function to execute each time the event is triggered.",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The jQuery Example</title>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" language = \"javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            $('div').bind('click', function( event ){\n" +
                        "               alert('Hi there!');\n" +
                        "            });\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <style>\n" +
                        "         .div{ margin:10px;padding:12px; border:2px solid #666; width:60px;}\n" +
                        "      </style>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <p>Click on any square below to see the result:</p>\n" +
                        "\t\t\n" +
                        "      <div class = \"div\" style = \"background-color:blue;\">ONE</div>\n" +
                        "      <div class = \"div\" style = \"background-color:green;\">TWO</div>\n" +
                        "      <div class = \"div\" style = \"background-color:red;\">THREE</div>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Removing Event Handlers",
                "Typically, once an event handler is established, it remains in effect for the remainder of the life of the page. There may be a need when you would like to remove event handler.\n" +
                        "\n" +
                        "jQuery provides the unbind() command to remove an exiting event handler. The syntax of unbind() is as follows −\n" +
                        "\n" +
                        "selector.unbind(eventType, handler)\n" +
                        "\n" +
                        "or \n" +
                        "\n" +
                        "selector.unbind(eventType)\n" +
                        "Following is the description of the parameters −\n" +
                        "\n" +
                        "eventType − A string containing a JavaScript event type, such as click or submit. Refer to the next section for a complete list of event types.\n" +
                        "\n" +
                        "handler − If provided, identifies the specific listener that's to be removed.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "The Event Object",
                "The callback function takes a single parameter; when the handler is called the JavaScript event object will be passed through it.\n" +
                        "\n" +
                        "The event object is often unnecessary and the parameter is omitted, as sufficient context is usually available when the handler is bound to know exactly what needs to be done when the handler is triggered, however there are certain attributes which you would need to be accessed.",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "The Event Methods",
                "There is a list of methods which can be called on an Event Object −" +
                        "\n\n" +
                        "1.preventDefault()\n" +
                        "Prevents the browser from executing the default action.\n" +
                        "\n" +
                        "2.isDefaultPrevented()\n" +
                        "Returns whether event.preventDefault() was ever called on this event object.\n" +
                        "\n" +
                        "3.stopPropagation()\n" +
                        "Stops the bubbling of an event to parent elements, preventing any parent handlers from being notified of the event.\n" +
                        "\n" +
                        "4.isPropagationStopped()\n" +
                        "Returns whether event.stopPropagation() was ever called on this event object.\n" +
                        "\n" +
                        "5.stopImmediatePropagation()\n" +
                        "Stops the rest of the handlers from being executed.\n" +
                        "\n" +
                        "6.isImmediatePropagationStopped()\n" +
                        "Returns whether event.stopImmediatePropagation() was ever called on this event object.",
                "",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Event Manipulation Methods",
                "Following table lists down important event-related methods −",
                "1.bind( type, [data], fn )\n" +
                        "Binds a handler to one or more events (like click) for each matched element. Can also bind custom events.\n" +
                        "\n" +
                        "2.off( events [, selector ] [, handler(eventObject) ] )\n" +
                        "This does the opposite of live, it removes a bound live event.\n" +
                        "\n" +
                        "3.hover( over, out )\n" +
                        "Simulates hovering for example moving the mouse on, and off, an object.\n" +
                        "\n" +
                        "4.on( events [, selector ] [, data ], handler )\n" +
                        "Binds a handler to an event (like click) for all current − and future − matched element. Can also bind custom events.\n" +
                        "\n" +
                        "5.one( type, [data], fn )\n" +
                        "Binds a handler to one or more events to be executed once for each matched element.\n" +
                        "\n" +
                        "6.ready( fn )\n" +
                        "Binds a function to be executed whenever the DOM is ready to be traversed and manipulated.\n" +
                        "\n" +
                        "7.trigger( event, [data] )\n" +
                        "Trigger an event on every matched element.\n" +
                        "\n" +
                        "8.triggerHandler( event, [data] )\n" +
                        "Triggers all bound event handlers on an element.\n" +
                        "\n" +
                        "9.unbind( [type], [fn] )\n" +
                        "This does the opposite of bind, it removes bound events from each of the matched elements.",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Event Helper Methods",
                "jQuery also provides a set of event helper functions which can be used either to trigger an event to bind any event types mentioned previous." +
                        "\n\n" +
                        "Trigger Methods\n" +
                        "Following is an example which would triggers the blur event on all paragraphs −\n" +
                        "\n" +
                        "$(\"p\").blur();\n" +
                        "Binding Methods\n" +
                        "Following is an example which would bind a click event on all the <div> −\n" +
                        "\n" +
                        "$(\"div\").click( function () { \n" +
                        "   // do something here\n" +
                        "});",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        return list;
    }
    //jQuery Ajax
    private static List<LearnDetailsModel> jQueryAjax(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Ajax",
                "AJAX is an acronym standing for Asynchronous JavaScript and XML and this technology helps us to load data from the server without a browser page refresh.\n" +
                        "\n" +
                        "If you are new with AJAX, I would recommend you go through our Ajax Tutorial before proceeding further.\n" +
                        "\n" +
                        "JQuery is a great tool which provides a rich set of AJAX methods to develop next generation web application.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Loading Simple Data",
                "This is very easy to load any static or dynamic data using JQuery AJAX. JQuery provides load() method to do the job −\n" +
                        "\n" +
                        "Syntax\n" +
                        "Here is the simple syntax for load() method −\n" +
                        "\n" +
                        "[selector].load( URL, [data], [callback] );\n" +
                        "Here is the description of all the parameters −\n" +
                        "\n" +
                        "URL − The URL of the server-side resource to which the request is sent. It could be a CGI, ASP, JSP, or PHP script which generates data dynamically or out of a database.\n" +
                        "\n" +
                        "data − This optional parameter represents an object whose properties are serialized into properly encoded parameters to be passed to the request. If specified, the request is made using the POST method. If omitted, the GET method is used.\n" +
                        "\n" +
                        "callback − A callback function invoked after the response data has been loaded into the elements of the matched set. The first parameter passed to this function is the response text received from the server and second parameter is the status code.\n" +
                        "\n" +
                        "Example\n" +
                        "Consider the following HTML file with a small JQuery coding −",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The jQuery Example</title>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" language = \"javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            $(\"#driver\").click(function(event){\n" +
                        "               $('#stage').load('/jquery/result.html');\n" +
                        "            });\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <p>Click on the button to load /jquery/result.html file −</p>\n" +
                        "\t\t\n" +
                        "      <div id = \"stage\" style = \"background-color:cc0;\">\n" +
                        "         STAGE\n" +
                        "      </div>\n" +
                        "\t\t\n" +
                        "      <input type = \"button\" id = \"driver\" value = \"Load Data\" />\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Getting JSON Data",
                "There would be a situation when server would return JSON string against your request. JQuery utility function getJSON() parses the returned JSON string and makes the resulting string available to the callback function as first parameter to take further action.\n" +
                        "\n" +
                        "Syntax\n" +
                        "Here is the simple syntax for getJSON() method −\n" +
                        "\n" +
                        "[selector].getJSON( URL, [data], [callback] );\n" +
                        "Here is the description of all the parameters −\n" +
                        "\n" +
                        "URL − The URL of the server-side resource contacted via the GET method.\n" +
                        "\n" +
                        "data − An object whose properties serve as the name/value pairs used to construct a query string to be appended to the URL, or a preformatted and encoded query string.\n" +
                        "\n" +
                        "callback − A function invoked when the request completes. The data value resulting from digesting the response body as a JSON string is passed as the first parameter to this callback, and the status as the second.\n" +
                        "\n" +
                        "Example\n" +
                        "Consider the following HTML file with a small JQuery coding −" +
                        "\n\n\n" +
                        "Here JQuery utility method getJSON() initiates an Ajax request to the specified URL result.json file. After loading this file, all the content would be passed to the callback function which finally would be populated inside <div> tagged with ID stage. Assuming, our result.json file has following json formatted content −\n" +
                        "\n" +
                        "{\n" +
                        "   \"name\": \"Anne Moore\",\n" +
                        "   \"age\" : \"21\",\n" +
                        "   \"sex\": \"female\"\n" +
                        "}",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The jQuery Example</title>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" language = \"javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            $(\"#driver\").click(function(event){\n" +
                        "\t\t\t\t\n" +
                        "               $.getJSON('/jquery/result.json', function(jd) {\n" +
                        "                  $('#stage').html('<p> Name: ' + jd.name + '</p>');\n" +
                        "                  $('#stage').append('<p>Age : ' + jd.age+ '</p>');\n" +
                        "                  $('#stage').append('<p> Sex: ' + jd.sex+ '</p>');\n" +
                        "               });\n" +
                        "\t\t\t\t\t\n" +
                        "            });\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <p>Click on the button to load result.json file −</p>\n" +
                        "\t\t\n" +
                        "      <div id = \"stage\" style = \"background-color:#eee;\">\n" +
                        "         STAGE\n" +
                        "      </div>\n" +
                        "\t\t\n" +
                        "      <input type = \"button\" id = \"driver\" value = \"Load Data\" />\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Passing Data to the Server",
                "Many times you collect input from the user and you pass that input to the server for further processing. JQuery AJAX made it easy enough to pass collected data to the server using data parameter of any available Ajax method.\n" +
                        "\n" +
                        "Example\n" +
                        "This example demonstrate how can pass user input to a web server script which would send the same result back and we would print it −" +
                        "\n\n\n" +
                        "Here is the code written in result.php script −\n" +
                        "\n" +
                        "<?php\n" +
                        "   if( $_REQUEST[\"name\"] ){\n" +
                        "      $name = $_REQUEST['name'];\n" +
                        "      echo \"Welcome \". $name;\n" +
                        "   }\n" +
                        "?> ",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The jQuery Example</title>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" language = \"javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            $(\"#driver\").click(function(event){\n" +
                        "               var name = $(\"#name\").val();\n" +
                        "               $(\"#stage\").load('/jquery/result.php', {\"name\":name} );\n" +
                        "            });\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <p>Enter your name and click on the button:</p>\n" +
                        "      <input type = \"input\" id = \"name\" size = \"40\" /><br />\n" +
                        "\t\t\n" +
                        "      <div id = \"stage\" style = \"background-color:cc0;\">\n" +
                        "         STAGE\n" +
                        "      </div>\n" +
                        "\t\t\n" +
                        "      <input type = \"button\" id = \"driver\" value = \"Show Result\" />\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "JQuery AJAX Methods",
                "You have seen basic concept of AJAX using JQuery. Following table lists down all important JQuery AJAX methods which you can use based your programming need −" +
                        "\n\n" +
                        "1.jQuery.ajax( options )\n" +
                        "Load a remote page using an HTTP request.\n" +
                        "\n" +
                        "2.jQuery.ajaxSetup( options )\n" +
                        "Setup global settings for AJAX requests.\n" +
                        "\n" +
                        "3.jQuery.get( url, [data], [callback], [type] )\n" +
                        "Load a remote page using an HTTP GET request.\n" +
                        "\n" +
                        "4.jQuery.getJSON( url, [data], [callback] )\n" +
                        "Load JSON data using an HTTP GET request.\n" +
                        "\n" +
                        "5.jQuery.getScript( url, [callback] )\n" +
                        "Loads and executes a JavaScript file using an HTTP GET request.\n" +
                        "\n" +
                        "6.jQuery.post( url, [data], [callback], [type] )\n" +
                        "Load a remote page using an HTTP POST request.\n" +
                        "\n" +
                        "7.load( url, [data], [callback] )\n" +
                        "Load HTML from a remote file and inject it into the DOM.\n" +
                        "\n" +
                        "8.serialize( )\n" +
                        "Serializes a set of input elements into a string of data.\n" +
                        "\n" +
                        "9.serializeArray( )\n" +
                        "Serializes all forms and form elements like the .serialize() method but returns a JSON data structure for you to work with.",
                "",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "JQuery AJAX Events",
                "You can call various JQuery methods during the life cycle of AJAX call progress. Based on different events/stages following methods are available −" +
                        "\n\n" +
                        "1.ajaxComplete( callback )\n" +
                        "Attach a function to be executed whenever an AJAX request completes.\n" +
                        "\n" +
                        "2.ajaxStart( callback )\n" +
                        "Attach a function to be executed whenever an AJAX request begins and there is none already active.\n" +
                        "\n" +
                        "3.ajaxError( callback )\n" +
                        "Attach a function to be executed whenever an AJAX request fails.\n" +
                        "\n" +
                        "4.ajaxSend( callback )\n" +
                        "Attach a function to be executed before an AJAX request is sent.\n" +
                        "\n" +
                        "5.ajaxStop( callback )\n" +
                        "Attach a function to be executed whenever all AJAX requests have ended.\n" +
                        "\n" +
                        "6.ajaxSuccess( callback )\n" +
                        "Attach a function to be executed whenever an AJAX request completes successfully.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        return list;
    }
    //jQuery Effects
    private static List<LearnDetailsModel> jQueryEffects(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Effects",
                "jQuery provides a trivially simple interface for doing various kind of amazing effects. jQuery methods allow us to quickly apply commonly used effects with a minimum configuration. This tutorial covers all the important jQuery methods to create visual effects.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Showing and Hiding Elements",
                "The commands for showing and hiding elements are pretty much what we would expect − show() to show the elements in a wrapped set and hide() to hide them.\n" +
                        "\n" +
                        "Syntax\n" +
                        "Here is the simple syntax for show() method −\n" +
                        "\n" +
                        "[selector].show( speed, [callback] );\n" +
                        "Here is the description of all the parameters −\n" +
                        "\n" +
                        "speed − A string representing one of the three predefined speeds (\"slow\", \"normal\", or \"fast\") or the number of milliseconds to run the animation (e.g. 1000).\n" +
                        "\n" +
                        "callback − This optional parameter represents a function to be executed whenever the animation completes; executes once for each element animated against.\n" +
                        "\n" +
                        "Following is the simple syntax for hide() method −\n" +
                        "\n" +
                        "[selector].hide( speed, [callback] );\n" +
                        "Here is the description of all the parameters −\n" +
                        "\n" +
                        "speed − A string representing one of the three predefined speeds (\"slow\", \"normal\", or \"fast\") or the number of milliseconds to run the animation (e.g. 1000).\n" +
                        "\n" +
                        "callback − This optional parameter represents a function to be executed whenever the animation completes; executes once for each element animated against.\n" +
                        "\n" +
                        "Example\n" +
                        "Consider the following HTML file with a small JQuery coding −",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The jQuery Example</title>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" language = \"javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "\n" +
                        "            $(\"#show\").click(function () {\n" +
                        "               $(\".mydiv\").show( 1000 );\n" +
                        "            });\n" +
                        "\n" +
                        "            $(\"#hide\").click(function () {\n" +
                        "               $(\".mydiv\").hide( 1000 );\n" +
                        "            });\n" +
                        "\t\t\t\t\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <style>\n" +
                        "         .mydiv{ \n" +
                        "            margin:10px;\n" +
                        "            padding:12px; \n" +
                        "            border:2px solid #666; \n" +
                        "            width:100px; \n" +
                        "            height:100px;\n" +
                        "         }\n" +
                        "      </style>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div class = \"mydiv\">\n" +
                        "         This is a SQUARE\n" +
                        "      </div>\n" +
                        "\n" +
                        "      <input id = \"hide\" type = \"button\" value = \"Hide\" />   \n" +
                        "      <input id = \"show\" type = \"button\" value = \"Show\" />\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Toggling the Elements",
                "jQuery provides methods to toggle the display state of elements between revealed or hidden. If the element is initially displayed, it will be hidden; if hidden, it will be shown.\n" +
                        "\n" +
                        "Syntax\n" +
                        "Here is the simple syntax for one of the toggle() methods −\n" +
                        "\n" +
                        "[selector]..toggle([speed][, callback]);\n" +
                        "Here is the description of all the parameters −\n" +
                        "\n" +
                        "speed − A string representing one of the three predefined speeds (\"slow\", \"normal\", or \"fast\") or the number of milliseconds to run the animation (e.g. 1000).\n" +
                        "\n" +
                        "callback − This optional parameter represents a function to be executed whenever the animation completes; executes once for each element animated against.\n" +
                        "\n" +
                        "Example\n" +
                        "We can animate any element, such as a simple <div> containing an image −",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The jQuery Example</title>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" language = \"javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            $(\".clickme\").click(function(event){\n" +
                        "               $(\".target\").toggle('slow', function(){\n" +
                        "                  $(\".log\").text('Transition Complete');\n" +
                        "               });\n" +
                        "            });\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <style>\n" +
                        "         .clickme{ \n" +
                        "            margin:10px;\n" +
                        "            padding:12px; \n" +
                        "            border:2px solid #666; \n" +
                        "            width:100px; \n" +
                        "            height:50px;\n" +
                        "         }\n" +
                        "      </style>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div class = \"content\">\n" +
                        "         <div class = \"clickme\">Click Me</div>\n" +
                        "         <div class = \"target\">\n" +
                        "            <img src = \"./images/jquery.jpg\" alt = \"jQuery\" />\n" +
                        "         </div>\n" +
                        "         <div class = \"log\"></div>\n" +
                        "      </div>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "JQuery Effect Methods",
                "You have seen basic concept of jQuery Effects. Following table lists down all the important methods to create different kind of effects −" +
                        "\n\n" +
                        "1.animate( params, [duration, easing, callback] )\n" +
                        "A function for making custom animations.\n" +
                        "\n" +
                        "2.fadeIn( speed, [callback] )\n" +
                        "Fade in all matched elements by adjusting their opacity and firing an optional callback after completion.\n" +
                        "\n" +
                        "3.fadeOut( speed, [callback] )\n" +
                        "Fade out all matched elements by adjusting their opacity to 0, then setting display to \"none\" and firing an optional callback after completion.\n" +
                        "\n" +
                        "4.fadeTo( speed, opacity, callback )\n" +
                        "Fade the opacity of all matched elements to a specified opacity and firing an optional callback after completion.\n" +
                        "\n" +
                        "5.hide( )\n" +
                        "Hides each of the set of matched elements if they are shown.\n" +
                        "\n" +
                        "6.hide( speed, [callback] )\n" +
                        "Hide all matched elements using a graceful animation and firing an optional callback after completion.\n" +
                        "\n" +
                        "7.show( )\n" +
                        "Displays each of the set of matched elements if they are hidden.\n" +
                        "\n" +
                        "8.show( speed, [callback] )\n" +
                        "Show all matched elements using a graceful animation and firing an optional callback after completion.\n" +
                        "\n" +
                        "9.slideDown( speed, [callback] )\n" +
                        "Reveal all matched elements by adjusting their height and firing an optional callback after completion.\n" +
                        "\n" +
                        "10.slideToggle( speed, [callback] )\n" +
                        "Toggle the visibility of all matched elements by adjusting their height and firing an optional callback after completion.\n" +
                        "\n" +
                        "11.slideUp( speed, [callback] )\n" +
                        "Hide all matched elements by adjusting their height and firing an optional callback after completion.\n" +
                        "\n" +
                        "12.stop( [clearQueue, gotoEnd ])\n" +
                        "Stops all the currently running animations on all the specified elements.\n" +
                        "\n" +
                        "13.toggle( )\n" +
                        "Toggle displaying each of the set of matched elements.\n" +
                        "\n" +
                        "14.toggle( speed, [callback] )\n" +
                        "Toggle displaying each of the set of matched elements using a graceful animation and firing an optional callback after completion.\n" +
                        "\n" +
                        "15.toggle( switch )\n" +
                        "Toggle displaying each of the set of matched elements based upon the switch (true shows all elements, false hides all elements).\n" +
                        "\n" +
                        "16.jQuery.fx.off\n" +
                        "Globally disable all animations.",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "UI Library Based Effects",
                "To use these effects you can either download latest jQuery UI Library jquery-ui-1.11.4.custom.zip from jQuery UI Library or use Google CDN to use it in the similar way as we have done for jQuery.\n" +
                        "\n" +
                        "We have used Google CDN for jQuery UI using following code snippet in the HTML page so we can use jQuery UI −\n" +
                        "\n" +
                        "<head>\n" +
                        "   <script src = \"https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/jquery-ui.min.js\">\n" +
                        "   </script>\n" +
                        "</head>" +
                        "\n\n" +
                        "1.Blind\n" +
                        "Blinds the element away or shows it by blinding it in.\n" +
                        "\n" +
                        "2.Bounce\n" +
                        "Bounces the element vertically or horizontally n-times.\n" +
                        "\n" +
                        "3.Clip\n" +
                        "Clips the element on or off, vertically or horizontally.\n" +
                        "\n" +
                        "4.Drop\n" +
                        "Drops the element away or shows it by dropping it in.\n" +
                        "\n" +
                        "5.Explode\n" +
                        "Explodes the element into multiple pieces.\n" +
                        "\n" +
                        "6.Fold\n" +
                        "Folds the element like a piece of paper.\n" +
                        "\n" +
                        "7.Highlight\n" +
                        "Highlights the background with a defined color.\n" +
                        "\n" +
                        "8.Puff\n" +
                        "Scale and fade out animations create the puff effect.\n" +
                        "\n" +
                        "9.Pulsate\n" +
                        "Pulsates the opacity of the element multiple times.\n" +
                        "\n" +
                        "10.Scale\n" +
                        "Shrink or grow an element by a percentage factor.\n" +
                        "\n" +
                        "11.Shake\n" +
                        "Shakes the element vertically or horizontally n-times.\n" +
                        "\n" +
                        "12.Size\n" +
                        "Resize an element to a specified width and height.\n" +
                        "\n" +
                        "13.Slide\n" +
                        "Slides the element out of the viewport.\n" +
                        "\n" +
                        "14.Transfer\n" +
                        "Transfers the outline of an element to another.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }
    //jQuery Interactions
    private static List<LearnDetailsModel> jQueryInteractions(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Interactions",
                "Interactions could be added basic mouse-based behaviours to any element. Using with interactions, We can create sortable lists, resizeable elements, drag & drop behaviours.Interactions also make great building blocks for more complex widgets and applications." +
                        "\n\n" +
                        "1.Drag able\n" +
                        "Enable drag able functionality on any DOM element.\n" +
                        "\n" +
                        "2.Drop able\n" +
                        "Enable any DOM element to be drop able.\n" +
                        "\n" +
                        "3.Resize able\n" +
                        "Enable any DOM element to be resize-able.\n" +
                        "\n" +
                        "4.Select able\n" +
                        "Enable a DOM element (or group of elements) to be selectable.\n" +
                        "\n" +
                        "5.Sort able\n" +
                        "Enable a group of DOM elements to be sortable.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Interaction Drag-able",
                "The Drag-able function can be used with interactions in JqueryUI.This function can enable drag-able functionality on any DOM element.We can drag the drag-able element by clicking on it with mouse.\n" +
                        "\n" +
                        "Syntax\n" +
                        "Here is the simple syntax to use drag-able −\n" +
                        "\n" +
                        " $( \"#draggable\" ).draggable();\n" +
                        "Example\n" +
                        "Following is a simple example showing the usage of drag-able −",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The jQuery Example</title>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/jquery-ui.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" language = \"javascript\">\n" +
                        "   \n" +
                        "         $(function() {\n" +
                        "            $( \"#draggable\" ).draggable();\n" +
                        "         });\n" +
                        "\t\t \n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <style>\n" +
                        "         #draggable { width: 150px; height: 150px; padding: 0.5em; }\n" +
                        "         .back{\n" +
                        "            background-color: lightgrey;\n" +
                        "            width: 50px;\n" +
                        "            padding: 25px;\n" +
                        "            border: 25px solid navy;\n" +
                        "            margin: 25px;\n" +
                        "         }\n" +
                        "      </style>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div id = \"draggable\" class = \"ui-widget-content\">\n" +
                        "         <p class = \"back\">Drag</p>\n" +
                        "      </div>\n" +
                        "\t \n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Interaction Drop-able",
                "The Drop-able function can be used with interactions in JqueryUI.This function can be enabled drop-able functionality on any DOM element.We can drop the drag-able element by clicking on it with mouse.\n" +
                        "\n" +
                        "Syntax\n" +
                        "Here is the simple syntax to use drag-able −\n" +
                        "\n" +
                        "$( \"#droppable\" ).droppable();\n" +
                        "Example\n" +
                        "Following is a simple example showing the usage of drop-able −",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The jQuery Example</title>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/jquery-ui.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" language = \"javascript\">\n" +
                        "   \n" +
                        "         $(function() {\n" +
                        "            $( \"#draggable\" ).draggable();\n" +
                        "\t\t\t\t\n" +
                        "            $( \"#droppable\" ).droppable({\n" +
                        "               drop: function( event, ui ) {\n" +
                        "                  $( this ).addClass( \"ui-state-highlight\" ).find( \"p\" ).html( \"Dropped!\" );\n" +
                        "               }\n" +
                        "            });\n" +
                        "         });\n" +
                        "\t\t \n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <style>\n" +
                        "         #draggable { width: 100px; height: 100px; \n" +
                        "            padding: 0.5em; float: left; margin: 10px 10px 10px 0; }\n" +
                        "         #droppable { width: 150px; height: 150px; \n" +
                        "            padding: 0.5em; float: left; margin: 10px; }\n" +
                        "      </style>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div id = \"draggable\" class = \"ui-widget-content\">\n" +
                        "         <p>Drag</p>\n" +
                        "      </div>\n" +
                        "\n" +
                        " \n" +
                        "      <div id = \"droppable\" class = \"ui-widget-header\">\n" +
                        "         <p style = \"background-color: aquamarine;height: 50;\">Drop here</p>\n" +
                        "      </div>\n" +
                        "\t \n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Interaction Resize-able",
                "The Resize able function can be used with interactions in JqueryUI. This function can be enabled Resize able functionality on any DOM element.With the cursor grab the right or bottom border and drag to the desired width or height.\n" +
                        "\n" +
                        "Syntax\n" +
                        "Here is the simple syntax to use drag-able −\n" +
                        "\n" +
                        "$( \"#resizable\" ).resizable();\n" +
                        "Example\n" +
                        "Following is a simple example showing the usage of Resize-able −",
                "<!doctype html>\n" +
                        "<html lang = \"en\">\n" +
                        "   <head>\n" +
                        "      <meta charset = \"utf-8\">\n" +
                        "      <title>jQuery UI Resizable functionality</title>\n" +
                        "      <link \n" +
                        "         href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\" \n" +
                        "         rel = \"stylesheet\">\n" +
                        "      <script src = \"https://code.jquery.com/jquery-1.10.2.js\">\n" +
                        "      </script>\n" +
                        "      <script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <!-- CSS -->\n" +
                        "      <style>\n" +
                        "         .ui-widget-header {\n" +
                        "            background:#b9cd6d;\n" +
                        "            border: 1px solid #b9cd6d;\n" +
                        "            color: #FFFFFF;\n" +
                        "            font-weight: bold;\n" +
                        "         }\n" +
                        "\t\t\t\n" +
                        "         .ui-widget-content {\n" +
                        "            background: #cedc98;\n" +
                        "            border: 1px solid #DDDDDD;\n" +
                        "            color: #333333;\n" +
                        "         }\n" +
                        "\t\t\t\n" +
                        "         #resizable-14{ width: 150px; height: 150px; \n" +
                        "            padding: 0.5em;text-align: center; margin: 0; }\n" +
                        "      </style>\n" +
                        "\t\t\n" +
                        "      <!-- Javascript -->\n" +
                        "\t\t\n" +
                        "      <script>\n" +
                        "         $(function() {\n" +
                        "\t\t\t\n" +
                        "            $( \"#resizable-14\" ).resizable({\n" +
                        "\t\t\t\t\n" +
                        "               create: function( event, ui ) {\n" +
                        "                  $(\"#resizable-15\").text (\"I'm Created!!\");\n" +
                        "               },\n" +
                        "\n" +
                        "               resize: function (event, ui) {\n" +
                        "                  $(\"#resizable-16\").text (\"top = \" + ui.position.top +\n" +
                        "                     \", left = \" + ui.position.left +\n" +
                        "                     \", width = \" + ui.size.width +\n" +
                        "                     \", height = \" + ui.size.height);\n" +
                        "               }\n" +
                        "            });\n" +
                        "\t\t\t\t\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "\t\n" +
                        "      <!-- HTML --> \n" +
                        "      <div id = \"resizable-14\" class = \"ui-widget-content\"> \n" +
                        "         <h3 class = \"ui-widget-header\">Resize !!</h3>\n" +
                        "      </div><br>\n" +
                        "\t\t\n" +
                        "      <span id = \"resizable-15\"></span><br>\n" +
                        "      <span id = \"resizable-16\"></span>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Interaction Select-able",
                "The Select able function can be used with interactions in JqueryUI.This function can be enabled select able functionality on any DOM element.Draw a box with your cursor to select items. Hold down the Ctrl key to make multiple non-adjacent selections.\n" +
                        "\n" +
                        "Syntax\n" +
                        "Here is the simple syntax to use drag-able −\n" +
                        "\n" +
                        "$( \"#selectable\" ).selectable();\n" +
                        "Example\n" +
                        "Following is a simple example showing the usage of select able −",
                "<!doctype html>\n" +
                        "<html lang = \"en\">\n" +
                        "   <head>\n" +
                        "      <meta charset = \"utf-8\">\n" +
                        "      <title>jQuery UI Selectable - Default functionality</title>\n" +
                        "  \n" +
                        "      <link rel = \"stylesheet\" \n" +
                        "         href = \"//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css\">\n" +
                        "  \n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/jquery-ui.min.js\">\n" +
                        "      </script>\n" +
                        "\n" +
                        "      <style>\n" +
                        "         #feedback { font-size: 1.4em; }\n" +
                        "         #selectable .ui-selecting { background: #FECA40; }\n" +
                        "         #selectable .ui-selected { background: #F39814; color: white; }\n" +
                        "         #selectable { list-style-type: none; margin: 0; padding: 0; width: 60%; }\n" +
                        "         #selectable li { margin: 3px; padding: 0.4em; font-size: 1.4em; height: 18px; }\n" +
                        "      </style>\n" +
                        "\t\t\n" +
                        "      <script>\n" +
                        "         $(function() {\n" +
                        "            $( \"#selectable\" ).selectable();\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\n" +
                        "   <body>\n" +
                        " \n" +
                        "      <ol id = \"selectable\">\n" +
                        "         <li class = \"ui-widget-content\">Item 1</li>\n" +
                        "         <li class = \"ui-widget-content\">Item 2</li>\n" +
                        "         <li class = \"ui-widget-content\">Item 3</li>\n" +
                        "         <li class = \"ui-widget-content\">Item 4</li>\n" +
                        "         <li class = \"ui-widget-content\">Item 5</li>\n" +
                        "         <li class = \"ui-widget-content\">Item 6</li>\n" +
                        "         <li class = \"ui-widget-content\">Item 7</li>\n" +
                        "      </ol>\n" +
                        " \n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Interaction Sort-able",
                "The Sort able function can be used with interactions in JqueryUI.This function can be enabled sortable functionality on any DOM element.Click on and drag an element to a new spot within the list, and the other items will adjust to fit. By default, sortable items share draggable properties.\n" +
                        "\n" +
                        "Syntax\n" +
                        "Here is the simple syntax to use drag-able −\n" +
                        "\n" +
                        "$(function() {\n" +
                        "   $( \"#sortable\" ).sortable();\n" +
                        "   $( \"#sortable\" ).disableSelection();\n" +
                        "});\n" +
                        "Example\n" +
                        "Following is a simple example showing the usage of sort able −",
                "<!doctype html>\n" +
                        "<html lang = \"en\">\n" +
                        "   <head>\n" +
                        "      <meta charset = \"utf-8\">\n" +
                        "      <title>jQuery UI Sortable - Default functionality</title>\n" +
                        "      <link rel = \"stylesheet\" \n" +
                        "         href = \"//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css\">\n" +
                        "  \n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/jquery-ui.min.js\">\n" +
                        "      </script>\n" +
                        "\n" +
                        "      <style>\n" +
                        "         #sortable { list-style-type: none; margin: 0; padding: 0; width: 60%; }\n" +
                        "         #sortable li { margin: 0 3px 3px 3px; padding: 0.4em;\n" +
                        "            padding-left: 1.5em; font-size: 1.4em; height: 18px; }\n" +
                        "         #sortable li span { position: absolute; margin-left: -1.3em; }\n" +
                        "      </style>\n" +
                        "\t\t\n" +
                        "      <script>\n" +
                        "         $(function() {\n" +
                        "            $( \"#sortable\" ).sortable();\n" +
                        "            $( \"#sortable\" ).disableSelection();\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        " \n" +
                        "      <ul id = \"sortable\">\n" +
                        "         <li class = \"ui-state-default\"><span \n" +
                        "            class = \"ui-icon ui-icon-arrowthick-2-n-s\"></span>Item 1</li>\n" +
                        "         <li class = \"ui-state-default\"><span \n" +
                        "            class = \"ui-icon ui-icon-arrowthick-2-n-s\"></span>Item 2</li>\n" +
                        "         <li class = \"ui-state-default\"><span \n" +
                        "            class = \"ui-icon ui-icon-arrowthick-2-n-s\"></span>Item 3</li>\n" +
                        "         <li class = \"ui-state-default\"><span \n" +
                        "            class = \"ui-icon ui-icon-arrowthick-2-n-s\"></span>Item 4</li>\n" +
                        "         <li class = \"ui-state-default\"><span \n" +
                        "            class = \"ui-icon ui-icon-arrowthick-2-n-s\"></span>Item 5</li>\n" +
                        "         <li class = \"ui-state-default\"><span \n" +
                        "            class = \"ui-icon ui-icon-arrowthick-2-n-s\"></span>Item 6</li>\n" +
                        "         <li class = \"ui-state-default\"><span \n" +
                        "            class = \"ui-icon ui-icon-arrowthick-2-n-s\"></span>Item 7</li>\n" +
                        "      </ul>\n" +
                        "\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        return list;
    }
    //jQuery Widgets
    private static List<LearnDetailsModel> jQueryWidgets(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Widgets",
                "A jQuery UI widget is a specialized jQuery plug-in.Using plug-in, we can apply behaviours to the elements. However, plug-ins lack some built-in capabilities, such as a way to associate data with its elements, expose methods, merge options with defaults, and control the plug-in's lifetime." +
                        "\n\n" +
                        "1.Accordion\n" +
                        "Enable to collapse the content, that is broken into logical sections.\n" +
                        "\n" +
                        "2.Autocomplete\n" +
                        "Enable to provides the suggestions while you type into the field.\n" +
                        "\n" +
                        "3.Button\n" +
                        "Button is an input of type submit and an anchor.\n" +
                        "\n" +
                        "4.Datepicker\n" +
                        "It is to open an interactive calendar in a small overlay.\n" +
                        "\n" +
                        "5.Dialog\n" +
                        "Dialog boxes are one of the nice ways of presenting information on an HTML page.\n" +
                        "\n" +
                        "6.Menu\n" +
                        "Menu shows list of items.\n" +
                        "\n" +
                        "7.Progressbar\n" +
                        "It shows the progress information.\n" +
                        "\n" +
                        "8.Select menu\n" +
                        "Enable a style able select element/elements.\n" +
                        "\n" +
                        "9.Slider\n" +
                        "The basic slider is horizontal and has a single handle that can be moved with the mouse or by using the arrow keys.\n" +
                        "\n" +
                        "10.Spinner\n" +
                        "It provides a quick way to select one value from a set.\n" +
                        "\n" +
                        "11.Tabs\n" +
                        "It is used to swap between content that is broken into logical sections.\n" +
                        "\n" +
                        "12.Tooltip\n" +
                        "Its provides the tips for the users.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Widget Accordion",
                "The Widget accordion function can be used with widgets in JqueryUI.Accordion is same like as Tabs,When user click headers to expand content that is broken into logical sections.\n" +
                        "\n" +
                        "Syntax\n" +
                        "Here is the simple syntax to use Accordion −\n" +
                        "\n" +
                        "$(function() {\n" +
                        "   $( \"#accordion\" ).accordion();\n" +
                        "});\n" +
                        "Example\n" +
                        "Following is a simple example showing the usage of Accordion −",
                "<!doctype html>\n" +
                        "<html lang = \"en\">\n" +
                        "   <head>\n" +
                        "      <meta charset = \"utf-8\">\n" +
                        "      <title>jQuery UI Accordion - Default functionality</title>\n" +
                        "\t\t\n" +
                        "      <link rel = \"stylesheet\" \n" +
                        "         href = \"//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css\">\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/jquery-ui.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "  \n" +
                        "      <script>\n" +
                        "         $(function() {\n" +
                        "            $( \"#accordion\" ).accordion();\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div id = \"accordion\">\n" +
                        "         <h3>Android</h3>\n" +
                        "\t\t\t\n" +
                        "         <div>\n" +
                        "            <p>\n" +
                        "               Android is an open source and Linux-based operating system for\n" +
                        "               mobile devices such as smartphones and tablet computers. \n" +
                        "               Android was developed by the Open Handset Alliance, led by \n" +
                        "               Google, and other companies.\n" +
                        "            </p>\n" +
                        "         </div>\n" +
                        "\t\t\t\n" +
                        "         <h3>CSS</h3>\n" +
                        "\t\t\t\n" +
                        "         <div>\n" +
                        "            <p>\n" +
                        "               CSS is the acronym for \"Cascading Style Sheet\". This \n" +
                        "               tutorial covers both the versions CSS1,CSS2 and CSS3, \n" +
                        "               and gives a complete understanding of CSS,\n" +
                        "               starting from its basics to advanced concepts.\n" +
                        "            </p>\n" +
                        "         </div>\n" +
                        "\t\t\t\n" +
                        "         <h3>AngularJS</h3>\n" +
                        "\t\t\t\n" +
                        "         <div>\n" +
                        "            <p>\n" +
                        "               AngularJS is a very powerful JavaScript library. It is used in \n" +
                        "               Single Page Application (SPA) projects. It extends HTML DOM\n" +
                        "               with additional attributes and makes it more responsive to \n" +
                        "               user actions. AngularJS is open source, completely free, \n" +
                        "               and used by thousands of developers around the world.\n" +
                        "               It is licensed under the Apache license version 2.0.\n" +
                        "            </p>\n" +
                        "\t\t\t\t\n" +
                        "            <ul>\n" +
                        "               <li>List item one</li>\n" +
                        "               <li>List item two</li>\n" +
                        "               <li>List item three</li>\n" +
                        "            </ul>\n" +
                        "\t\t\t\t\n" +
                        "         </div>\n" +
                        "\t\t\t\n" +
                        "         <h3>PHP</h3>\n" +
                        "\t\t\t\n" +
                        "         <div>\n" +
                        "            <p>\n" +
                        "               The PHP Hypertext Preprocessor (PHP) is a programming language \n" +
                        "               hat allows web developers to create dynamic content that\n" +
                        "               interacts with databases. PHP is basically used for developing \n" +
                        "               web based software applications. This tutorial helps you to \n" +
                        "               build your base with PHP.\n" +
                        "            </p>\n" +
                        "\t\t\t\t\n" +
                        "            <p>\n" +
                        "               Before proceeding with this tutorial you should have at least basic \n" +
                        "               understanding of computer programming, Internet, Database, and \n" +
                        "               MySQL etc is very helpful.\n" +
                        "            </p>\n" +
                        "\t\t\t\t\n" +
                        "         </div>\n" +
                        "      </div>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Widget AutoComplete",
                "The Widget AutoComplete function can be used with widgets in JqueryUI.The Autocomplete widgets provides suggestions while you type into the field.For suppose give Ja as an input, it will provides an output as Java or JavaScript.\n" +
                        "\n" +
                        "Syntax\n" +
                        "Here is the simple syntax to use Autocomplete −\n" +
                        "\n" +
                        "$( \"#tags\" ).autocomplete({\n" +
                        "   source: availableTags\n" +
                        "});\n" +
                        "Example\n" +
                        "Following is a simple example showing the usage of Autocomplete −",
                "<!doctype html>\n" +
                        "<html lang = \"en\">\n" +
                        "   <head>\n" +
                        "      <meta charset = \"utf-8\">\n" +
                        "      <title>jQuery UI Autocomplete - Default functionality</title>\n" +
                        "\t\t\n" +
                        "      <link rel = \"stylesheet\" \n" +
                        "         href = \"//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css\">\n" +
                        "\t\t\t\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/jquery-ui.min.js\">\n" +
                        "      </script>\n" +
                        "  \n" +
                        "      <script>\n" +
                        "         $(function() {\n" +
                        "            var availableTags = [\n" +
                        "               \"ActionScript\",\n" +
                        "               \"AppleScript\",\n" +
                        "               \"Asp\",\n" +
                        "               \"BASIC\",\n" +
                        "               \"C\",\n" +
                        "               \"C++\",\n" +
                        "               \"Clojure\",\n" +
                        "               \"COBOL\",\n" +
                        "               \"ColdFusion\",\n" +
                        "               \"Erlang\",\n" +
                        "               \"Fortran\",\n" +
                        "               \"Groovy\",\n" +
                        "               \"Haskell\",\n" +
                        "               \"Java\",\n" +
                        "               \"JavaScript\",\n" +
                        "               \"Lisp\",\n" +
                        "               \"Perl\",\n" +
                        "               \"PHP\",\n" +
                        "               \"Python\",\n" +
                        "               \"Ruby\",\n" +
                        "               \"Scala\",\n" +
                        "               \"Scheme\"\n" +
                        "            ];\n" +
                        "\t\t\t\t\n" +
                        "            $( \"#tags\" ).autocomplete({\n" +
                        "               source: availableTags\n" +
                        "            });\n" +
                        "\t\t\t\t\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\n" +
                        "   <body>\n" +
                        "      <div class = \"ui-widget\">\n" +
                        "         <label for = \"tags\">Tags: </label>\n" +
                        "         <input id = \"tags\">\n" +
                        "      </div>\n" +
                        " \n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Widget Button",
                "The Widget button function can be used with widgets in JqueryUI.Button is an input of type submit and an anchor.\n" +
                        "\n" +
                        "Syntax\n" +
                        "Here is the simple syntax to use Button −\n" +
                        "\n" +
                        "$(function() {\n" +
                        "   $( \"input[type = submit], a, button\" )\n" +
                        "   .button()\n" +
                        "   .click(function( event ) {\n" +
                        "      event.preventDefault();\n" +
                        "   });\n" +
                        "});\n" +
                        "Example\n" +
                        "Following is a simple example showing the usage of Button −",
                "<!doctype html>\n" +
                        "<html lang = \"en\">\n" +
                        "   <head>\n" +
                        "      <meta charset = \"utf-8\">\n" +
                        "      <title>jQuery UI Button - Default functionality</title>\n" +
                        "\t\t\n" +
                        "      <link rel = \"stylesheet\" \n" +
                        "         href = \"//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css\">\n" +
                        "\t\t\t\n" +
                        "      <script src = \"//code.jquery.com/jquery-1.10.2.js\">\n" +
                        "      </script>\n" +
                        "      <script src = \"//code.jquery.com/ui/1.11.4/jquery-ui.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script>\n" +
                        "         $(function() {\n" +
                        "            $( \"input[type = submit], a, button\" )\n" +
                        "            .button()\n" +
                        "            .click(function( event ) {\n" +
                        "               event.preventDefault();\n" +
                        "            });\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <button>A button element</button>\n" +
                        "      <input type = \"submit\" value = \"A submit button\">\n" +
                        "      <a href = \"#\">An anchor</a>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Widget DatePicker",
                "The Widget DatePicker function can be used with widgets in JqueryUI. It is focus on the input to open an interactive calendar in a small overlay.\n" +
                        "\n" +
                        "Syntax\n" +
                        "Here is the simple syntax to use DatePicker −\n" +
                        "\n" +
                        "$( \"#datepicker\" ).datepicker();\n" +
                        "Example\n" +
                        "Following is a simple example showing the usage of DatePicker −",
                "<!doctype html>\n" +
                        "<html lang = \"en\">\n" +
                        "   <head>\n" +
                        "      <meta charset = \"utf-8\">\n" +
                        "      <title>jQuery UI Datepicker - Default functionality</title>\n" +
                        "\t\t\n" +
                        "      <link rel = \"stylesheet\" \n" +
                        "         href = \"//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css\">\n" +
                        "\t\t\t\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/jquery-ui.min.js\">\n" +
                        "      </script>\n" +
                        " \n" +
                        "      <script>\n" +
                        "         $(function() {\n" +
                        "            $( \"#datepicker\" ).datepicker();\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\n" +
                        "   <body>\n" +
                        "      <p>Date: <input type = \"text\" id = \"datepicker\"></p>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Widget Dialog",
                "The Widget Dialog function can be used with widgets in JqueryUI. Dialog boxes are one of the nice ways of presenting information on an HTML page. A dialog box is a floating window with a title and content area. This window can be moved, resized, and of course, closed using \"X\" icon by default.\n" +
                        "\n" +
                        "Syntax\n" +
                        "Here is the simple syntax to use Dialog −\n" +
                        "\n" +
                        "$( \"#dialog\" ).dialog();\n" +
                        "Example\n" +
                        "Following is a simple example showing the usage of Dialog −",
                "<!doctype html>\n" +
                        "<html lang = \"en\">\n" +
                        "   <head>\n" +
                        "      <meta charset = \"utf-8\">\n" +
                        "      <title>jQuery UI Dialog - Default functionality</title>\n" +
                        "\t\t\n" +
                        "      <link rel = \"stylesheet\" \n" +
                        "         href = \"//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css\">\n" +
                        "\t\t\t\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\t\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/jquery-ui.min.js\">\n" +
                        "      </script>\n" +
                        "  \n" +
                        "      <script>\n" +
                        "         $(function() {\n" +
                        "            $( \"#dialog\" ).dialog();\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div id = \"dialog\" title = \"Basic dialog\">\n" +
                        "         <p>This is the default dialog which is useful for displaying\n" +
                        "            information. The dialog window can be moved, resized and closed with\n" +
                        "            the 'x' icon.</p>\n" +
                        "      </div>\n" +
                        " \n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Widget Menu",
                "The Widget Menu function can be used with widgets in JqueryUI. A simple menu shows list of items.A list is transformed, adding theming, mouse and keyboard navigation support.\n" +
                        "\n" +
                        "Syntax\n" +
                        "Here is the simple syntax to use menu −\n" +
                        "\n" +
                        "$( \"#menu\" ).menu();\n" +
                        "Example\n" +
                        "Following is a simple example showing the usage of menu −",
                "<!doctype html>\n" +
                        "<html lang = \"en\">\n" +
                        "   <head>\n" +
                        "      <meta charset = \"utf-8\">\n" +
                        "      <title>jQuery UI Menu - Default functionality</title>\n" +
                        "\t\t\n" +
                        "      <link rel = \"stylesheet\"\n" +
                        "         href = \"//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css\">\n" +
                        "\t\t\t\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\t\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/jquery-ui.min.js\">\n" +
                        "      </script>\n" +
                        "\n" +
                        "      <script>\n" +
                        "         $(function() {\n" +
                        "            $( \"#menu\" ).menu();\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <style>\n" +
                        "         .ui-menu { width: 150px; }\n" +
                        "      </style>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <ul id = \"menu\">\n" +
                        "         <li class = \"ui-state-disabled\">Team</li>\n" +
                        "         <li>MD. Iqbal Hossain</li>\n" +
                        "         <li>David</li>\n" +
                        "         <li>Lucy</li>\n" +
                        "\t\t\t\n" +
                        "         <li>Anne\n" +
                        "\t\t\t\n" +
                        "            <ul>\n" +
                        "               <li class = \"ui-state-disabled\">John</li>\n" +
                        "               <li>Rahat</li>\n" +
                        "               <li>Emma Watson</li>\n" +
                        "            </ul>\n" +
                        "\t\t\t\t\n" +
                        "         </li>\n" +
                        "\t\t\t\n" +
                        "         <li>Ronaldo</li>\n" +
                        "\t\t\t\n" +
                        "         <li>Messi\n" +
                        "            <ul>\n" +
                        "               <li>Brad\n" +
                        "                  <ul>\n" +
                        "                     <li>Jack</li>\n" +
                        "                     <li>Milli</li>\n" +
                        "                     <li>Rohan</li>\n" +
                        "                  </ul>\n" +
                        "               </li>\n" +
                        "\t\t\t\t\t\n" +
                        "               <li>Rakib\n" +
                        "                  <ul>\n" +
                        "                     <li>Warner</li>\n" +
                        "                     <li>Akbar</li>\n" +
                        "                     <li>Jule</li>\n" +
                        "                  </ul>\n" +
                        "               </li>\n" +
                        "\t\t\t\t\t\n" +
                        "               <li>Hopes</li>\n" +
                        "            </ul>\n" +
                        "         </li>\n" +
                        "\t\t\t\n" +
                        "         <li class = \"ui-state-disabled\">Luke</li>\n" +
                        "      </ul>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l8 = new LearnDetailsModel(
                "Widget ProgressBar",
                "The Widget Progress Bar function can be used with widgets in JqueryUI. A simple progress bar shows information about progress. A simple progress bar is as shown below.\n" +
                        "\n" +
                        "Syntax\n" +
                        "Here is the simple syntax to use progress bar −\n" +
                        "\n" +
                        "$( \"#progressbar\" ).progressbar({\n" +
                        "   value: 37\n" +
                        "});\n" +
                        "Example\n" +
                        "Following is a simple example showing the usage of progress bar −",
                "<!doctype html>\n" +
                        "<html lang = \"en\">\n" +
                        "   <head>\n" +
                        "      <meta charset = \"utf-8\">\n" +
                        "      <title>jQuery UI Progressbar - Default functionality</title>\n" +
                        "\t\t\n" +
                        "      <link rel = \"stylesheet\" \n" +
                        "         href = \"//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css\">\n" +
                        "\t\t\t\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/jquery-ui.min.js\">\n" +
                        "      </script>\n" +
                        "\n" +
                        "      <script>\n" +
                        "         $(function() {\n" +
                        "            $( \"#progressbar\" ).progressbar({\n" +
                        "               value: 37\n" +
                        "            });\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div id = \"progressbar\"></div>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l9 = new LearnDetailsModel(
                "Widget Select Menu",
                "The Widget Select Menu function can be used with widgets in JqueryUI.It provides a styleable select element replacement. A simple select menu is as shown below.\n" +
                        "\n" +
                        "Syntax\n" +
                        "Here is the simple syntax to use Select Menu −\n" +
                        "\n" +
                        "$( \"#menu\" ).selectmenu();\n" +
                        "Example\n" +
                        "Following is a simple example showing the usage of Select Menu −",
                "<!doctype html>\n" +
                        "<html lang=\"en\">\n" +
                        "   <head>\n" +
                        "      <meta charset = \"utf-8\">\n" +
                        "      <meta name = \"viewport\" content = \"width = device-width, initial-scale = 1\">\n" +
                        "      <title>jQuery UI Selectmenu - Default functionality</title>\n" +
                        "\t\t\n" +
                        "      <link rel = \"stylesheet\" \n" +
                        "         href = \"//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css\">\n" +
                        "\t\t\t\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/jquery-ui.min.js\">\n" +
                        "      </script>\n" +
                        "  \n" +
                        "      <script>\n" +
                        "         $(function() {\n" +
                        "            $( \"#speed\" ).selectmenu();\n" +
                        "            $( \"#files\" ).selectmenu();\n" +
                        "            $( \"#number\" ).selectmenu().selectmenu( \"menuWidget\" ).addClass( \"overflow\" );\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <style>\n" +
                        "         fieldset {\n" +
                        "            border: 0;\n" +
                        "         }\n" +
                        "\t\t\t\n" +
                        "         label {\n" +
                        "            display: block;\n" +
                        "            margin: 30px 0 0 0;\n" +
                        "         }\n" +
                        "\t\t\t\n" +
                        "         select {\n" +
                        "            width: 200px;\n" +
                        "         }\n" +
                        "\t\t\t\n" +
                        "         .overflow {\n" +
                        "            height: 200px;\n" +
                        "         }\n" +
                        "      </style>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div class = \"demo\">\n" +
                        " \n" +
                        "         <form action = \"#\">\n" +
                        " \n" +
                        "            <fieldset>\n" +
                        "\t\t\n" +
                        "               <label for = \"speed\">Select a speed</label>\n" +
                        "\t\t\t\n" +
                        "               <select name = \"speed\" id = \"speed\">\n" +
                        "                  <option>Slower</option>\n" +
                        "                  <option>Slow</option>\n" +
                        "                  <option selected = \"selected\">Medium</option>\n" +
                        "                  <option>Fast</option>\n" +
                        "                  <option>Faster</option>\n" +
                        "               </select>\n" +
                        " \n" +
                        "               <label for = \"files\">Select a file</label>\n" +
                        "\t\t\t\t\t\n" +
                        "               <select name = \"files\" id = \"files\">\n" +
                        "\t\t\t\t\t\n" +
                        "                  <optgroup label = \"Scripts\">\n" +
                        "                     <option value = \"jquery\">jQuery.js</option>\n" +
                        "                     <option value = \"jqueryui\">ui.jQuery.js</option>\n" +
                        "                  </optgroup>\n" +
                        "\t\t\t\t\t\t\n" +
                        "                  <optgroup label = \"Other files\">\n" +
                        "                     <option value = \"somefile\">Some unknown file</option>\n" +
                        "                     <option value = \"someotherfile\">Some other file with a\n" +
                        "                        very long option text</option>\n" +
                        "                  </optgroup>\n" +
                        "\t\t\t\t\t\t\n" +
                        "               </select>\n" +
                        " \n" +
                        "               <label for = \"number\">Select a number</label>\n" +
                        "\t\t\t\t\t\n" +
                        "               <select name = \"number\" id = \"number\">\n" +
                        "                  <option>1</option>\n" +
                        "                  <option selected = \"selected\">2</option>\n" +
                        "                  <option>3</option>\n" +
                        "                  <option>4</option>\n" +
                        "                  <option>5</option>\n" +
                        "                  <option>6</option>\n" +
                        "                  <option>7</option>\n" +
                        "                  <option>8</option>\n" +
                        "                  <option>9</option>\n" +
                        "                  <option>10</option>\n" +
                        "                  <option>11</option>\n" +
                        "                  <option>12</option>\n" +
                        "                  <option>13</option>\n" +
                        "                  <option>14</option>\n" +
                        "                  <option>15</option>\n" +
                        "                  <option>16</option>\n" +
                        "                  <option>17</option>\n" +
                        "                  <option>18</option>\n" +
                        "                  <option>19</option>\n" +
                        "               </select>\n" +
                        "\t\t\t\t\t\n" +
                        "            </fieldset>\n" +
                        " \n" +
                        "         </form>\n" +
                        " \n" +
                        "      </div>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l10 = new LearnDetailsModel(
                "Widget Slider",
                "The Widget Slider function can be used with widgets in JqueryUI.The slider is horizontal and has a single handle that can be moved with the mouse or by using the arrow keys.\n" +
                        "\n" +
                        "Syntax\n" +
                        "Here is the simple syntax to use Slider −\n" +
                        "\n" +
                        "$(\"#slider\").slider();\n" +
                        "Example\n" +
                        "Following is a simple example showing the usage of Slider −",
                "<!doctype html>\n" +
                        "<html lang = \"en\">\n" +
                        "   <head>\n" +
                        "      <meta charset = \"utf-8\">\n" +
                        "      <title>jQuery UI Slider - Default functionality</title>\n" +
                        "\t\t\n" +
                        "      <link rel = \"stylesheet\" \n" +
                        "         href = \"//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css\">\n" +
                        "\t\t\t\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/jquery-ui.min.js\">\n" +
                        "      </script>\n" +
                        "\n" +
                        "      <script>\n" +
                        "         $(function() {\n" +
                        "            $( \"#slider\" ).slider();\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\n" +
                        "   <body>\n" +
                        "      <div id = \"slider\"></div>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l11 = new LearnDetailsModel(
                "Widget Spinner",
                "The Widget Spinner function can be used with widgets in JqueryUI.Spinner provide a quick way to select one value from a set.\n" +
                        "\n" +
                        "Syntax\n" +
                        "Here is the simple syntax to use Spinner −\n" +
                        "\n" +
                        "$( \"#menu\" ).selectmenu();\n" +
                        "Example\n" +
                        "Following is a simple example showing the usage of Spinner −",
                "<!doctype html>\n" +
                        "<html lang = \"en\">\n" +
                        "   <head>\n" +
                        "      <meta charset = \"utf-8\">\n" +
                        "      <title>jQuery UI Spinner - Default functionality</title>\n" +
                        "\t\t\n" +
                        "      <link rel = \"stylesheet\" \n" +
                        "         href = \"//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css\">\n" +
                        "\t\t\t\n" +
                        "      <script src = \"//code.jquery.com/jquery-1.10.2.js\">\n" +
                        "      </script>\n" +
                        "      <script \n" +
                        "         src = \"/resources/demos/external/jquery-mousewheel/jquery.mousewheel.js\">\n" +
                        "      </script>\n" +
                        "      <script src = \"//code.jquery.com/ui/1.11.4/jquery-ui.js\">\n" +
                        "      </script>\n" +
                        "\n" +
                        "      <script>\n" +
                        "         $(function() {\n" +
                        "\t\t\t\n" +
                        "            var spinner = $( \"#spinner\" ).spinner();\n" +
                        " \n" +
                        "            $( \"#disable\" ).click(function() {\n" +
                        "               if ( spinner.spinner( \"option\", \"disabled\" ) ) {\n" +
                        "                  spinner.spinner( \"enable\" );\n" +
                        "               } else {\n" +
                        "                  spinner.spinner( \"disable\" );\n" +
                        "               }\n" +
                        "            });\n" +
                        "\t\t\t\t\n" +
                        "            $( \"#destroy\" ).click(function() {\n" +
                        "               if ( spinner.spinner( \"instance\" ) ) {\n" +
                        "                  spinner.spinner( \"destroy\" );\n" +
                        "               } else {\n" +
                        "                  spinner.spinner();\n" +
                        "               }\n" +
                        "            });\n" +
                        "\t\t\t\t\n" +
                        "            $( \"#getvalue\" ).click(function() {\n" +
                        "               alert( spinner.spinner( \"value\" ) );\n" +
                        "            });\n" +
                        "\t\t\t\t\n" +
                        "            $( \"#setvalue\" ).click(function() {\n" +
                        "               spinner.spinner( \"value\", 5 );\n" +
                        "            });\n" +
                        " \n" +
                        "            $( \"button\" ).button();\n" +
                        "\t\t\t\t\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\n" +
                        "   <body>\n" +
                        "      <p>\n" +
                        "         <label for = \"spinner\">Select a value:</label>\n" +
                        "         <input id = \"spinner\" name = \"value\">\n" +
                        "      </p>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l12 = new LearnDetailsModel(
                "Widget Tab",
                "The Widget Tab function can be used with widgets in JqueryUI.tab is used to swap between content that is broken into logical sections.\n" +
                        "\n" +
                        "Syntax\n" +
                        "Here is the simple syntax to use tab −\n" +
                        "\n" +
                        "$( \"#tabs\" ).tabs();\n" +
                        "Example\n" +
                        "Following is a simple example showing the usage of Tab −",
                "<!doctype html>\n" +
                        "<html lang = \"en\">\n" +
                        "   <head>\n" +
                        "      <meta charset = \"utf-8\">\n" +
                        "      <title>jQuery UI Tabs - Default functionality</title>\n" +
                        "\t\t\n" +
                        "      <link rel = \"stylesheet\" \n" +
                        "         href = \"//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css\">\n" +
                        "\t\t\t\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\"></script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/jquery-ui.min.js\">\n" +
                        "      </script>\n" +
                        "  \n" +
                        "      <script>\n" +
                        "         $(function() {\n" +
                        "            $( \"#tabs\" ).tabs();\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div id = \"tabs\">\n" +
                        "        <ul>\n" +
                        "            <li><a href = \"#tabs-1\">Android</a></li>\n" +
                        "            <li><a href = \"#tabs-2\">CSS</a></li>\n" +
                        "            <li><a href = \"#tabs-3\">AngularJS</a></li>\n" +
                        "         </ul>\n" +
                        "\t\t\t\n" +
                        "         <div id = \"tabs-1\">\n" +
                        "            <p>Android is an open source and Linux-based operating system \n" +
                        "               for mobile devices such as smartphones and tablet computers. \n" +
                        "               Android was developed by the Open Handset Alliance, led by Google, \n" +
                        "               and other companies.</p>\n" +
                        "         </div>\n" +
                        "\t\t\t\n" +
                        "         <div id = \"tabs-2\">\n" +
                        "            <p>CSS is the acronym for \"Cascading Style Sheet\". This\n" +
                        "               tutorial covers both the versions CSS1,CSS2 and CSS3, and gives a\n" +
                        "               complete understanding of CSS,starting from its basics to advanced \n" +
                        "               concepts.</p>\n" +
                        "         </div>\n" +
                        "\t\t\t\n" +
                        "         <div id = \"tabs-3\">\n" +
                        "            <p>AngularJS is a very powerful JavaScript library. It is used\n" +
                        "               in Single Page Application (SPA) projects. It extends HTML DOM \n" +
                        "               with additional attributes and makes it more responsive to user \n" +
                        "               actions. AngularJS is open source,completely free, and used by\n" +
                        "               thousands of developers around the world. It is licensed under \n" +
                        "               the Apache license version 2.0.</p>\n" +
                        "         </div>\n" +
                        "      </div>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );final LearnDetailsModel l13 = new LearnDetailsModel(
                "Widget Tooltip",
                "The Widget Tooltip function can be used with widgets in JqueryUI.Tooltip is used to show the tips.A sample example of tooltip as shown below.\n" +
                        "\n" +
                        "Syntax\n" +
                        "Here is the simple syntax to use Tooltip −\n" +
                        "\n" +
                        "$( document ).tooltip();\n" +
                        "Example\n" +
                        "Following is a simple example showing the usage of Tooltip −",
                "<!doctype html>\n" +
                        "<html lang = \"en\">\n" +
                        "   <head>\n" +
                        "      <meta charset = \"utf-8\">\n" +
                        "      <title>jQuery UI Tooltip - Default functionality</title>\n" +
                        "\t\t\n" +
                        "      <link rel = \"stylesheet\" \n" +
                        "         href = \"//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css\">\n" +
                        "\t\t\t\n" +
                        "      <script src = \"//code.jquery.com/jquery-1.10.2.js\">\n" +
                        "      </script>\n" +
                        "      <script src = \"//code.jquery.com/ui/1.11.4/jquery-ui.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script>\n" +
                        "         $(function() {\n" +
                        "            $( document ).tooltip();\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <style>\n" +
                        "         label {\n" +
                        "            display: inline-block;\n" +
                        "            width: 15em;\n" +
                        "         }\n" +
                        "      </style>\n" +
                        "   </head>\n" +
                        "\n" +
                        "   <body>\n" +
                        "      <p><a href = \"#\" title = \"SHR Creation Bangladesh Pvt ltd\">\n" +
                        "         SHR Creation</a> Free tutorials and reference manuals with\n" +
                        "         examples for Concordion, 5G, JBPM5, SAP, Agile, SVG, Web Icons, KDB+,\n" +
                        "         Web Analytics, Google Maps, Joomla, Self</p>\n" +
                        "\t\t\t\n" +
                        "      <p><a href = \"https://www.tutorialspoint.com/jquery/index.htm\"\n" +
                        "         title = \"J Query tutorials\"> J Query</a> is a fast and \n" +
                        "         concise JavaScript library created by John Resig in 2006. \n" +
                        "         jQuery simplifies HTML document traversing, event handling,  \n" +
                        "         animating, and Ajax interactions for Rapid Web Development.</p>\n" +
                        "\t\t\t\n" +
                        "      <p><label for = \"age\">your tutorials details</label>\n" +
                        "         <input id = \"age\" title = \"Please enter your tutorial name. \n" +
                        "         We will search in our data base\"></p>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        list.add(l8);
        list.add(l9);
        list.add(l10);
        list.add(l11);
        list.add(l12);
        list.add(l13);
        return list;
    }
    //jQuery Theming
    private static List<LearnDetailsModel> jQueryTheming(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Theming",
                "Jquery has two different styling themes as A And B.Each with different colors for buttons, bars, content blocks, and so on.\n" +
                        "\n" +
                        "The syntax of J query theming as shown below −\n" +
                        "\n" +
                        "<div data-role = \"page\" data-theme = \"a|b\">\n" +
                        "A Simple of A theming Example as shown below −",
                "<!DOCTYPE html>\n" +
                        "<html>\n" +
                        "   <head>\n" +
                        "      <meta name = \"viewport\" content = \"width = device-width, initial-scale = 1\">\n" +
                        "      <link rel = \"stylesheet\" \n" +
                        "         href = \"https://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n" +
                        "\t\t\t\n" +
                        "      <script src = \"https://code.jquery.com/jquery-1.11.3.min.js\">\n" +
                        "      </script>\n" +
                        "      <script src = \"https://code.jquery.com/jquery-1.11.3.min.js\">\n" +
                        "      </script>\n" +
                        "      <script \n" +
                        "         src = \"https://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\">\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div data-role = \"page\" id = \"pageone\" data-theme = \"a\">\n" +
                        "        <div data-role = \"header\">\n" +
                        "            <h1>SHR Creation</h1>\n" +
                        "         </div>\n" +
                        "\n" +
                        "         <div data-role = \"main\" class = \"ui-content\">\n" +
                        "\t\t\t\n" +
                        "            <p>Text link</p>\n" +
                        "            <a href = \"#\">A Standard Text Link</a>\n" +
                        "            <a href = \"#\" class = \"ui-btn\">Link Button</a>\n" +
                        "            <p>A List View:</p>\n" +
                        "\t\t\t\t\n" +
                        "            <ul data-role = \"listview\" data-autodividers = \"true\" data-inset = \"true\">\n" +
                        "               <li><a href = \"#\">Android </a></li>\n" +
                        "               <li><a href = \"#\">IOS</a></li>\n" +
                        "            </ul>\n" +
                        "\t\t\t\t\n" +
                        "            <label for = \"fullname\">Input Field:</label>\n" +
                        "            <input type = \"text\" name = \"fullname\" id = \"fullname\" \n" +
                        "               placeholder = \"Name..\">    \n" +
                        "            <label for = \"switch\">Toggle Switch:</label>\n" +
                        "\t\t\t\t\n" +
                        "            <select name = \"switch\" id = \"switch\" data-role = \"slider\">\n" +
                        "               <option value = \"on\">On</option>\n" +
                        "               <option value = \"off\" selected>Off</option>\n" +
                        "            </select>\n" +
                        "\t\t\t\t\n" +
                        "         </div>\n" +
                        "\n" +
                        "         <div data-role = \"footer\">\n" +
                        "            <h1>SHR Creation</h1>\n" +
                        "         </div>\n" +
                        "      </div>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "B Theme",
                "A Simple of B theming Example as shown below −",
                "<!DOCTYPE html>\n" +
                        "<html>\n" +
                        "   <head>\n" +
                        "      <meta name = \"viewport\" content = \"width = device-width, initial-scale = 1\">\n" +
                        "      <link rel = \"stylesheet\" \n" +
                        "         href = \"https://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.css\">\n" +
                        "      <script src = \"https://code.jquery.com/jquery-1.11.3.min.js\">\n" +
                        "      </script>\n" +
                        "      <script src = \"https://code.jquery.com/jquery-1.11.3.min.js\">\n" +
                        "      </script>\n" +
                        "      <script \n" +
                        "         src = \"https://code.jquery.com/mobile/1.4.5/jquery.mobile-1.4.5.min.js\">\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div data-role = \"page\" id = \"pageone\" data-theme = \"b\">\n" +
                        "        <div data-role = \"header\">\n" +
                        "            <h1>SHR Creation</h1>\n" +
                        "         </div>\n" +
                        "\n" +
                        "         <div data-role = \"main\" class = \"ui-content\">\n" +
                        "            <p>Text link</p>\n" +
                        "            <a href = \"#\">A Standard Text Link</a>\n" +
                        "            <a href = \"#\" class = \"ui-btn\">Link Button</a>\n" +
                        "            <p>A List View:</p>\n" +
                        "\t\t\t\t\n" +
                        "            <ul data-role = \"listview\" data-autodividers = \"true\" data-inset = \"true\">\n" +
                        "               <li><a href = \"#\">Android </a></li>\n" +
                        "               <li><a href = \"#\">IOS</a></li>\n" +
                        "            </ul>\n" +
                        "\t\t\t\t\n" +
                        "            <label for = \"fullname\">Input Field:</label>\n" +
                        "            <input type = \"text\" name = \"fullname\" id = \"fullname\" \n" +
                        "               placeholder = \"Name..\">    \n" +
                        "            <label for = \"switch\">Toggle Switch:</label>\n" +
                        "\t\t\t\t\n" +
                        "            <select name = \"switch\" id = \"switch\" data-role = \"slider\">\n" +
                        "               <option value = \"on\">On</option>\n" +
                        "               <option value = \"off\" selected>Off</option>\n" +
                        "            </select>\n" +
                        "\t\t\t\t\n" +
                        "         </div>\n" +
                        "\n" +
                        "         <div data-role = \"footer\">\n" +
                        "            <h1>SHR Creation</h1>\n" +
                        "         </div>\n" +
                        "      </div>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        list.add(l1);
        list.add(l2);
        return list;
    }
    //jQuery Utilities
    private static List<LearnDetailsModel> jQueryUtilities(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Utilities",
                "Jquery provides several utilities in the format of $(name space). These methods are helpful to complete the programming tasks.a few of the utility methods are as show below.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "$.trim()",
                "$.trim() is used to Removes leading and trailing whitespace",
                "$.trim( \"    lots of extra whitespace    \" );",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "$.each()",
                "$.each() is used to Iterates over arrays and objects" +
                        "\n\n" +
                        ".each() can be called on a selection to iterate over the elements contained in the selection. .each(), not $.each(), should be used for iterating over elements in a selection.",
                "$.each([ \"foo\", \"bar\", \"baz\" ], function( idx, val ) {\n" +
                        "   console.log( \"element \" + idx + \" is \" + val );\n" +
                        "});\n" +
                        " \n" +
                        "$.each({ foo: \"bar\", baz: \"bim\" }, function( k, v ) {\n" +
                        "   console.log( k + \" : \" + v );\n" +
                        "});",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "$.inArray()",
                "$.inArray() is used to Returns a value's index in an array, or -1 if the value is not in the array.",
                "var myArray = [ 1, 2, 3, 5 ];\n" +
                        " \n" +
                        "if ( $.inArray( 4, myArray ) !== -1 ) {\n" +
                        "   console.log( \"found it!\" );\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "$.extend()",
                "$.extend() is used to Changes the properties of the first object using the properties of subsequent objects.",
                "var firstObject = { foo: \"bar\", a: \"b\" };\n" +
                        "var secondObject = { foo: \"baz\" };\n" +
                        " \n" +
                        "var newObject = $.extend( firstObject, secondObject );\n" +
                        " \n" +
                        "console.log( firstObject.foo ); \n" +
                        "console.log( newObject.foo );",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "$.proxy()",
                "$.proxy() is used to Returns a function that will always run in the provided scope — that is, sets the meaning of this inside the passed function to the second argument",
                "var myFunction = function() {\n" +
                        "   console.log( this );\n" +
                        "};\n" +
                        "\n" +
                        "var myObject = {\n" +
                        "   foo: \"bar\"\n" +
                        "};\n" +
                        " \n" +
                        "myFunction(); // window\n" +
                        " \n" +
                        "var myProxyFunction = $.proxy( myFunction, myObject );\n" +
                        " \n" +
                        "myProxyFunction();",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "$.browser",
                "$.browser is used to give the information about browsers",
                "jQuery.each( jQuery.browser, function( i, val ) {\n" +
                        "   $( \"<div>\" + i + \" : <span>\" + val + \"</span>\" )\n" +
                        "   .appendTo( document.body );\n" +
                        "});",
                ""
        );
        final LearnDetailsModel l8 = new LearnDetailsModel(
                "$.contains()",
                "$.contains() is used to returns true if the DOM element provided by the second argument is a descendant of the DOM element provided by the first argument, whether it is a direct child or nested more deeply.",
                "$.contains( document.documentElement, document.body );\n" +
                        "$.contains( document.body, document.documentElement );",
                ""
        );
        final LearnDetailsModel l9 = new LearnDetailsModel(
                "$.data()",
                "$.data() is used to give the information about data",
                "<html lang = \"en\">\n" +
                        "   <head>\n" +
                        "      <title>jQuery.data demo</title>\n" +
                        "      <script src = \"https://code.jquery.com/jquery-1.10.2.js\">\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div>\n" +
                        "         The values stored were <span></span>\n" +
                        "            and <span></span>\n" +
                        "      </div>\n" +
                        " \n" +
                        "      <script>\n" +
                        "         var div = $( \"div\" )[ 0 ];\n" +
                        "\t\t\t\n" +
                        "         jQuery.data( div, \"test\", {\n" +
                        "            first: 25,\n" +
                        "            last: \"tutorials\"\n" +
                        "         });\n" +
                        "\t\t\t\n" +
                        "         $( \"span:first\" ).text( jQuery.data( div, \"test\" ).first );\n" +
                        "         $( \"span:last\" ).text( jQuery.data( div, \"test\" ).last );\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                "The values stored were 25 and tutorials"
        );
        final LearnDetailsModel l10 = new LearnDetailsModel(
                "$.fn.extend()",
                "$.fn.extend() is used to extends the jQuery prototype",
                "<html lang = \"en\">\n" +
                        "   <head>\n" +
                        "      <script src = \"https://code.jquery.com/jquery-1.10.2.js\">\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <label><input type = \"checkbox\" name = \"android\"> \n" +
                        "         Android</label>\n" +
                        "      <label><input type = \"checkbox\" name = \"ios\"> IOS</label>\n" +
                        " \n" +
                        "      <script>\n" +
                        "         jQuery.fn.extend({\n" +
                        "\t\t\t\n" +
                        "            check: function() {\n" +
                        "               return this.each(function() {\n" +
                        "                  this.checked = true;\n" +
                        "               });\n" +
                        "            },\n" +
                        "            uncheck: function() {\n" +
                        "               return this.each(function() {\n" +
                        "                  this.checked = false;\n" +
                        "               });\n" +
                        "            }\n" +
                        "         });\n" +
                        " \n" +
                        "         // Use the newly created .check() method\n" +
                        "         $( \"input[type = 'checkbox']\" ).check();\n" +
                        "\t\t\t\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l11 = new LearnDetailsModel(
                "$.isWindow()",
                "$.isWindow() is used to recognise the window",
                "<!doctype html>\n" +
                        "<html lang = \"en\">\n" +
                        "   <head>\n" +
                        "      <meta charset = \"utf-8\">\n" +
                        "      <title>jQuery.isWindow demo</title>\n" +
                        "      <script src = \"https://code.jquery.com/jquery-1.10.2.js\">\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      Is 'window' a window? <b></b>\n" +
                        " \n" +
                        "      <script>\n" +
                        "         $( \"b\" ).append( \"\" + $.isWindow( window ) );\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l12 = new LearnDetailsModel(
                "$.now()",
                "It returns a number which is representing the current time",
                "(new Date).getTime()",
                ""
        );
        final LearnDetailsModel l13 = new LearnDetailsModel(
                "$.isXMLDoc()",
                "$.isXMLDoc() checks whether a file is an xml or not",
                "jQuery.isXMLDoc( document )\n" +
                        "jQuery.isXMLDoc( document.body )",
                ""
        );
        final LearnDetailsModel l14 = new LearnDetailsModel(
                "$.globalEval()",
                "$.globalEval() is used to execute the javascript globally",
                "function test() {\n" +
                        "   jQuery.globalEval( \"var newVar = true;\" )\n" +
                        "}\n" +
                        "test();",
                ""
        );
        final LearnDetailsModel l15 = new LearnDetailsModel(
                "$.dequeue()",
                "$.dequeue() is used to execute the next function in the queue",
                "<!doctype html>\n" +
                        "<html lang = \"en\">\n" +
                        "   <head>\n" +
                        "      <meta charset = \"utf-8\">\n" +
                        "      <title>jQuery.dequeue demo</title>\n" +
                        "\t\t\n" +
                        "      <style>\n" +
                        "         div {\n" +
                        "            margin: 3px;\n" +
                        "            width: 50px;\n" +
                        "            position: absolute;\n" +
                        "            height: 50px;\n" +
                        "            left: 10px;\n" +
                        "            top: 30px;\n" +
                        "            background-color: green;\n" +
                        "            border-radius: 50px;\n" +
                        "         }\n" +
                        "         div.red {\n" +
                        "            background-color: blue;\n" +
                        "         }\n" +
                        "      </style>\n" +
                        "\t\t\n" +
                        "      <script src = \"https://code.jquery.com/jquery-1.10.2.js\"></script>\n" +
                        "   </head>\n" +
                        "\n" +
                        "   <body>\n" +
                        "      <button>Start</button>\n" +
                        "      <div></div>\n" +
                        " \n" +
                        "      <script>\n" +
                        "         $( \"button\" ).click(function() {\n" +
                        "            $( \"div\" )\n" +
                        "            .animate({ left: '+ = 400px' }, 2000 )\n" +
                        "            .animate({ top: '0px' }, 600 )\n" +
                        "\t\t\t\t\n" +
                        "            .queue(function() {\n" +
                        "               $( this ).toggleClass( \"red\" );\n" +
                        "               $.dequeue( this );\n" +
                        "            })\n" +
                        "\t\t\t\t\n" +
                        "            .animate({ left:'10px', top:'30px' }, 700 );\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        list.add(l8);
        list.add(l9);
        list.add(l10);
        list.add(l11);
        list.add(l12);
        list.add(l13);
        list.add(l14);
        list.add(l15);
        return list;
    }
    //jQuery Plugins
    private static List<LearnDetailsModel> jQueryPlugins(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Plugins",
                "A plug-in is piece of code written in a standard JavaScript file. These files provide useful jQuery methods which can be used along with jQuery library methods.\n" +
                        "\n" +
                        "There are plenty of jQuery plug-in available which you can download from repository link at https://jquery.com/plugins",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "How to use Plugins",
                "To make a plug-in's methods available to us, we include plug-in file very similar to jQuery library file in the <head> of the document.\n" +
                        "\n" +
                        "We must ensure that it appears after the main jQuery source file, and before our custom JavaScript code.\n" +
                        "\n" +
                        "Following example shows how to include jquery.plug-in.js plugin −",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The jQuery Example</title>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\n" +
                        "      <script src = \"jquery.plug-in.js\" type = \"text/javascript\"></script>\n" +
                        "      <script src = \"custom.js\" type = \"text/javascript\"></script>\n" +
                        "      \n" +
                        "      <script type = \"text/javascript\" language = \"javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            .......your custom code.....\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      .............................\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "How to develop a Plug-in?",
                "This is very simple to write your own plug-in. Following is the syntax to create a a method −\n" +
                        "\n" +
                        "jQuery.fn.methodName = methodDefinition;\n" +
                        "Here methodNameM is the name of new method and methodDefinition is actual method definition.\n" +
                        "\n" +
                        "The guideline recommended by the jQuery team is as follows −\n" +
                        "\n" +
                        "Any methods or functions you attach must have a semicolon (;) at the end.\n" +
                        "\n" +
                        "Your method must return the jQuery object, unless explicitly noted otherwise.\n" +
                        "\n" +
                        "You should use this.each to iterate over the current set of matched elements - it produces clean and compatible code that way.\n" +
                        "\n" +
                        "Prefix the filename with jquery, follow that with the name of the plugin and conclude with .js.\n" +
                        "\n" +
                        "Always attach the plugin to jQuery directly instead of $, so users can use a custom alias via noConflict() method.\n" +
                        "\n" +
                        "For example, if we write a plugin that we want to name debug, our JavaScript filename for this plugin is −\n" +
                        "\n" +
                        "jquery.debug.js\n" +
                        "The use of the jquery. prefix eliminates any possible name collisions with files intended for use with other libraries.\n" +
                        "\n" +
                        "Example\n" +
                        "Following is a small plug-in to have warning method for debugging purpose. Keep this code in jquery.debug.js file −" +
                        "\n\n" +
                        "jQuery.fn.warning = function() {\n" +
                        "   return this.each(function() {\n" +
                        "      alert('Tag Name:\"' + $(this).prop(\"tagName\") + '\".');\n" +
                        "   });\n" +
                        "};",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>The jQuery Example</title>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script src = \"jquery.debug.js\" type = \"text/javascript\">\n" +
                        "      </script>\n" +
                        "\n" +
                        "      <script type = \"text/javascript\" language = \"javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            $(\"div\").warning();\n" +
                        "            $(\"p\").warning();\n" +
                        "         });\n" +
                        "      </script>\t\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <p>This is paragraph</p>\n" +
                        "      <div>This is division</div>\n" +
                        "   </body>\n" +
                        "</html>",
                "This is paragraph\n" +
                        "This is division"
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Page Pilling",
                "pagePiling.js is a jQuery plug-in for 'piling' your layout sections over one another and accessing them by scrolling.\n" +
                        "\n" +
                        "A Simple of theming example as shown below −",
                "<!DOCTYPE html>\n" +
                        "<html xmlns = \"https://www.w3.org/1999/xhtml\">\n" +
                        "   <head>\n" +
                        "      <meta http-equiv = \"Content-Type\" content = \"text/html; charset = utf-8\" />\n" +
                        "      <link rel = \"stylesheet\" type = \"text/css\" \n" +
                        "         href = \"https://fonts.googleapis.com/css?family=Lato:300,400,700\" />\n" +
                        "\t\t\t\n" +
                        "      <link rel = \"stylesheet\" type = \"text/css\" \n" +
                        "         href = \"/jquery/src/pagepilling/jquery.pagepiling.css\" />\n" +
                        "\t\t\t\n" +
                        "      <link rel = \"stylesheet\" type = \"text/css\" \n" +
                        "         href = \"/jquery/src/pagepilling/examples.css\" />\n" +
                        "\n" +
                        "      <script \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"/jquery/src/pagepilling/jquery.pagepiling.min.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            $('#pagepiling').pagepiling({\n" +
                        "               menu: '#menu',\n" +
                        "               anchors: ['page1', 'page2', 'page3', 'page4'],\n" +
                        "               sectionsColor: ['#bfda00', '#2ebe21', '#2C3E50', '#51bec4'],\n" +
                        "\t\t\t\t\t\n" +
                        "               navigation: {\n" +
                        "                  'position': 'right',\n" +
                        "                  'tooltips': ['Page 1', 'Page 2', 'Page 3', 'Pgae 4']\n" +
                        "               },\n" +
                        "               afterRender: function(){\n" +
                        "                  //playing the video\n" +
                        "                  $('video').get(0).play();\n" +
                        "               }\n" +
                        "            });\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "\n" +
                        "      <style>\n" +
                        "    \t   .section {\n" +
                        "            text-align:center;\n" +
                        "         }\n" +
                        "         #myVideo {\n" +
                        "            position: absolute;\n" +
                        "            z-index: 4;\n" +
                        "            right: 0;\n" +
                        "\t\t\t\t\n" +
                        "            bottom: 0;\n" +
                        "            top:0;\n" +
                        "            right:0;\n" +
                        "            width: 100%;\n" +
                        "            height: 100%;\n" +
                        "\t\t\t\t\n" +
                        "            background-size: 100% 100%;\n" +
                        "            background-color: black; /* in case the video doesn't fit the whole page*/\n" +
                        "            background-image: /* our video */;\n" +
                        "            background-position: center center;\n" +
                        "            background-size: contain;\n" +
                        "            object-fit: cover; /*cover video background */\n" +
                        "         }\n" +
                        "         #section1 .layer {\n" +
                        "            position: absolute;\n" +
                        "            z-index: 5;\n" +
                        "            width: 100%;\n" +
                        "            left: 0;\n" +
                        "            top: 43%;\n" +
                        "            height: 100%;\n" +
                        "         }\n" +
                        "         #section1 h1 {\n" +
                        "            color:#fff;\n" +
                        "         }\n" +
                        "         #infoMenu li a {\n" +
                        "            color: #fff;\n" +
                        "         }\n" +
                        "      </style>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <ul id = \"menu\">\n" +
                        "         <li data-menuanchor = \"page1\" class = \"active\">\n" +
                        "            <a href = \"#page1\">Page 1</a></li>\n" +
                        "         \n" +
                        "         <li data-menuanchor = \"page2\"><a href = \"#page2\">\n" +
                        "            Page 2</a></li>\n" +
                        "         \n" +
                        "         <li data-menuanchor = \"page3\"><a href = \"#page3\">\n" +
                        "            Page 3</a></li>\n" +
                        "      </ul>\n" +
                        "\n" +
                        "      <div id = \"pagepiling\">\n" +
                        "        <div class = \"section\" id = \"section1\">\n" +
                        "            <video autoplay loop muted id = \"myVideo\">\n" +
                        "               <source src = \"imgs/flowers.mp4\" type = \"video/mp4\">\n" +
                        "               <source src = \"imgs/flowers.webm\" type = \"video/webm\">\n" +
                        "            </video>\n" +
                        "         </div>\n" +
                        "\t\t\t\n" +
                        "         <div class = \"section\" id = \"section2\">\n" +
                        "            <div class = \"intro\">\n" +
                        "               <h1>No limits</h1>\n" +
                        "               <p>Anything is possible with SHR Creation</p>\n" +
                        "            </div>\n" +
                        "         </div>\n" +
                        "\t\t\t\n" +
                        "         <div class = \"section\" id = \"section4\">\n" +
                        "            <div class = \"intro\">\n" +
                        "               <h1></h1>\n" +
                        "               <p>Simple Easy Learning</p>\n" +
                        "            </div>\n" +
                        "         </div>\n" +
                        "         \n" +
                        "      </div>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Flickerplate",
                "Flickerplate is a jQuery plugin for creating a slider which allows you cycle through images with animated arrows and dots navigation.\n" +
                        "\n" +
                        "A Simple of flickerplate example as shown below −",
                "<!DOCTYPE html>\n" +
                        "<html>\n" +
                        "   <head>   \n" +
                        "      <meta charset = \"utf-8\">\n" +
                        "      <meta name = \"viewport\" content = \"width = device-width, \n" +
                        "         initial-scale = 1.0, maximum-scale = 1.0, user-scalable = no\">    \n" +
                        "\t\n" +
                        "      <script src = \"/jquery/src/flickerplate/js/min/jquery-v1.10.2.min.js\" \n" +
                        "         type = \"text/javascript\">\n" +
                        "      </script>\n" +
                        "\t\t\t\n" +
                        "      <script src = \"/jquery/src/flickerplate/js/min/modernizr-custom-v2.7.1.min.js\" \n" +
                        "         type = \"text/javascript\">\n" +
                        "      </script>\n" +
                        "\t\t\t\n" +
                        "      <script src = \"/jquery/src/flickerplate/js/min/hammer-v2.0.3.min.js\"\n" +
                        "         type = \"text/javascript\">\n" +
                        "      </script>\n" +
                        "\n" +
                        "      <link href = \"/jquery/src/flickerplate/css/flickerplate.css\"  \n" +
                        "         type = \"text/css\" rel = \"stylesheet\">\n" +
                        "\t\t\t\n" +
                        "      <script src = \"/jquery/src/flickerplate/js/min/flickerplate.min.js\" \n" +
                        "         type = \"text/javascript\">\n" +
                        "      </script>\t\n" +
                        "\t\n" +
                        "      <script>\n" +
                        "         $(function(){\n" +
                        "            $('.flicker-example').flickerplate({\n" +
                        "               auto_flick        : true,\n" +
                        "               auto_flick_delay  : 8,\n" +
                        "               flick_animation   : 'transform-slide'\n" +
                        "            });\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "\n" +
                        "      <link href = \"/jquery/src/flickerplate/css/demo.css\"  \n" +
                        "         type = \"text/css\" rel = \"stylesheet\">\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div class = \"flicker-example\">\n" +
                        "         <ul>\n" +
                        "            <li data-background = \"https://genblock.com/wp-content/uploads/2015\n" +
                        "               /05/download-circles-abstract-wallpaper-\n" +
                        "               abstract-photo-abstract-wallpaper.jpg\">\n" +
                        "\t\t\t\t\t\n" +
                        "               <img src = \"https://www.shrcreation.com/about/images/david.jpg\" \n" +
                        "                  style = \"margin-left: 428px;\">\n" +
                        "\t\t\t\t\t\t\n" +
                        "               <div class = \"flick-title\">David</div>\n" +
                        "\t\t\t\t\t\n" +
                        "               <div class = \"flick-sub-text\">\n" +
                        "                  Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source.\n" +
                        "               </div>\n" +
                        "\t\t\t\t\t\n" +
                        "            </li>\n" +
                        "            <li data-background = \"https://genblock.com/wp-content/uploads/2015\n" +
                        "               /05/download-circles-abstract-wallpaper-\n" +
                        "               abstract-photo-abstract-wallpaper.jpg\">\n" +
                        "\t\t\t\t\t\n" +
                        "               <img src = \"https://www.shrcreation.com/about/images/lucy.jpg\" \n" +
                        "                  style = \"margin-left: 428px;\">\n" +
                        "\t\t\t\t\t\t\n" +
                        "               <div class = \"flick-title\">Lucy</div>\n" +
                        "\t\t\t\t\t\n" +
                        "               <div class = \"flick-sub-text\">\n" +
                        "                  Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source.\n" +
                        "               </div>\n" +
                        "            </li>\n" +
                        "            <li data-background = \"https://genblock.com/wp-content/uploads/2015\n" +
                        "               /05/download-circles-abstract-wallpaper-\n" +
                        "               abstract-photo-abstract-wallpaper.jpg\">\n" +
                        "\t\t\t\t\t\n" +
                        "               <img src = \"https://www.shrcreation.com/about/images/emma.jpg\" \n" +
                        "                  style = \"margin-left: 428px;\">\n" +
                        "\t\t\t\t\t\t\n" +
                        "               <div class = \"flick-title\">Emma</div>\n" +
                        "\t\t\t\t\t\n" +
                        "               <div class = \"flick-sub-text\">\n" +
                        "                  Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source.\n" +
                        "               </div>\n" +
                        "            </li>\n" +
                        "         </ul>\n" +
                        "      </div>\n" +
                        "      \n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Multiscroll",
                "multiscroll.js is a jQuery plugin for creating split pages with two vertical scrolling panels.\n" +
                        "\n" +
                        "A Simple of multiscroll example as shown below −",
                "<!DOCTYPE html>\n" +
                        "<html xmlns = \"https://www.w3.org/1999/xhtml\">\n" +
                        "   <head>\n" +
                        "      <meta http-equiv = \"Content-Type\" content = \"text/html; charset = utf-8\" />\t\n" +
                        "      <title>multiscroll.js - split multi-scrolling pages plugin</title>\n" +
                        "\t\t\n" +
                        "      <link rel = \"stylesheet\" type = \"text/css\" \n" +
                        "         href = \"/jquery/src/multiscroller/jquery.multiscroll.css\" />\t\t\n" +
                        "      <link rel = \"stylesheet\" type = \"text/css\" \n" +
                        "         href = \"/jquery/src/multiscroller/examples.css\" />\t\n" +
                        "\t\t\t\n" +
                        "      <script \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"/jquery/src/multiscroller/jquery.easings.min.js\">\n" +
                        "      </script>\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"/jquery/src/multiscroller/jquery.multiscroll.js\">\n" +
                        "      </script>\n" +
                        "\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         $(document).ready(function() {\n" +
                        "            $('#myContainer').multiscroll({\n" +
                        "               sectionsColor: ['#1bbc9b', '#4BBFC3', '#7BAABE'],\n" +
                        "               anchors: ['first', 'second', 'third'],\n" +
                        "               menu: '#menu',\n" +
                        "               navigation: true,\n" +
                        "               navigationTooltips: ['One', 'Two', 'Three'],\n" +
                        "               loopBottom: true,\n" +
                        "               loopTop: true\n" +
                        "            });\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <ul id = \"menu\">\n" +
                        "         <li data-menuanchor = \"first\"><a href = \"#first\">First slide</a></li>\n" +
                        "         <li data-menuanchor = \"second\"><a href = \"#second\">Second slide</a></li>\n" +
                        "         <li data-menuanchor = \"third\"><a href = \"#third\">Third slide</a></li>\n" +
                        "      </ul>\n" +
                        "\n" +
                        "      <div id = \"myContainer\">\n" +
                        "         <div class = \"ms-left\">\n" +
                        "\t\t\t\n" +
                        "            <div class = \"ms-section\" id = \"left1\">\n" +
                        "              <h1>Left 1</h1>\n" +
                        "            </div>\n" +
                        "\n" +
                        "            <div class = \"ms-section\" id = \"left2\">\n" +
                        "               <h1>Left 2 </h1>\n" +
                        "            </div>\n" +
                        "\n" +
                        "            <div class = \"ms-section\" id = \"left3\">\n" +
                        "               <h1>Left 3</h1>\n" +
                        "            </div>\n" +
                        "\t\t\t\t\n" +
                        "         </div>\n" +
                        "\t\n" +
                        "         <div class = \"ms-right\">\n" +
                        "\t\t\t\n" +
                        "            <div class = \"ms-section\" id = \"right1\">\n" +
                        "               <h1>Right 1</h1>\n" +
                        "            </div>\n" +
                        "\n" +
                        "            <div class = \"ms-section\" id = \"right2\">\n" +
                        "               <h1>Right 2</h1>\n" +
                        "            </div>\n" +
                        "\n" +
                        "            <div class = \"ms-section\" id = \"right3\">\n" +
                        "               <h1>Right 3</h1>\n" +
                        "            </div>\n" +
                        "\t\t\t\t\n" +
                        "         </div>\n" +
                        "      </div>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Slidebar",
                "Slidebars is a jQuery plugin for quickly and easily implementing app style off-canvas menus and sidebars into your website.\n" +
                        "\n" +
                        "A Simple of slidebar example as shown below −",
                "<!doctype html>\n" +
                        "<html>\n" +
                        "   \n" +
                        "   <head>\n" +
                        "      <title>Slidebars Animation Styles</title>\n" +
                        "      <meta name = \"viewport\" content = \"width = device-width, \n" +
                        "         initial-scale = 1.0, minimum-scale = 1.0, \n" +
                        "         maximum-scale = 1.0, user-scalable = no\">\n" +
                        "      <link rel = \"stylesheet\" href = \"slidebars.css\">\n" +
                        "      <link rel = \"stylesheet\" href = \"example-styles.css\">\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div id = \"sb-site\">\n" +
                        "         <h1>Tutorilaspoint</h1>\n" +
                        "\t\t\t\n" +
                        "         <p>Slidebars is a jQuery plugin for quickly and easily\n" +
                        "            implementing app style off-canvas menus and sidebars into your website.</p>\n" +
                        "\t\t\t\n" +
                        "         <ul>\n" +
                        "            <li class = \"sb-toggle-left\">Click here for slider</li> \n" +
                        "         </ul>\n" +
                        "      </div>\n" +
                        "\t\t\n" +
                        "      <div class = \"sb-slidebar sb-left sb-style-push\">\n" +
                        "         <p>Android</p>\n" +
                        "         <hr/>\n" +
                        "         <p>Java</p>\n" +
                        "         <hr/>\n" +
                        "         <p>CSS</p>\n" +
                        "         <hr/>\n" +
                        "         <p>PHP</p>\n" +
                        "         <hr/>\n" +
                        "      </div>\n" +
                        "\t\n" +
                        "      <script \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\">\n" +
                        "      </script>\t\n" +
                        "      <script src = \"slidebars.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script>\n" +
                        "         (function($) {\n" +
                        "            $(document).ready(function() {\n" +
                        "               $.slidebars();\n" +
                        "            });\n" +
                        "         }) (jQuery);\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l8 = new LearnDetailsModel(
                "Rowgrid",
                "Rowgrid.js is a jQuery plugin for showing images in a row.\n" +
                        "\n" +
                        "A Simple of rowgrid example as shown below −",
                "<!doctype html>\n" +
                        "<html lang = \"en\">\n" +
                        "   <head>\n" +
                        "      <meta charset = \"UTF-8\">\n" +
                        "\t\t\n" +
                        "      <style>\n" +
                        "         .container:before,\n" +
                        "         .container:after {\n" +
                        "            content: \"\";\n" +
                        "            display: table;\n" +
                        "         }\n" +
                        "         .container:after {\n" +
                        "            clear: both;\n" +
                        "         }\n" +
                        "         .item {\n" +
                        "            float: left;\n" +
                        "            margin-bottom: 15px; \n" +
                        "         }\n" +
                        "         .item img {\n" +
                        "            max-width: 100%;\n" +
                        "            max-height: 100%;\n" +
                        "            vertical-align: bottom;\n" +
                        "         }\n" +
                        "         .first-item {\n" +
                        "            clear: both;\n" +
                        "         }\n" +
                        "         .last-row, .last-row ~ .item {\n" +
                        "            margin-bottom: 0;\n" +
                        "         }\n" +
                        "      </style>\n" +
                        "\t\t\n" +
                        "      <script \n" +
                        "         src = \"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "      <script src = \"/jquery/src/rowgrid/jquery.row-grid.js\">\n" +
                        "      </script>\n" +
                        "\t\t\n" +
                        "      <script>\n" +
                        "         $(document).ready(function(){\n" +
                        "            $(\".container\").rowGrid({itemSelector: \".item\", \n" +
                        "               minMargin: 10, maxMargin: 25, firstItemClass: \"first-item\"});\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <!-- Items with example images -->\n" +
                        "\t\t\n" +
                        "      <div class = \"container\">\n" +
                        "        <div class = \"item\">\n" +
                        "            <img src = \"https://www.shrcreation.com/images/75-logo.jpg\" \n" +
                        "               width = \"220\" height = \"200\" />\n" +
                        "         </div>\n" +
                        "\t\t\t\n" +
                        "         <div class = \"item\">\n" +
                        "            <img src = \n" +
                        "               \"https://www.shrcreation.com/images/absolute-classes-free.jpg\" \n" +
                        "               width = \"180\" height = \"200\" />\n" +
                        "         </div>\n" +
                        "\t\t\t\n" +
                        "         <div class = \"item\">\n" +
                        "            <img src = \"https://www.shrcreation.com/images/absolute-classes-latest-technologies.jpg\" \n" +
                        "               width = \"250\" height = \"200\" />\n" +
                        "         </div>\n" +
                        "\t\t\t\n" +
                        "         <div class = \"item\">\n" +
                        "            <img src = \"https://www.shrcreation.com/images/absolute-classes.jpg\" \n" +
                        "               width = \"200\" height = \"200\" />\n" +
                        "         </div>\n" +
                        "\t\t\t\n" +
                        "         <div class = \"item\">\n" +
                        "            <img src = \"https://lorempixel.com/240/200?5\" \n" +
                        "               width = \"240\" height = \"200\" />\n" +
                        "         </div>\n" +
                        "\t\t\t\n" +
                        "         <div class = \"item\">\n" +
                        "            <img src = \"https://lorempixel.com/210/200?6\" \n" +
                        "               width = \"210\" height = \"200\" />\n" +
                        "         </div>\n" +
                        "\t\t\t\n" +
                        "         <div class = \"item\">\n" +
                        "            <img src = \"https://lorempixel.com/260/200?21\" \n" +
                        "               width = \"260\" height = \"200\" />\n" +
                        "         </div>\n" +
                        "\t\t\t\n" +
                        "         <div class = \"item\">\n" +
                        "            <img src = \"https://lorempixel.com/220/200?22\" \n" +
                        "               width = \"220\" height = \"200\" />\n" +
                        "         </div>\n" +
                        "\t\t\t\n" +
                        "         <div class = \"item\">\n" +
                        "            <img src = \"https://lorempixel.com/220/200?1\" \n" +
                        "               width = \"220\" height = \"200\" />\n" +
                        "         </div>\n" +
                        "\n" +
                        "         <div class = \"item\">\n" +
                        "            <img src = \"https://lorempixel.com/180/200?2\" \n" +
                        "               width = \"180\" height = \"200\" />\n" +
                        "         </div>\n" +
                        "\n" +
                        "         <div class = \"item\">\n" +
                        "            <img src = \"https://lorempixel.com/250/200?3\" \n" +
                        "               width = \"250\" height = \"200\" />\n" +
                        "         </div>\n" +
                        "\n" +
                        "         <div class = \"item\">\n" +
                        "            <img src = \"https://lorempixel.com/200/200?4\" \n" +
                        "               width = \"200\" height = \"200\" />\n" +
                        "         </div>\n" +
                        "\n" +
                        "         <div class = \"item\">\n" +
                        "            <img src = \"https://lorempixel.com/240/200?5\" \n" +
                        "               width = \"240\" height = \"200\" />\n" +
                        "         </div>\n" +
                        "\n" +
                        "         <div class = \"item\">\n" +
                        "            <img src = \"https://lorempixel.com/210/200?6\" \n" +
                        "               width = \"210\" height = \"200\" />\n" +
                        "         </div>\n" +
                        "\n" +
                        "         <div class = \"item\">\n" +
                        "            <img src = \"https://lorempixel.com/200/200?7\" \n" +
                        "               width = \"200\" height = \"200\" />\n" +
                        "         </div>\n" +
                        "\n" +
                        "         <div class = \"item\">\n" +
                        "            <img src = \"https://lorempixel.com/190/200?8\" \n" +
                        "               width = \"190\" height = \"200\" />\n" +
                        "         </div>\n" +
                        "\n" +
                        "         <div class = \"item\">\n" +
                        "            <img src = \"https://lorempixel.com/260/200?9\" \n" +
                        "               width = \"260\" height = \"200\" />\n" +
                        "         </div>\n" +
                        "\n" +
                        "         <div class = \"item\">\n" +
                        "            <img src = \"https://lorempixel.com/220/200?10\" \n" +
                        "               width = \"220\" height = \"200\" />\n" +
                        "         </div> \n" +
                        "\n" +
                        "      </div>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l9 = new LearnDetailsModel(
                "Progressbar",
                "Progressbar.js is a jQuery plugin for showing progress bar\n" +
                        "\n" +
                        "A Simple of progressbar example as shown below −",
                "<!doctype html>\n" +
                        "<html>\n" +
                        "   <head>\n" +
                        "      <meta charset = \"utf-8\">\n" +
                        "      <meta http-equiv = \"X-UA-Compatible\" content = \"IE = edge,chrome = 1\">\n" +
                        "      <meta name = \"viewport\" content = \"width = device-width, \n" +
                        "         initial-scale = 1\">\n" +
                        "\t\n" +
                        "      <link href = \"https://www.jqueryscript.net/css/jquerysctipttop.css\" \n" +
                        "         rel = \"stylesheet\" type = \"text/css\">\n" +
                        "      <link rel = \"stylesheet\" href = \"jQuery-plugin-progressbar.css\">\n" +
                        "\t\t\n" +
                        "      <script src = \"https://code.jquery.com/jquery-2.1.4.min.js\"></script>\n" +
                        "      <script src = \"jQuery-plugin-progressbar.js\"></script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div class = \"progress-bar position\"></div>\n" +
                        "      <div class = \"progress-bar position\" data-percent = \"40\" \n" +
                        "         data-duration = \"1000\" data-color = \"#ccc,yellow\"></div>\n" +
                        "      <div class = \"progress-bar position\" data-percent = \"90\" \n" +
                        "         data-color = \"#a456b1,#12b321\"></div>\n" +
                        "\t\t\t\n" +
                        "      <input type = \"submit\" value = \"reload\">\n" +
                        "\t\t\n" +
                        "      <script>\n" +
                        "         $(\".progress-bar\").loading();\n" +
                        "\t\t\t\n" +
                        "         $('input').on('click', function () {\n" +
                        "            $(\".progress-bar\").loading();\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "      \n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l10 = new LearnDetailsModel(
                "Slideshow",
                "Slideshow.js is a jQuery plugin for quickly and easily implementing slide show of images or videos into your website.\n" +
                        "\n" +
                        "A Simple of slide show example as shown below −",
                "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \n" +
                        "   \"https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n" +
                        "\n" +
                        "<html xmlns = \"https://www.w3.org/1999/xhtml\" xml:lang = \"en\" lang = \"en\">\n" +
                        "   \n" +
                        "   <head>\n" +
                        "      <meta http-equiv = \"content-type\" content = \"text/html; charset = UTF-8\" />\n" +
                        "\t\t\n" +
                        "      <link rel = \"stylesheet\" href = \"css/supersized.css\" type = \"text/css\" \n" +
                        "         media = \"screen\" />\n" +
                        "      \n" +
                        "      <link rel = \"stylesheet\" href = \"theme/supersized.shutter.css\" \n" +
                        "         type = \"text/css\" media = \"screen\" />\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js\">\n" +
                        "         </script>\n" +
                        "      <script type = \"text/javascript\" src =\" js/jquery.easing.min.js\"></script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\" src =\" js/supersized.3.2.7.min.js\"></script>\n" +
                        "      <script type = \"text/javascript\" src = \"theme/supersized.shutter.min.js\"></script>\n" +
                        "\t\t\n" +
                        "      <script type = \"text/javascript\">\n" +
                        "         jQuery(function($){\n" +
                        "            $.supersized({\n" +
                        "               slideshow         :  1,\t\t\t\n" +
                        "               autoplay          :  1,\t\t\t\n" +
                        "               start_slide       :  1,\t\t\t\n" +
                        "               stop_loop         :  0,\t\t\t\n" +
                        "               random            :  0,\t\t\t\n" +
                        "               slide_interval    :  3000,\t\t\n" +
                        "               transition        :  6, \t\t\t\n" +
                        "               transition_speed  :  1000,\t\t\n" +
                        "               new_window        :  1,\t\t\t\n" +
                        "               pause_hover       :  0,\t\t\t\n" +
                        "               keyboard_nav      :  1,\t\t\t\n" +
                        "               performance       :  1,\t\t\t\n" +
                        "               image_protect     :  1,\t\t\t\n" +
                        "                                                \n" +
                        "               min_width         :  0,\t\t\t\n" +
                        "               min_height        :  0,\t\t\t\n" +
                        "               vertical_center   :  1,\t\t\t\n" +
                        "               horizontal_center :  1,\t\t\t\n" +
                        "               fit_always        :  0,\t\t\t\n" +
                        "               fit_portrait      :  1,\t\t\t\n" +
                        "               fit_landscape     :  0,\t\t\t\n" +
                        "               \n" +
                        "               slide_links       :  'blank',\t\n" +
                        "               thumb_links       :  1,\t\t\t\n" +
                        "               thumbnail_navigation    :   0,\t\t\t\n" +
                        "               slides            :  \t\n" +
                        "               [\t\t\t\n" +
                        "                  {\n" +
                        "                     image : 'https://buildinternet.s3.amazonaws.com/projects/supersized/3.2/slides/kazvan-1.jpg', \n" +
                        "                        title : 'Sample demo', \n" +
                        "                        thumb : 'https://buildinternet.s3.amazonaws.com/projects/supersized/3.2/thumbs/kazvan-1.jpg', \n" +
                        "                        url : 'https://www.shrcreation.com'\n" +
                        "                  },\n" +
                        "                  {\n" +
                        "                     image : 'https://buildinternet.s3.amazonaws.com/projects/supersized/3.2/slides/kazvan-3.jpg', \n" +
                        "                        title : 'Sample demo', \n" +
                        "                        thumb : 'https://buildinternet.s3.amazonaws.com/projects/supersized/3.2/thumbs/kazvan-3.jpg', \n" +
                        "                        url : 'https://www.shrcreation.com'\n" +
                        "                  },\n" +
                        "                  {\n" +
                        "                     image : 'https://buildinternet.s3.amazonaws.com/projects/supersized/3.2/slides/wojno-1.jpg', \n" +
                        "                        title : 'Sample demo', \n" +
                        "                        thumb : 'https://buildinternet.s3.amazonaws.com/projects/supersized/3.2/thumbs/wojno-1.jpg', \n" +
                        "                        url : 'https://www.shrcreation.com'\n" +
                        "                  },\n" +
                        "                  {\n" +
                        "                     image : 'https://buildinternet.s3.amazonaws.com/projects/supersized/3.2/slides/wojno-2.jpg', \n" +
                        "                        title : 'Sample demo', \n" +
                        "                        thumb : 'https://buildinternet.s3.amazonaws.com/projects/supersized/3.2/thumbs/wojno-2.jpg', \n" +
                        "                        url : 'https://www.shrcreation.com'\n" +
                        "                  },\n" +
                        "                  {\n" +
                        "                     image : 'https://buildinternet.s3.amazonaws.com/projects/supersized/3.2/slides/wojno-3.jpg', \n" +
                        "                        title : 'Sample demo', \n" +
                        "                        thumb : 'https://buildinternet.s3.amazonaws.com/projects/supersized/3.2/thumbs/wojno-3.jpg', \n" +
                        "                        url : 'https://www.shrcreation.com'},\n" +
                        "               ],\n" +
                        "               progress_bar      :\t1,\t\t\t\n" +
                        "               mouse_scrub       :\t0\n" +
                        "            });\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <style type = \"text/css\">\n" +
                        "      ul#demo-block{ margin:0 15px 15px 15px; }\n" +
                        "      ul#demo-block li{ margin:0 0 10px 0; padding:10px; display:inline; \n" +
                        "         float:left; clear:both; color:#aaa; background:url('img/bg-black.png'); \n" +
                        "         font:11px Helvetica, Arial, sans-serif; }\n" +
                        "      ul#demo-block li a{ color:#eee; font-weight:bold; }\n" +
                        "   </style>\n" +
                        "\n" +
                        "   <body>\n" +
                        "      <div id = \"prevthumb\"></div>\n" +
                        "      <div id = \"nextthumb\"></div>\n" +
                        "      \n" +
                        "      <a id = \"prevslide\" class = \"load-item\"></a>\n" +
                        "      <a id = \"nextslide\" class = \"load-item\"></a>\n" +
                        "      \n" +
                        "      <div id = \"thumb-tray\" class = \"load-item\">\n" +
                        "         <div id = \"thumb-back\"></div>\n" +
                        "         <div id = \"thumb-forward\"></div>\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <div id = \"progress-back\" class = \"load-item\">\n" +
                        "         <div id = \"progress-bar\"></div>\n" +
                        "      </div>\n" +
                        "      \n" +
                        "      <div id = \"controls-wrapper\" class = \"load-item\">\n" +
                        "         <div id = \"controls\">\n" +
                        "            <a id = \"play-button\"><img id = \"pauseplay\" src = \"img/pause.png\"/></a>\n" +
                        "\n" +
                        "            <div id = \"slidecounter\">\n" +
                        "               <span class = \"slidenumber\"></span> / <span class = \"totalslides\"></span>\n" +
                        "            </div>\n" +
                        "\n" +
                        "            <div id = \"slidecaption\"></div>\n" +
                        "\n" +
                        "            <a id = \"tray-button\"><img id = \"tray-arrow\" src = \"img/button-tray-up.png\"/></a>\n" +
                        "\n" +
                        "            <ul id = \"slide-list\"></ul>\n" +
                        "         </div>\n" +
                        "      </div>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l11 = new LearnDetailsModel(
                "Drawsvg",
                "Drawsvg.js is a jQuery plugin to draw svg images\n" +
                        "\n" +
                        "A Simple of drawsvg example as shown below −",
                "<!DOCTYPE html>\n" +
                        "<html lang = \"en\">\n" +
                        "   <head>\n" +
                        "      <meta charset = \"UTF-8\">\n" +
                        "      <link rel = \"shortcut icon\" type = \"image/x-icon\" href = \"favicon.ico\">\n" +
                        "      <link rel = \"stylesheet\" \n" +
                        "         href = \"https://fonts.googleapis.com/css?family=Open+Sans:400,600\">\n" +
                        "      <link rel = \"stylesheet\" href = \"style.css\">\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div class = \"intro\">\n" +
                        "         <div class = \"container\">\n" +
                        "            <div class = \"overlay\">\n" +
                        "               <div class = \"inner\">\n" +
                        "                  <h1>jQuery DrawSVG Sample</h1>\n" +
                        "\n" +
                        "                  <div class = \"items-wrapper\">\n" +
                        "                     <div class =\"item active\">\n" +
                        "                        <svg viewBox = \"0 0 201 146\" class = \"svgClass\" \n" +
                        "                           style = \"background-color:#ffffff00\" \n" +
                        "                              xmlns = \"https://www.w3.org/2000/svg\" width = \"201\"\n" +
                        "                              height = \"146\">\n" +
                        "\t\t\t\t\t\t\t\t\t\n" +
                        "                           <g stroke = \"#FFF\" stroke-width = \"1\" fill = \"none\">\n" +
                        "                              <path d = \"M200.5 128.586c0 9.302-7.678\n" +
                        "                                 16.914-17.06 16.914H17.56C8.18 145.5.5 \n" +
                        "                                 137.888.5 128.586V29.414C.5 20.112 8.178 \n" +
                        "                                 12.5 17.56 12.5h165.88c9.382 0 17.06 \n" +
                        "                                 7.612 17.06 16.914v99.172z\"/>\n" +
                        "\t\t\t\t\t\t\t\t\t\t\t\n" +
                        "                              <path d = \"M183.828 80.118c0 26.467-21.644 \n" +
                        "                                 47.924-48.34 47.924-26.698 \n" +
                        "                                 0-48.342-21.457-48.342-47.924s21.644-47.924 \n" +
                        "                                 48.34-47.924c26.698 0 48.342 21.457 48.342\n" +
                        "                                 47.924z\"/>\n" +
                        "\t\t\t\t\t\t\t\t\t\t\t\n" +
                        "                              <path d = \"M171.98 80.118c0 19.978-16.338\n" +
                        "                                 36.177-36.493 36.177-20.15 \n" +
                        "                                 0-36.49-16.2-36.49-36.177 0-19.98 \n" +
                        "                                 16.34-36.177 36.49-36.177 20.155 0 \n" +
                        "                                 36.494 16.2 36.494 36.178z\"/>\n" +
                        "\t\t\t\t\t\t\t\t\t\t\t\n" +
                        "                              <path d = \"M50.18 48.637c0 6.49-5.304 \n" +
                        "                                 11.747-11.852 11.747-6.543\n" +
                        "                                 0-11.847-5.258-11.847-11.747  0-6.488 \n" +
                        "                                 5.305-11.746 11.848-11.746 6.548 0 11.852 \n" +
                        "                                 5.26 11. 852 11.747z\"/>\n" +
                        "\t\t\t\t\t\t\t\t\t\t\t\n" +
                        "                              <path d = \"M17.928 39.877c3.41-7.835 \n" +
                        "                                 11.258-13.305 20.416-13.305 9.16 0 17.006 \n" +
                        "                                 5.47 20.416 13.305\"/>\n" +
                        "\t\t\t\t\t\t\t\t\t\t\t\n" +
                        "                              <path d = \"M46 12V4H26v8\"/>\n" +
                        "                              <path d = \"M94.833 12l11.5-11.5h59.5l11.5 11.5\"/>\n" +
                        "                              <path d = \"M26.333 92.5h35.5\"/>\n" +
                        "                              <path d = \"M26.333 105.5h43\"/>\n" +
                        "                              <path d = \"M26.333 117.5h52\"/>\n" +
                        "                           </g>\n" +
                        "\t\t\t\t\t\t\t\t\t\n" +
                        "                        </svg>\n" +
                        "                     </div>\n" +
                        "\n" +
                        "                     <div class = \"item\">\n" +
                        "                        <svg viewBox = \"0 0 207 105\" style = \"background-color:#ffffff00\" \n" +
                        "                           xmlns = \"https://www.w3.org/2000/svg\" width = \"207\" \n" +
                        "                           height = \"105\">\n" +
                        "\t\t\t\t\t\t\t\t\n" +
                        "                           <g stroke = \"#FFF\" stroke-width = \"1\" fill = \"none\">\n" +
                        "                              <path d = \"M127 63.496C127 85.306 144.455 \n" +
                        "                                 103 165.998 103 187.538 103 205 85.306 \n" +
                        "                                 205 63.496 205 41.682 187.537 24 165.998\n" +
                        "                                 24 144.455 24 127 41.682 127 63.496z\"/>\n" +
                        "\t\t\t\t\t\t\t\t\t\t\t\n" +
                        "                              <path d = \"M195 63.497C195 47.206 182.015 34 166 34\"/>\n" +
                        "\t\t\t\t\t\t\t\t\t\t\n" +
                        "                              <path d = \"M2 63.496C2 85.306 19.455 103 \n" +
                        "                                 41.002 103 62.542 103 80 85.306 80 63.496 \n" +
                        "                                 80 41.682 62.54 24 41.002 24 19.455 24 2\n" +
                        "                                 41.682 2 63.496z\"/>\n" +
                        "\t\t\t\t\t\t\t\t\t\t\t\n" +
                        "                              <path d = \"M64.296 22.732C57.656 18.094 \n" +
                        "                                 47.492 16 41.002 16c-6.49 0-12.675 \n" +
                        "                                 1.33-18.3 3.732-5.622 2.404-10.686 \n" +
                        "                                 5.88-14.938 10.178\"/>\n" +
                        "\t\t\t\t\t\t\t\t\t\t\t\n" +
                        "                              <path d = \"M159.715 63.576c0 3.634 2.902 \n" +
                        "                                 6.575 6.49 6.575 3.582 0 6.484-2.94 \n" +
                        "                                 6.484-6.574 0-3.63-2.903-6.575-6.486-6.575-3.587\n" +
                        "                                 0-6.49 2.946-6.49 6.576z\"/>\n" +
                        "\t\t\t\t\t\t\t\t\t\t\t\n" +
                        "                              <path d = \"M34.873 64.032c0 3.63 2.907 \n" +
                        "                                 6.575 6.494 6.575 3.578 0 6.485-2.945 \n" +
                        "                                 6.485-6.575  0-3.635-2.907-6.575-6.485-6.575-3.587 \n" +
                        "                                 0-6.494 2.94-6.494 6.575z\"/>\n" +
                        "\t\t\t\t\t\t\t\t\t\t\t\n" +
                        "                              <path d = \"M163.25 57.026L141.773 3\"/>\n" +
                        "                              <path d = \"M98 63.5H48\"/>\n" +
                        "                              <path d = \"M101.73 57.63L70.5 14.013\"/>\n" +
                        "                              <path d = \"M70.49 14.5h76.646v-.206\"/>\n" +
                        "                              <path d = \"M139.134 14.505L108.468 57.95\"/>\n" +
                        "                              <path d = \"M70.894 15.05L42.834 57.05\"/>\n" +
                        "                              <path d = \"M70.5 14V3\"/>\n" +
                        "                              <path d = \"M141.427 3.23s19.83-7.71 19.83 6.344\"/>\n" +
                        "\t\t\t\t\t\t\t\t\t\t\n" +
                        "                              <path d = \"M97.816 62.52c0 3.576 2.86 6.475 \n" +
                        "                                 6.39 6.475s6.392-2.9 \n" +
                        "                                 6.392-6.476c0-3.577-2.86-6.476-6.39\n" +
                        "                                 -6.476s-6.392 2.9-6.392 6.476z\"/>\n" +
                        "\t\t\t\t\t\t\t\t\t\t\t\n" +
                        "                              <path d = \"M106.642 69.26l2.913 11.044\"/>\n" +
                        "                              <path d = \"M105 83l10-5\"/>\n" +
                        "                              <path d = \"M62.5 3.5h18\"/>\n" +
                        "                           </g>\n" +
                        "\t\t\t\t\t\t\t\t\t\n" +
                        "                        </svg>\n" +
                        "                     </div>\n" +
                        "\n" +
                        "                     <div class = \"item\">\n" +
                        "                        <svg viewBox = \"0 0 201 116\" style = \"background-color:#ffffff00\" \n" +
                        "                           xmlns = \"https://www.w3.org/2000/svg\" width = \"201\" \n" +
                        "                           height = \"116\">\n" +
                        "\t\t\t\t\t\t\t\t\t\n" +
                        "                           <g stroke = \"#FFF\" stroke-width = \"1\" fill = \"none\">\n" +
                        "                              <path d = \"M19.5 101.5V6.45C19.5 3.176 23.12.5 \n" +
                        "                                 26.402.5H175.53c3.282 0 5.97 2.677 5.97\n" +
                        "                                 5.95v95.05\"/>\n" +
                        "\t\t\t\t\t\t\t\t\t\t\t\n" +
                        "                              <path d = \"M171.5 89.5h-140v-77h140v77z\"/>\n" +
                        "\t\t\t\t\t\t\t\t\t\t\n" +
                        "                              <path d = \"M200.5 107.526c0 1.635-1.344 \n" +
                        "                                 2.974-2.985 2.974H3.485c-1.64 \n" +
                        "                                 0-2.985-1.34-2.985-2.974v-3.052c0-1.635\n" +
                        "                                 1.344-2.974 2.985-2.974h194.03c1.64 0 2.985 \n" +
                        "                                 1.34 2.9852.974v3.052z\"/>\n" +
                        "\t\t\t\t\t\t\t\t\t\t\t\n" +
                        "                              <path d = \"M1 110l10.5 5.5\"/>\n" +
                        "                              <path d = \"M11.604 115.5H189.46\"/>\n" +
                        "                              <path d = \"M189.5 115.5l9.5-5.5\"/>\n" +
                        "                              <path d = \"M99.5 7.5h5\"/>\n" +
                        "                              <path d = \"M138.5 12.5l28 28\"/>\n" +
                        "                              <path d = \"M148.5 12.5l18 18\"/>\n" +
                        "                              <path d = \"M159.5 12.5l7 6\"/>\n" +
                        "                           </g>\n" +
                        "\t\t\t\t\t\t\t\t\t\n" +
                        "                        </svg>\n" +
                        "                     </div>\n" +
                        "\n" +
                        "                     <div class = \"item\">\n" +
                        "                        <svg viewBox = \"0 0 200 155\" style = \"background-color:#ffffff00\" \n" +
                        "                           xmlns = \"https://www.w3.org/2000/svg\" width = \"200\" \n" +
                        "                           height = \"155\">\n" +
                        "\t\t\t\t\t\t\t\t\t\n" +
                        "                           <g stroke = \"#FFF\" stroke-width = \"1\" fill = \"none\">\n" +
                        "                              <path d=\"M161.996 151.39l-33.97-27.178-45.01 \n" +
                        "                                 30.576-35.67-27.603L.36 154.245 38.662 20.04 \n" +
                        "                                 80.893 4.034l39.066 17.41L161.995.213l37.792 \n" +
                        "                                 22.932-37.792 128.246z\"/>\n" +
                        "\t\t\t\t\t\t\t\t\t\t\t\n" +
                        "                              <path d = \"M47.346 127.185L80.892 4.035\"/>\n" +
                        "                              <path d = \"M83.015 154.788l36.942-133.343\"/>\n" +
                        "                              <path d = \"M128.025 124.212l33.97-124\"/>\n" +
                        "                              <path d = \"M46.278 23.935L32.29 75.605\"/>\n" +
                        "                              <path d = \"M95.802 45.718L81.19 97.225\"/>\n" +
                        "                              <path d = \"M106.91 33.115l-22.26 81.39\"/>\n" +
                        "\t\t\t\t\t\t\t\t\t\t\n" +
                        "                              <path d = \"M176.768 46.665c0 3.523-2.85\n" +
                        "                                 6.376-6.366 6.376-3.514 0-6.364-2.852\n" +
                        "                                 -6.364-6.375 0-3.512 2.85-6.37\n" +
                        "                                 6.364-6.37 3.516 0 6.366 2.858 \n" +
                        "                                 6.366 6.37z\"/>\n" +
                        "\t\t\t\t\t\t\t\t\t\t\t\n" +
                        "                              <path d = \"M180.9 52.392l-10.844 \n" +
                        "                                 19.91-10.394-19.995s-1.143-3.215-1.\n" +
                        "                                 143-5.067c0-6.514 5.273-11.81 11.79-11.81 \n" +
                        "                                 6.508 0 11.782 5.296 11.782 11.81 \n" +
                        "                                 0 1.852-1.192 5.152-1.192 5.152z\"/>\n" +
                        "\t\t\t\t\t\t\t\t\t\t\t\n" +
                        "                              <path d = \"M43.86 92.528c0 3.523-2.85 \n" +
                        "                                 6.376-6.367 6.376-3.514 0-6.364-2.\n" +
                        "                                 853-6.364-6.376 0-3.512 2.85-6.37 \n" +
                        "                                 6.363-6.37 3.517 0 6.366 2.858 \n" +
                        "                                 6.366 6.37z\"/>\n" +
                        "\t\t\t\t\t\t\t\t\t\t\t\n" +
                        "                              <path d = \"M47.99 98.255l-10.843 19.91L26.754 \n" +
                        "                                 98.17s-1.143-3.215-1.\n" +
                        "                                 143-5.067c0-6.514 5.275-11.81 \n" +
                        "                                 11.793-11.81 6.507 0 11.78 5.296 \n" +
                        "                                 11.78 11.81 0 1.852-1.192 \n" +
                        "                                 5.152-1.192 5.152z\"/>\n" +
                        "                           </g>\n" +
                        "\t\t\t\t\t\t\t\t\t\n" +
                        "                        </svg>\n" +
                        "                     </div>\n" +
                        "\t\t\t\t\t\t\t\n" +
                        "                  </div>\n" +
                        "               </div>\n" +
                        "            </div>\n" +
                        "         </div>\n" +
                        "      </div>\n" +
                        "\t\t\n" +
                        "      <div id = \"fb-root\"></div>\n" +
                        "      <script async src = \"//assets.codepen.io/assets/embed/ei.js\">\n" +
                        "      </script>\n" +
                        "      <script src = \"https://cdn.jsdelivr.net/jquery/1.11.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "      <script \n" +
                        "         src = \"https://cdn.jsdelivr.net/jquery.easing/1.3/jquery.easing.1.3.min.js\">\n" +
                        "      </script>\n" +
                        "      <script src = \"jquery.drawsvg.min.js\"></script>\n" +
                        "\t\t\n" +
                        "      <script>\n" +
                        "         $(function() {\n" +
                        "\n" +
                        "            var $doc = $(document),\n" +
                        "            $win = $(window);\n" +
                        "\n" +
                        "            var $intro = $('.intro'),\n" +
                        "            $items = $intro.find('.item'),\n" +
                        "            itemsLen = $items.length,\n" +
                        "\t\t\t\t\n" +
                        "            svgs = $intro.find('svg').drawsvg({\n" +
                        "               callback: animateIntro,\n" +
                        "               easing: 'easeOutQuart'\n" +
                        "            }),\n" +
                        "\t\t\t\t\n" +
                        "            currItem = 0;\n" +
                        "\n" +
                        "            function animateIntro() {\n" +
                        "               $items.removeClass('active').eq( currItem++ % itemsLen \n" +
                        "                  ).addClass('active').find('svg').drawsvg('animate');\n" +
                        "            }\n" +
                        "\n" +
                        "            animateIntro();\n" +
                        "\n" +
                        "            var $header = $('header'),\n" +
                        "            headerOffTop = $header.offset().top,\n" +
                        "            isFixed = false;\n" +
                        "\n" +
                        "            function menu() {\n" +
                        "               if ( $win.scrollTop() >= headerOffTop ) {\n" +
                        "                  if ( !isFixed ) {\n" +
                        "                     isFixed = true;\n" +
                        "                     $header.addClass('affix');\n" +
                        "                  }\n" +
                        "               } else if ( isFixed ) {\n" +
                        "                  isFixed = false;\n" +
                        "                  $header.removeClass('affix');\n" +
                        "               }\n" +
                        "            }\n" +
                        "\n" +
                        "            $win.on('scroll', menu);\n" +
                        "            menu();\n" +
                        "\n" +
                        "            $header.on('click', 'a[href^=\"#\"]', function(e) {\n" +
                        "               e.preventDefault();\n" +
                        "\n" +
                        "               var hash = this.hash,\n" +
                        "               offset = $(hash).offset().top;\n" +
                        "\n" +
                        "               $('body, html').animate({\n" +
                        "                  scrollTop: offset\n" +
                        "               }, 600, 'easeInOutQuart', function() {\n" +
                        "                  document.location.hash = hash;\n" +
                        "               });\n" +
                        "            });\n" +
                        "\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l12 = new LearnDetailsModel(
                "Logosdistort",
                "Logosdistort.js is a jQuery plugin for quickly and easily implementing of mouse over effect on images\n" +
                        "\n" +
                        "A Simple of logosdistort example as shown below −",
                "<!DOCTYPE html>\n" +
                        "<html>\n" +
                        "   <head>\n" +
                        "      <meta name = \"viewport\" content = \"width = device-width, initial-scale = 1.0\">\n" +
                        "      <link rel = \"stylesheet\" \n" +
                        "         href = \"//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css\">\n" +
                        "      <link href = \"assets/css/style.css\" rel = \"stylesheet\" />\n" +
                        "      <link href = \"assets/css/perspectiveRules.css\" rel = \"stylesheet\" />\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body>\n" +
                        "      <div id = \"min-max-tag\"><i class = \"fa fa-chevron-circle-left\"></i></div>\n" +
                        "\n" +
                        "      <div id = \"demo1\">\n" +
                        "         <div id = \"particle-target\" ></div>\n" +
                        "         <img alt = \"logo\" src = \"assets/images/logo.png\" />\n" +
                        "      </div>\n" +
                        "\n" +
                        "      <script \n" +
                        "         src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "      </script>\n" +
                        "      <script src = \"assets/js/jquery.logosDistort.min.js\"></script>\n" +
                        "      <script src = \"assets/js/jquery.particleground.min.js\"></script>\n" +
                        "\t\t\n" +
                        "      <script>\n" +
                        "         var particles = true,\n" +
                        "         particleDensity,\n" +
                        "\t\t\t\n" +
                        "         options = {\n" +
                        "            effectWeight: 1,\n" +
                        "            outerBuffer: 1.08,\n" +
                        "            elementDepth: 220\n" +
                        "         };\n" +
                        "\n" +
                        "         $(document).ready(function() {\n" +
                        "\n" +
                        "            $(\"#demo1\").logosDistort(options);\n" +
                        "\n" +
                        "            if (particles) {\n" +
                        "               particleDensity = window.outerWidth * 7.5;\n" +
                        "               if (particleDensity < 13000) {\n" +
                        "                  particleDensity = 13000;\n" +
                        "               } else if (particleDensity > 20000) {\n" +
                        "                  particleDensity = 20000;\n" +
                        "               }\n" +
                        "               return $('#particle-target').particleground({\n" +
                        "                  dotColor: '#1ec5ee',\n" +
                        "                  lineColor: '#0a4e90',\n" +
                        "                  density: particleDensity.toFixed(0),\n" +
                        "                  parallax: false\n" +
                        "               });\n" +
                        "            }\n" +
                        "         });\n" +
                        "      </script>\n" +
                        "\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l13 = new LearnDetailsModel(
                "Weather",
                "Weather.js is a jQuery plugin to find the information about weather details.\n" +
                        "\n" +
                        "A Simple of Weather.js example as shown below −",
                "<!DOCTYPE html>\n" +
                        "<html lang = \"en\">\n" +
                        "   <head>\n" +
                        "      <meta charset = \"UTF-8\">\n" +
                        "      <meta name = \"viewport\" content = \"width = device-width, \n" +
                        "         initial-scale = 1\">\n" +
                        "      <link rel = \"stylesheet\" \n" +
                        "         href = \"https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css\">\n" +
                        "      <link rel = \"stylesheet\" \n" +
                        "         href = \"https://cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css\">\n" +
                        "      <link href = 'https://fonts.googleapis.com/css?family=Open+Sans:400,300,600,700'\n" +
                        "         rel = 'stylesheet' type = 'text/css'>\n" +
                        "      <link rel = \"stylesheet\" type = \"text/css\" href = \"weather.css\">\n" +
                        "   </head>\n" +
                        "\t\n" +
                        "   <body id = \"weather-background\" class = \"default-weather\">\n" +
                        "      <canvas id = \"rain-canvas\"></canvas>\n" +
                        "      <canvas id = \"cloud-canvas\"></canvas>\n" +
                        "      <canvas id = \"weather-canvas\"></canvas>\n" +
                        "      <canvas id = \"time-canvas\"></canvas>\n" +
                        "      <canvas id = \"lightning-canvas\"></canvas>\n" +
                        "\t\t\n" +
                        "      <div class = \"page-wrap\">\n" +
                        "         <header class = \"search-bar\">\n" +
                        "\t\t\t\n" +
                        "            <p class = \"search-text\">\n" +
                        "               <span class = \"search-location-text\">\n" +
                        "                  What's the weather like in \n" +
                        "                  \n" +
                        "                  <input id = \"search-location-input\" \n" +
                        "                     class = \"search-location-input\" type = \"text\"\n" +
                        "                     placeholder = \"City\"> ?\n" +
                        "               </span>\n" +
                        "            </p>\n" +
                        "\t\t\t\t\t\n" +
                        "            <div class = \"search-location-button-group\">\n" +
                        "               <button id = \"search-location-button\" \n" +
                        "                  class = \"fa fa-search search-location-button search-button\">\n" +
                        "                  </button>\n" +
                        "\t\t\t\t\t\t\n" +
                        "               <!--  -->\n" +
                        "               <button id = \"geo-button\" class = \"geo-button fa\n" +
                        "                  fa-location-arrow search-button\"></button>\n" +
                        "            </div>\n" +
                        "\t\t\t\t\n" +
                        "         </header>\n" +
                        "\n" +
                        "         <div id = \"geo-error-message\" class = \"geo-error-message hide\">\n" +
                        "            <button id = 'close-error' class = 'fa fa-times \n" +
                        "               close-error'></button>Uh oh! It looks like we can't \n" +
                        "               find your location. Please type your city into the search \n" +
                        "               box above!\n" +
                        "         </div>\n" +
                        "\n" +
                        "         <div id = \"front-page-description\" \n" +
                        "\t\t\t   class = \"front-page-description middle\">\n" +
                        "            <h1>Blank Canvas Weather</h1>\n" +
                        "         </div>\n" +
                        "\t\t\t\n" +
                        "         <div class = \"attribution-links hide\" id = \"attribution-links\">\n" +
                        "            <button id = 'close-attribution' \n" +
                        "               class = 'fa fa-times close-attribution'></button>\n" +
                        "\t\t\t\t\t\n" +
                        "            <h3>Icons from <a href = \"https://thenounproject.com/\">\n" +
                        "               Noun Project</a></h3>\n" +
                        "\t\t\t\t\t\n" +
                        "            <ul>\n" +
                        "               <li class = \"icon-attribution\">\n" +
                        "                  <a href = \"https://thenounproject.com/term/cloud/6852/\">\n" +
                        "                  Cloud</a> by Pieter J. Smits</li>\n" +
                        "\t\t\t\t\t\t\n" +
                        "               <li class = \"icon-attribution\">\n" +
                        "                  <a href = \"https://thenounproject.com/term/snow/64/\">\n" +
                        "                  Snow</a> from National Park Service Collection</li>\n" +
                        "\t\t\t\t\t\t\n" +
                        "               <li class = \"icon-attribution\">\n" +
                        "                  <a href = \"https://thenounproject.com/term/drop/11449/\">\n" +
                        "                  Drop</a> Alex Fuller</li>\n" +
                        "\t\t\t\t\t\t\n" +
                        "               <li class = \"icon-attribution\">\n" +
                        "                  <a href = \"https://thenounproject.com/term/smoke/27750/\">\n" +
                        "                  Smoke</a> by Gerardo Martín Martínez</li>\n" +
                        "\t\t\t\t\t\t\n" +
                        "               <li class = \"icon-attribution\">\n" +
                        "                  <a href = \"https://thenounproject.com/term/moon/13554/\">\n" +
                        "                  Moon</a> by Jory Raphael</li>\n" +
                        "\t\t\t\t\t\t\n" +
                        "               <li class = \"icon-attribution\">\n" +
                        "                  <a href = \"https://thenounproject.com/term/warning/18974/\">\n" +
                        "                  Warning</a> by Icomatic</li>\n" +
                        "\t\t\t\t\t\t\n" +
                        "               <li class = \"icon-attribution\">\n" +
                        "                  <a href = \"https://thenounproject.com/term/sun/13545/\">\n" +
                        "                  Sun</a> by Jory Raphael</li>\n" +
                        "\t\t\t\t\t\t\n" +
                        "               <li class = \"icon-attribution\">\n" +
                        "                  <a href = \"https://thenounproject.com/term/windsock/135621/\">\n" +
                        "                  Windsock</a> by Golden Roof</li>\n" +
                        "\t\t\t\t\t\t\n" +
                        "            </ul>\t\t\n" +
                        "         </div>\n" +
                        "\t\t\t\n" +
                        "         <div id = \"weather\" class = \"weather middle hide\">\n" +
                        "            <div class = \"location\" id = \"location\"></div>\n" +
                        "               \n" +
                        "               <div class = \"weather-container\">\n" +
                        "                  <div id = \"temperature-info\" class = \"temperature-info\">\n" +
                        "                     <div class = \"temperature\" id = \"temperature\">\n" +
                        "                     </div>\n" +
                        "                     <div class = \"weather-description\" id = \"weather-description\">\n" +
                        "                     </div>\n" +
                        "                  </div>\n" +
                        "\t\t\t\t\t\t\n" +
                        "                  <div class = \"weather-box\">\n" +
                        "                     <ul class = \"weather-info\" id = \"weather-info\">\n" +
                        "                        <li class = \"weather-item humidity\">Humidity:\n" +
                        "                           <span id = \"humidity\"></span>%</li><!---->\n" +
                        "                        <li class = \"weather-item wind\">Wind: <span \n" +
                        "                           id = \"wind-direction\"></span> <span \n" +
                        "                           id = \"wind\"></span> <span \n" +
                        "                           id = \"speed-unit\"></span></li>\n" +
                        "                     </ul>\n" +
                        "                  </div>\n" +
                        "\t\t\t\t\t\t\n" +
                        "                  <div class = \"temp-change\">\n" +
                        "                     <button id = \"celsius\" \n" +
                        "                        class = \"temp-change-button celsius\">°C\n" +
                        "                        </button><button id = \"fahrenheit\" \n" +
                        "                        class = \"temp-change-button fahrenheit\">\n" +
                        "                        °F</button>\n" +
                        "                  </div>\n" +
                        "\t\t\t\t\t\t\n" +
                        "               </div>\n" +
                        "            </div> \n" +
                        "\t\t\t\t\n" +
                        "         </div>\n" +
                        "\t\t\t\n" +
                        "         <script \n" +
                        "            src = \"https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n" +
                        "            </script>\n" +
                        "         <script src = \"weather.js\">\n" +
                        "      </script>\n" +
                        "      </div>\t\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        list.add(l8);
        list.add(l9);
        list.add(l10);
        list.add(l11);
        list.add(l12);
        list.add(l13);
        return list;
    }
    //Laravel
    //Laravel Introduction
    private static List<LearnDetailsModel> LaravelIntroduction(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is Laravel?",
                "Laravel is an open-source PHP framework, which is robust and easy to understand. It follows a model-view-controller design pattern. Laravel reuses the existing components of different frameworks which helps in creating a web application. The web application thus designed is more structured and pragmatic.\n" +
                        "\n" +
                        "Laravel offers a rich set of functionalities which incorporates the basic features of PHP frameworks like CodeIgniter, Yii and other programming languages like Ruby on Rails. Laravel has a very rich set of features which will boost the speed of web development.\n" +
                        "\n" +
                        "If you are familiar with Core PHP and Advanced PHP, Laravel will make your task easier. It saves a lot time if you are planning to develop a website from scratch. Moreover, a website built in Laravel is secure and prevents several web attacks.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Advantages of Laravel",
                "Creating authorization and authentication systems:\n" +
                        "Every owner of the web application makes sure that unauthorized users do not access secured or paid resources. It provides a simple way of implementing authentication. It also provides a simple way of organizing the authorization logic and control access to resources.\n" +
                        "Integration with tools:\n" +
                        "Laravel is integrated with many tools that build a faster app. It is not only necessary to build the app but also to create a faster app. Integration with the caching back end is one of the major steps to improve the performance of a web app. Laravel is integrated with some popular cache back ends such as Redis, and Memcached.\n" +
                        "Mail service integration:\n" +
                        "Laravel is integrated with the Mail Service. This service is used to send notifications to the user's emails. It provides a clean and simple API that allows you to send the email quickly through a local or cloud-based service of your choice.\n" +
                        "Handling exception and configuration error:\n" +
                        "Handling exception and configuration errors are the major factors on the app's usability. The manners in which the software app handles the errors have a huge impact on the user's satisfaction and the app's usability. The organization does not want to lose their customers, so for them, Laravel is the best choice. In Laravel, error and exception handling is configured in the new Laravel project.\n" +
                        "Automation testing work:\n" +
                        "Testing a product is very important to make sure that the software runs without any errors, bugs, and crashes. We know that automation testing is less time-consuming than manual testing, so automation testing is preferred over the manual testing. Laravel is developed with testing in mind.\n" +
                        "Separation of business logic code from presentation code:\n" +
                        "The separation between business logic code and presentation code allows the HTML layout designers to change the look without interacting with the developers. A bug can be resolved by the developers faster if the separation is provided between the business logic code and presentation code. We know that Laravel follows the MVC architecture, so separation is already done.\n" +
                        "Fixing most common technical vulnerabilities:\n" +
                        "The security vulnerability is the most important example in web application development. An American organization, i.e., OWASP Foundation, defines the most important security vulnerabilities such as SQL injection, cross-site request forgery, cross-site scripting, etc. Developers need to consider these vulnerabilities and fix them before delivery. Laravel is a secure framework as it protects the web application against all the security vulnerabilities.\n" +
                        "Scheduling tasks configuration and management:\n" +
                        "The web app requires some task scheduling mechanism to perform the tasks in time for example, when to send out the emails to the subscribers or when to clean up the database tables at the end of the day. To schedule the tasks, developers need first to create the Cron entry for each task, but Laravel command scheduler defines a command schedule which requires a single entry on the server.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Audience",
                "This tutorial will guide the developers and students who want to learn how to develop a website using Laravel. This tutorial is particularly meant for all those developers who have no prior experience of using Laravel.",
                "",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Prerequisites",
                "Before you start proceeding with this tutorial, we assume that you are familiar with HTML, Core PHP, and Advance PHP. If you are new to any of these concepts, we suggest you to pick tutorials based on these concepts first, to gain a better understanding of Laravel.\n" +
                        "\n" +
                        "Please note that we have used Laravel version 5.7 in all the examples.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        return list;
    }
    //Laravel Routing
    private static List<LearnDetailsModel> LaravelRouting(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Routing",
                "In Laravel, all requests are mapped with the help of routes. Basic routing routes the request to the associated controllers. This chapter discusses routing in Laravel.\n" +
                        "\n" +
                        "Routing in Laravel includes the following categories −\n" +
                        "\n" +
                        "Basic Routing\n" +
                        "Route parameters\n" +
                        "Named Routes",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Basic Routing",
                "All the application routes are registered within the app/routes.php file. This file tells Laravel for the URIs it should respond to and the associated controller will give it a particular call." +
                        "",
                "Route::get ('/', function () {\n" +
                        "   return view('welcome');});",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Route Parameters",
                "Sometimes in the web application, you may need to capture the parameters passed with the URL. For this, you should modify the code in routes.php file.\n" +
                        "\n" +
                        "You can capture the parameters in routes.php file in two ways as discussed here −\n" +
                        "\n" +
                        "Required Parameters\n" +
                        "These parameters are those which should be mandatorily captured for routing the web application. For example, it is important to capture the user’s identification number from the URL. This can be possible by defining route parameters as shown below −",
                "Route::get('ID/{id}',function($id) {\n" +
                        "   echo 'ID: '.$id;\n" +
                        "});",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Optional Parameters",
                "Sometimes developers can produce parameters as optional and it is possible with the inclusion of ? after the parameter name in URL. It is important to keep the default value mentioned as a parameter name. Look at the following example that shows how to define an optional parameter −",
                "Route::get('user/{name?}', function ($name = 'TutorialsPoint') { return $name;});",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Named Routes",
                "Named routes allow a convenient way of creating routes. The chaining of routes can be specified using name method onto the route definition. The following code shows an example for creating named routes with controller −",
                "Route::get('user/profile', 'UserController@showProfile')->name('profile');",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }
    //Laravel Middleware
    private static List<LearnDetailsModel> LaravelMiddleware(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What is Middleware?",
                "Middleware acts as a bridge between a request and a response. It is a type of filtering mechanism. This chapter explains you the middleware mechanism in Laravel.\n" +
                        "\n" +
                        "Laravel includes a middleware that verifies whether the user of the application is authenticated or not. If the user is authenticated, it redirects to the home page otherwise, if not, it redirects to the login page.\n" +
                        "\n" +
                        "Middleware can be created by executing the following command −",
                "php artisan make:middleware <middleware-name>",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Registering Middleware",
                "We need to register each and every middleware before using it. There are two types of Middleware in Laravel.\n" +
                        "\n" +
                        "Global Middleware\n" +
                        "Route Middleware\n" +
                        "The Global Middleware will run on every HTTP request of the application, whereas the Route Middleware will be assigned to a specific route. The middleware can be registered at app/Http/Kernel.php. This file contains two properties $middleware and $routeMiddleware. $middleware property is used to register Global Middleware and $routeMiddleware property is used to register route specific middleware.\n" +
                        "\n" +
                        "To register the global middleware, list the class at the end of $middleware property." +
                        "\n" +
                        "To register the route specific middleware, add the key and value to $routeMiddleware property.",
                "protected $routeMiddleware = [\n" +
                        "   'auth' => \\App\\Http\\Middleware\\Authenticate::class,\n" +
                        "   'auth.basic' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n" +
                        "   'guest' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n" +
                        "];",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Middleware Example",
                "We have created AgeMiddleware in the previous example. We can now register it in route specific middleware property. The code for that registration is shown below.\n" +
                        "\n" +
                        "The following is the code for app/Http/Kernel.php −",
                "<?php\n" +
                        "\n" +
                        "namespace App\\Http;\n" +
                        "use Illuminate\\Foundation\\Http\\Kernel as HttpKernel;\n" +
                        "\n" +
                        "class Kernel extends HttpKernel {\n" +
                        "   protected $middleware = [\n" +
                        "      \\Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::class,\n" +
                        "      \\App\\Http\\Middleware\\EncryptCookies::class,\n" +
                        "      \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n" +
                        "      \\Illuminate\\Session\\Middleware\\StartSession::class,\n" +
                        "      \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n" +
                        "      \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n" +
                        "   ];\n" +
                        "  \n" +
                        "   protected $routeMiddleware = [\n" +
                        "      'auth' => \\App\\Http\\Middleware\\Authenticate::class,\n" +
                        "      'auth.basic' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n" +
                        "      'guest' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n" +
                        "      'Age' => \\App\\Http\\Middleware\\AgeMiddleware::class,\n" +
                        "   ];\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Middleware Parameters",
                "We can also pass parameters with the Middleware. For example, if your application has different roles like user, admin, super admin etc. and you want to authenticate the action based on role, this can be achieved by passing parameters with middleware. The middleware that we create contains the following function and we can pass our custom argument after the $next argument.",
                "public function handle($request, Closure $next) {\n" +
                        "   return $next($request);\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Terminable Middleware",
                "Terminable middleware performs some task after the response has been sent to the browser. This can be accomplished by creating a middleware with terminate method in the middleware. Terminable middleware should be registered with global middleware. The terminate method will receive two arguments $request and $response." +
                        "",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        return list;
    }
    //Laravel Namespaces
    private static List<LearnDetailsModel> LaravelNamespaces(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Namespaces",
                "Namespaces can be defined as a class of elements in which each element has a unique name to that associated class. It may be shared with elements in other classes.\n" +
                        "\n" +
                        "Declaration of namespace\n" +
                        "The use keyword allows the developers to shorten the namespace.\n" +
                        "\n" +
                        "use <namespace-name>;\n" +
                        "The default namespace used in Laravel is App, however a user can change the namespace to match with web application. Creating user defined namespace with artisan command is mentioned as follows −",
                "php artisan app:name SocialNet",
                ""
        );
        list.add(l1);
        return list;
    }
    //Laravel Controllers
    private static List<LearnDetailsModel> LaravelControllers(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "What are the Controllers?",
                "Laravel controllers are an essential feature in a Laravel framework. Initially, we were handling the request logic in the form of closures in route files; now, in place of using closures in route files, we use controller classes. Controllers are used to handle the request logic within the single class, and the controllers are defined in the \"app/http/Controllers\" directory. Laravel framework follows the MVC (Model View Controller) architecture in which controllers act as moving the traffic back and forth between model and views.\n" +
                        "\n" +
                        "The default file of controller is available in the app/http/Controllers directory.",
                "<?php  \n" +
                        "namespace App\\Http\\Controllers;  \n" +
                        "use Illuminate\\Foundation\\Bus\\DispatchesJobs;  \n" +
                        "use Illuminate\\Routing\\Controller as BaseController;  \n" +
                        "use Illuminate\\Foundation\\Validation\\ValidatesRequests;  \n" +
                        "use Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests;  \n" +
                        "class Controller extends BaseController  \n" +
                        "{  \n" +
                        "  use AuthorizesRequests, DispatchesJobs, ValidatesRequests;  \n" +
                        "}",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Creating a Controller",
                "Open the command prompt or terminal based on the operating system you are using and type the following command to create controller using the Artisan CLI (Command Line Interface).\n" +
                        "\n" +
                        "php artisan make:controller <controller-name> --plain\n" +
                        "Replace the <controller-name> with the name of your controller. This will create a plain constructor as we are passing the argument — plain. If you don’t want to create a plain constructor, you can simply ignore the argument. The created constructor can be seen at app/Http/Controllers.\n" +
                        "\n" +
                        "You will see that some basic coding has already been done for you and you can add your custom coding. The created controller can be called from routes.php by the following syntax.",
                "Route::get(‘base URI’,’controller@method’);",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Controller Middleware",
                "We have seen middleware before and it can be used with controller also. Middleware can also be assigned to controller’s route or within your controller’s constructor. You can use the middleware method to assign middleware to the controller. The registered middleware can also be restricted to certain method of the controller.",
                "Route::get('profile', [\n" +
                        "   'middleware' => 'auth',\n" +
                        "   'uses' => 'UserController@showProfile'\n" +
                        "]);",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Restful Resource Controllers",
                "Often while making an application we need to perform CRUD (Create, Read, Update, Delete) operations. Laravel makes this job easy for us. Just create a controller and Laravel will automatically provide all the methods for the CRUD operations. You can also register a single route for all the methods in routes.php file.",
                "",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Implicit Controllers",
                "Implicit Controllers allow you to define a single route to handle every action in the controller. You can define it in route.php file with Route:controller method as shown below.",
                "Route::controller(‘base URI’,’<class-name-of-the-controller>’);",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Constructor Injection",
                "The Laravel service container is used to resolve all Laravel controllers. As a result, you are able to type-hint any dependencies your controller may need in its constructor. The dependencies will automatically be resolved and injected into the controller instance." +
                        "",
                "",
                ""
        );
        final LearnDetailsModel l7 = new LearnDetailsModel(
                "Method Injection",
                "In addition to constructor injection, you may also type — hint dependencies on your controller's action methods.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        return list;
    }
    //Laravel Blade Templates
    private static List<LearnDetailsModel> LaravelBladeTemplates(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Blade Templates",
                "Laravel 5.1 introduces the concept of using Blade, a templating engine to design a unique layout. The layout thus designed can be used by other views, and includes a consistent design and structure.\n" +
                        "\n" +
                        "When compared to other templating engines, Blade is unique in the following ways −\n" +
                        "\n" +
                        "It does not restrict the developer from using plain PHP code in views.\n" +
                        "\n" +
                        "The blade views thus designed, are compiled and cached until they are modified." +
                        "\n\n" +
                        "You can observe that all views are stored in the resources/views directory and the default view for Laravel framework is welcome.blade.php.\n" +
                        "\n" +
                        "Please note that other blade templates are also created similarly.",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Steps for Creating a Blade Template Layout",
                "You will have to use the following steps to create a blade template layout −\n" +
                        "\n" +
                        "Step 1\n" +
                        "Create a layout folder inside the resources/views folder. We are going to use this folder to store all layouts together.\n" +
                        "\n" +
                        "Create a file name master.blade.php which will have the following code associated with it −",
                "<html>\n" +
                        "   <head>\n" +
                        "      <title>DemoLaravel - @yield('title')</title>\n" +
                        "   </head>\n" +
                        "   <body>\n" +
                        "      @yield('content')\n" +
                        "   </body>\n" +
                        "</html>",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Step 2",
                "In this step, you should extend the layout. Extending a layout involves defining the child elements. Laravel uses the Blade @extends directive for defining the child elements.\n" +
                        "\n" +
                        "When you are extending a layout, please note the following points −\n" +
                        "\n" +
                        "Views defined in the Blade Layout injects the container in a unique way.\n" +
                        "\n" +
                        "Various sections of view are created as child elements.\n" +
                        "\n" +
                        "Child elements are stored in layouts folder as child.blade.php\n" +
                        "\n" +
                        "An example that shows extending the layout created above is shown here −",
                "@extends('layouts.app')\n" +
                        "@section('title', 'Page Title')\n" +
                        "@section('sidebar')\n" +
                        "   @parent\n" +
                        "<p>This refers to the master sidebar.</p>\n" +
                        "@endsection\n" +
                        "@section('content')\n" +
                        "<p>This is my body content.</p>\n" +
                        "@endsection",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Step 3",
                "To implement the child elements in views, you should define the layout in the way it is needed." +
                        "\n" +
                        "You can find that each of links mentioned in the landing page are hyperlinks. Please note that you can also create them as child elements with the help of blade templates by using the procedure given above.",
                "",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        return list;
    }
    //Laravel Working With Database
    private static List<LearnDetailsModel> LaravelWorkingWithDatabase(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Working With Database",
                "Laravel has made processing with database very easy. Laravel currently supports following 4 databases −\n" +
                        "\n" +
                        "MySQL\n" +
                        "Postgres\n" +
                        "SQLite\n" +
                        "SQL Server\n\n" +
                        "The query to the database can be fired using raw SQL, the fluent query builder, and the Eloquent ORM. To understand the all CRUD (Create, Read, Update, Delete) operations with Laravel, we will use simple student management system." +
                        "",
                "",
                ""
        );
        final LearnDetailsModel l2 = new LearnDetailsModel(
                "Connecting to Database",
                "Configure the database in config/database.php file and create the college database with structure in MySQL as shown in the following-" +
                        "\n" +
                        "Id\tint(11)\tPrimary key | Auto increment\n" +
                        "Name\tvarchar(25)\t" +
                        "\n\n" +
                        "We will see how to add, delete, update and retrieve records from database using Laravel-" +
                        "\n\n" +
                        "1.Insert Records\n" +
                        "We can insert the record using the DB facade with insert method.\n" +
                        "\n" +
                        "2.Retrieve Records\n" +
                        "After configuring the database, we can retrieve the records using the DB facade with select method.\n" +
                        "\n" +
                        "3.Update Records\n" +
                        "We can update the records using the DB facade with update method.\n" +
                        "\n" +
                        "4.Delete Records\n" +
                        "We can delete the record using the DB facade with the delete method.",
                "",
                ""
        );
        final LearnDetailsModel l3 = new LearnDetailsModel(
                "Insert Records",
                "We can insert the record using the DB facade with insert method. The syntax of insert method is as shown in the following-" +
                        "\n" +
                        "Syntax:" +
                        "\n" +
                        "bool insert(string $query, array $bindings = array())" +
                        "\n\n" +
                        "Parameters:" +
                        "\n" +
                        "$query(string) − query to execute in database\n" +
                        "$bindings(array) − values to bind with queries" +
                        "\n\n" +
                        "Returns:" +
                        "\n" +
                        "bool" +
                        "\n\n" +
                        "Description:" +
                        "\n" +
                        "Run an insert statement against the database.",
                "<?php\n" +
                        "\n" +
                        "namespace App\\Http\\Controllers;\n" +
                        "\n" +
                        "use Illuminate\\Http\\Request;\n" +
                        "use DB;\n" +
                        "use App\\Http\\Requests;\n" +
                        "use App\\Http\\Controllers\\Controller;\n" +
                        "\n" +
                        "class StudInsertController extends Controller {\n" +
                        "   public function insertform() {\n" +
                        "      return view('stud_create');\n" +
                        "   }\n" +
                        "\t\n" +
                        "   public function insert(Request $request) {\n" +
                        "      $name = $request->input('stud_name');\n" +
                        "      DB::insert('insert into student (name) values(?)',[$name]);\n" +
                        "      echo \"Record inserted successfully.<br/>\";\n" +
                        "      echo '<a href = \"/insert\">Click Here</a> to go back.';\n" +
                        "   }\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l4 = new LearnDetailsModel(
                "Retrieve Records",
                "After configuring the database, we can retrieve the records using the DB facade with select method. The syntax of select method is as shown in the following-" +
                        "\n" +
                        "Syntax:" +
                        "\n" +
                        "array select(string $query, array $bindings = array())" +
                        "\n\n" +
                        "Parameters:" +
                        "\n" +
                        "$query(string) − query to execute in database\n" +
                        "$bindings(array) − values to bind with queries" +
                        "\n\n" +
                        "Returns:" +
                        "\n" +
                        "array" +
                        "\n\n" +
                        "Description:" +
                        "\n" +
                        "Run a select statement against the database.",
                "<?php\n" +
                        "\n" +
                        "namespace App\\Http\\Controllers;\n" +
                        "\n" +
                        "use Illuminate\\Http\\Request;\n" +
                        "use DB;\n" +
                        "use App\\Http\\Requests;\n" +
                        "use App\\Http\\Controllers\\Controller;\n" +
                        "\n" +
                        "class StudViewController extends Controller {\n" +
                        "   public function index() {\n" +
                        "      $users = DB::select('select * from student');\n" +
                        "      return view('stud_view',['users'=>$users]);\n" +
                        "   }\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l5 = new LearnDetailsModel(
                "Update Records",
                "We can update the records using the DB facade with update method. The syntax of update method is as shown in the following-" +
                        "\n" +
                        "Syntax:" +
                        "\n" +
                        "int update(string $query, array $bindings = array())" +
                        "\n\n" +
                        "Parameters:" +
                        "\n" +
                        "$query(string) − query to execute in database\n" +
                        "$bindings(array) − values to bind with queries" +
                        "\n\n" +
                        "Returns:" +
                        "\n" +
                        "int" +
                        "\n\n" +
                        "Description:" +
                        "\n" +
                        "Run an update statement against the database.",
                "<?php\n" +
                        "\n" +
                        "namespace App\\Http\\Controllers;\n" +
                        "\n" +
                        "use Illuminate\\Http\\Request;\n" +
                        "use DB;\n" +
                        "use App\\Http\\Requests;\n" +
                        "use App\\Http\\Controllers\\Controller;\n" +
                        "\n" +
                        "class StudUpdateController extends Controller {\n" +
                        "   public function index() {\n" +
                        "      $users = DB::select('select * from student');\n" +
                        "      return view('stud_edit_view',['users'=>$users]);\n" +
                        "   }\n" +
                        "   public function show($id) {\n" +
                        "      $users = DB::select('select * from student where id = ?',[$id]);\n" +
                        "      return view('stud_update',['users'=>$users]);\n" +
                        "   }\n" +
                        "   public function edit(Request $request,$id) {\n" +
                        "      $name = $request->input('stud_name');\n" +
                        "      DB::update('update student set name = ? where id = ?',[$name,$id]);\n" +
                        "      echo \"Record updated successfully.<br/>\";\n" +
                        "      echo '<a href = \"/edit-records\">Click Here</a> to go back.';\n" +
                        "   }\n" +
                        "}",
                ""
        );
        final LearnDetailsModel l6 = new LearnDetailsModel(
                "Delete Records",
                "We can delete the record using the DB facade with the delete method. The syntax of delete method is shown in the following-" +
                        "\n" +
                        "Syntax:" +
                        "\n" +
                        "int delete(string $query, array $bindings = array())" +
                        "\n\n" +
                        "Parameters:" +
                        "\n" +
                        "Returns:" +
                        "\n" +
                        "int" +
                        "\n\n" +
                        "Description:" +
                        "\n" +
                        "Run a delete statement against the database.",
                "<?php\n" +
                        "\n" +
                        "namespace App\\Http\\Controllers;\n" +
                        "\n" +
                        "use Illuminate\\Http\\Request;\n" +
                        "use DB;\n" +
                        "use App\\Http\\Requests;\n" +
                        "use App\\Http\\Controllers\\Controller;\n" +
                        "\n" +
                        "class StudDeleteController extends Controller {\n" +
                        "   public function index() {\n" +
                        "      $users = DB::select('select * from student');\n" +
                        "      return view('stud_delete_view',['users'=>$users]);\n" +
                        "   }\n" +
                        "   public function destroy($id) {\n" +
                        "      DB::delete('delete from student where id = ?',[$id]);\n" +
                        "      echo \"Record deleted successfully.<br/>\";\n" +
                        "      echo '<a href = \"/delete-records\">Click Here</a> to go back.';\n" +
                        "   }\n" +
                        "}",
                ""
        );
        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        return list;
    }
    //Laravel Sending Email
    private static List<LearnDetailsModel> LaravelSendingEmail(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "Sending Email",
                "Laravel uses free feature-rich library SwiftMailer to send emails. Using the library function, we can easily send emails without too many hassles. The e-mail templates are loaded in the same way as views, which means you can use the Blade syntax and inject data into your templates." +
                        "\n" +
                        "Syntax:" +
                        "\nvoid send(string|array $view, array $data, Closure|string $callback)\n\n" +
                        "Parameters:\n" +
                        "$view(string|array) − name of the view that contains email message" +
                        "\n" +
                        "$data(array) − array of data to pass to view" +
                        "\n" +
                        "$callback − a Closure callback which receives a message instance, allowing you to customize the recipients, subject, and other aspects of the mail message\n" +
                        "\n" +
                        "Returns:" +
                        "\nnothing\n\n" +
                        "Description:" +
                        "\n" +
                        "Sends email.",
                "Mail::send([‘text’=>’text.view’], $data, $callback);",
                ""
        );
        list.add(l1);
        return list;
    }


    /*
    final LearnDetailsModel l1 = new LearnDetailsModel(
            "",
            "",
            "",
            ""
    );
    final LearnDetailsModel l2 = new LearnDetailsModel(
            "",
            "",
            "",
            ""
    );
    final LearnDetailsModel l3 = new LearnDetailsModel(
            "",
            "",
            "",
            ""
    );
    final LearnDetailsModel l4 = new LearnDetailsModel(
            "",
            "",
            "",
            ""
    );
    final LearnDetailsModel l5 = new LearnDetailsModel(
            "",
            "",
            "",
            ""
    );
    final LearnDetailsModel l6 = new LearnDetailsModel(
            "",
            "",
            "",
            ""
    );
    final LearnDetailsModel l7 = new LearnDetailsModel(
            "",
            "",
            "",
            ""
    );
    final LearnDetailsModel l8 = new LearnDetailsModel(
            "",
            "",
            "",
            ""
    );
    final LearnDetailsModel l9 = new LearnDetailsModel(
            "",
            "",
            "",
            ""
    );
    final LearnDetailsModel l10 = new LearnDetailsModel(
            "",
            "",
            "",
            ""
    );
    final LearnDetailsModel l11 = new LearnDetailsModel(
            "",
            "",
            "",
            ""
    );
    final LearnDetailsModel l12 = new LearnDetailsModel(
            "",
            "",
            "",
            ""
    );

        list.add(l1);
        list.add(l2);
        list.add(l3);
        list.add(l4);
        list.add(l5);
        list.add(l6);
        list.add(l7);
        list.add(l8);
        list.add(l9);
        list.add(l10);
        list.add(l11);
        list.add(l12);
        return list;*/

    //default
    private static List<LearnDetailsModel> defaultT() {
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel(
                "",
                "",
                "",
                ""
        );

        list.add(l1);

        return list;
    }

    //get list topics
    public static List<LearnDetailsModel> getTopics(String selectedTopicName) {
        switch (selectedTopicName) {
            //fundamentals
            case "Fundamental Introduction":
                return Introduction();
            case "Code structure":
                return CodeStructure();
            case "The modern mode":
                return useStrict();
            case "Variables":
                return Variables();
            case "Data types":
                return DataTypes();
            case "Interaction: alert, prompt, confirm":
                return Interaction();
            case "Type conversion":
                return TypeConversion();
            case "Operators":
                return Operators();
            case "Comparisons":
                return Comparisons();
            case "Conditionals":
                return Conditionals();
            case "Loops":
                return Loops();
            case "Functions":
                return Functions();
            case "Arrow functions":
                return ArrowFunctions();
            //Basics
            case "Basic Introduction":
                return BasicIntroduction();
            case "Syntax":
                return Syntax();
            case "Enabling":
                return Enabling();
            case "Placement":
                return Placement();
            case "Basic Variables":
                return BasicVariables();
            case "Basic Data Types":
                return BasicDataTypes();
            case "Basic Operators":
                return BasicOperators();
            case "Basic Conditions":
                return BasicConditions();
            case "Switch":
                return Switch();
            case "Basic Loops":
                return BasicLoops();
            case "Basic Functions":
                return BasicFunctions();
            case "Events":
                return Events();
            //Objects
            case "Learn Objects":
                return LearnObjects();
            case "Number Objects":
                return NumberObjects();
            case "Boolean Objects":
                return BooleanObjects();
            case "Strings Objects":
                return StringsObjects();
            case "Arrays Objects":
                return ArraysObjects();
            case "Date Objects":
                return DateObjects();
            case "Math Objects":
                return MathObjects();
            case "RegExp Objects":
                return RegExpObjects();
            //OOPs
            case "JS Class":
                return JSClass();
            case "JS Object":
                return JSObject();
            case "JS Prototype":
                return JSPrototype();
            case "JS Constructor Method":
                return JSConstructorMethod();
            case "JS Static Method":
                return JSStaticMethod();
            case "JS Encapsulation":
                return JSEncapsulation();
            case "JS Inheritance":
                return JSInheritance();
            case "JS Polymorphism":
                return JSPolymorphism();
            case "JS Abstraction":
                return JSAbstraction();
            //DOM
            case "HTML DOM":
                return HTMLDOM();
            case "DOM Methods":
                return DOMMethods();
            case "DOM Documents":
                return DOMDocuments();
            case "DOM Elements":
                return DOMElements();
            case "DOM HTML":
                return DOMHTML();
            case "DOM Forms":
                return DOMForms();
            case "DOM CSS":
                return DOMCSS();
            case "DOM Animations":
                return DOMAnimations();
            //BOM
            case "JS Window":
                return JSWindow();
            case "JS Screen":
                return JSScreen();
            case "JS Location":
                return JSLocation();
            case "JS History":
                return JSHistory();
            case "JS Navigator":
                return JSNavigator();
            case "JS Timing":
                return JSTiming();
            case "JS Cookies":
                return JSCookies();
            //advanced
            case "JS Error Handling":
                return JSErrorHandling();
            case "JS Validations":
                return JSValidations();
            case "JS Multimedia":
                return JSMultimedia();
            case "JS Debugging":
                return JSDebugging();
            case "JS Web APIs":
                return JSWebAPIs();
            case "Web Storage API":
                return WebStorageAPI();
            case "Web Workers API":
                return WebWorkersAPI();
            case "JS Graphics":
                return JSGraphics();
            //AJAX
            case "AJAX Introduction":
                return AjaxIntroduction();
            case "AJAX XMLHttp":
                return AjaxXMLHttp();
            case "AJAX Response":
                return AJAXResponse();
            case "AJAX PHP":
                return AJAXPHP();
            case "AJAX ASP":
                return AJAXASP();
            case "AJAX Database":
                return AJAXDatabase();
            case "AJAX Applications":
                return AJAXApplications();
            //Typescript
            case "Typescript Introduction":
                return TypescriptIntroduction();
            case "TypeScript Basic Syntax":
                return TypeScriptBasicSyntax();
            case "TypeScript Types":
                return TypeScriptTypes();
            case "TypeScript Variables":
                return TypeScriptVariables();
            case "TypeScript Operators":
                return TypeScriptOperators();
            case "TypeScript Decision Making":
                return TypeScriptDecisionMaking();
            case "TypeScript Loops":
                return TypeScriptLoops();
            case "TypeScript Functions":
                return TypeScriptFunctions();
            case "TypeScript Numbers":
                return TypeScriptNumbers();
            case "TypeScript Strings":
                return TypeScriptStrings();
            case "TypeScript Arrays":
                return TypeScriptArrays();
            case "TypeScript Tuples":
                return TypeScriptTuples();
            case "TypeScript Union":
                return TypeScriptUnion();
            case "TypeScript Interfaces":
                return TypeScriptInterfaces();
            case "TypeScript Classes":
                return TypeScriptClasses();
            case "TypeScript Objects":
                return TypeScriptObjects();
            case "TypeScript Namespaces":
                return TypeScriptNamespaces();
            case "TypeScript Modules":
                return TypeScriptModules();
            //AngularJS
            case "AngularJS Introduction":
                return AngularJSIntroduction();
            case "AngularJS MVC Architecture":
                return AngularJSMVCArchitecture();
            case "AngularJS First Application":
                return AngularJSFirstApplication();
            case "AngularJS Directives":
                return AngularJSDirectives();
            case "AngularJS Expressions":
                return AngularJSExpressions();
            case "AngularJS Controllers":
                return AngularJSControllers();
            case "AngularJS Filters":
                return AngularJSFilters();
            case "AngularJS Tables":
                return AngularJSTables();
            case "AngularJS HTML DOM":
                return AngularJSHTMLDOM();
            case "AngularJS Modules":
                return AngularJSModules();
            case "AngularJS Forms":
                return AngularJSForms();
            case "AngularJS Includes":
                return AngularJSIncludes();
            case "AngularJS Ajax":
                return AngularJSAjax();
            case "AngularJS Views":
                return AngularJSViews();
            case "AngularJS Scopes":
                return AngularJSScopes();
            case "AngularJS Services":
                return AngularJSServices();
            case "AngularJS Dependency Injection":
                return AngularJSInjection();
            case "AngularJS Custom Directives":
                return AngularJSCustomDirectives();
            //VueJS
            case "VueJs Introduction":
                return VueJsIntroduction();
            case "VueJs First Program":
                return VueJsFirstProgram();
            case "VueJS Instances":
                return VueJSInstances();
            case "VueJS Template":
                return VueJSTemplate();
            case "VueJS Components":
                return VueJSComponents();
            case "VueJS Computed Properties":
                return VueJSComputedProperties();
            case "VueJS Binding":
                return VueJSBinding();
            case "VueJS Events":
                return VueJSEvents();
            case "VueJS Rendering":
                return VueJSRendering();
            case "VueJS Animation":
                return VueJSAnimation();
            case "VueJS Directives":
                return VueJSDirectives();
            case "VueJS Routing":
                return VueJSRouting();
            case "VueJS Mixins":
                return VueJSMixins();
            case "VueJS Examples":
                return VueJSExamples();
            //NextJS
            case "NextJs Introduction":
                return NextJsIntroduction();
            case "NextJs Pages":
                return NextJsPages();
            case "NextJs Static File Serving":
                return NextJsStaticFileServing();
            case "NextJs Meta Data":
                return NextJsMetaData();
            case "NextJs CSS Support":
                return NextJsCSSSupport();
            case "NextJs Global CSS Support":
                return NextJsGlobalCSSSupport();
            case "NextJs Pre-Rendering":
                return NextJsPreRendering();
            case "NextJs Routing":
                return NextJsRouting();
            case "NextJs Dynamic Routing":
                return NextJsDynamicRouting();
            case "NextJs Imperative Routing":
                return NextJsImperativeRouting();
            case "NextJs Shallow Routing":
                return NextJsShallowRouting();
            case "NextJs Api Routes":
                return NextJsApiRoutes();
            case "NextJs API MiddleWares":
                return NextJsAPIMiddleWares();
            case "NextJs Response Helpers":
                return NextJsResponseHelpers();
            //ReactJs
            case "ReactJs Introduction":
                return ReactJsIntroduction();
            case "ReactJs Architecture":
                return ReactJsArchitecture();
            case "ReactJs Creating a React Application":
                return ReactJsCreatingReactApplication();
            case "ReactJs JSX":
                return ReactJsJSX();
            case "ReactJs Component":
                return ReactJsComponent();
            case "ReactJs Styling":
                return ReactJsStyling();
            case "ReactJs Properties":
                return ReactJsProperties();
            case "ReactJs Events":
                return ReactJsEvents();
            case "ReactJs Conditional":
                return ReactJsConditional();
            case "ReactJs Lists":
                return ReactJsLists();
            case "ReactJs Forms":
                return ReactJsForms();
            case "ReactJs Styling Sass":
                return ReactJsStylingSass();
            case "ReactJs Hooks":
                return ReactJsHooks();
            //EmberJS
            case "EmberJs Introduction":
                return EmberJsIntroduction();
            case "EmberJs Core Concepts":
                return EmberJsCoreConcepts();
            case "EmberJs Application":
                return EmberJsApplication();
            case "EmberJs Object Model":
                return EmberJsObjectModel();
            case "EmberJs Router":
                return EmberJsRouter();
            case "EmberJs Templates":
                return EmberJsTemplates();
            case "EmberJs Components":
                return EmberJsComponents();
            case "EmberJs Models":
                return EmberJsModels();
            case "EmberJs Managing Dependencies":
                return EmberJsManagingDependencies();
            //ExpressJs
            case "ExpressJs Introduction":
                return ExpressJsIntroduction();
            case "ExpressJs Environment":
                return ExpressJsEnvironment();
            case "ExpressJs Hello World":
                return ExpressJsHelloWorld();
            case "ExpressJs Routing":
                return ExpressJsRouting();
            case "ExpressJs HTTP Methods":
                return ExpressJsHTTPMethods();
            case "ExpressJs URL Building":
                return ExpressJsURLBuilding();
            case "ExpressJs Middleware":
                return ExpressJsMiddleware();
            case "ExpressJs Templating":
                return ExpressJsTemplating();
            case "ExpressJs Static Files":
                return ExpressJsStaticFiles();
            case "ExpressJs Form Data":
                return ExpressJsFormData();
            case "ExpressJs Database":
                return ExpressJsDatabase();
            case "ExpressJs Cookies":
                return ExpressJsCookies();
            case "ExpressJs Sessions":
                return ExpressJsSessions();
            case "ExpressJs Authentication":
                return ExpressJsAuthentication();
            case "ExpressJs RESTFul APIs":
                return ExpressJsRESTFulAPIs();
            case "ExpressJs Scaffolding":
                return ExpressJsScaffolding();
            case "ExpressJs Error Handling":
                return ExpressJsErrorHandling();
            case "ExpressJs Debugging":
                return ExpressJsDebugging();
            case "ExpressJs Best Practices":
                return ExpressJsBestPractices();
            //Bootstrap
            case "Bootstrap Introduction":
                return BootstrapIntroduction();
            case "Bootstrap Grid System":
                return BootstrapGridSystem();
            case "Bootstrap CSS Overview":
                return BootstrapCSSOverview();
            case "Bootstrap Typography":
                return BootstrapTypography();
            case "Bootstrap Code":
                return BootstrapCode();
            case "Bootstrap Tables":
                return BootstrapTables();
            case "Bootstrap Forms":
                return BootstrapForms();
            case "Bootstrap Buttons":
                return BootstrapButtons();
            case "Bootstrap Images":
                return BootstrapImages();
            case "Bootstrap Helper Classes":
                return BootstrapHelperClasses();
            case "Bootstrap Responsive Utilities":
                return BootstrapResponsiveUtilities();
            //NodeJs
            case "NodeJs Introduction":
                return NodeJsIntroduction();
            case "NodeJs First Application":
                return NodeJsFirstApplication();
            case "NodeJs REPL Terminal":
                return NodeJsREPLTerminal();
            case "NodeJs NPM":
                return NodeJsNPM();
            case "NodeJs Callbacks Concept":
                return NodeJsCallbacksConcept();
            case "NodeJs Event Loop":
                return NodeJsEventLoop();
            case "NodeJs Event Emitter":
                return NodeJsEventEmitter();
            case "NodeJs Buffers":
                return NodeJsBuffers();
            case "NodeJs Streams":
                return NodeJsStreams();
            case "NodeJs File System":
                return NodeJsFileSystem();
            case "NodeJs Global Objects":
                return NodeJsGlobalObjects();
            case "NodeJs Web Module":
                return NodeJsWebModule();
            //jQuery
            case "jQuery Introduction":
                return jQueryIntroduction();
            case "jQuery Basics":
                return jQueryBasics();
            case "jQuery Selectors":
                return jQuerySelectors();
            case "jQuery Attributes":
                return jQueryAttributes();
            case "jQuery DOM Traversing":
                return jQueryDOMTraversing();
            case "jQuery CSS":
                return jQueryCSS();
            case "jQuery DOM":
                return jQueryDOM();
            case "jQuery Events Handling":
                return jQueryEventsHandling();
            case "jQuery Ajax":
                return jQueryAjax();
            case "jQuery Effects":
                return jQueryEffects();
            case "jQuery Interactions":
                return jQueryInteractions();
            case "jQuery Widgets":
                return jQueryWidgets();
            case "jQuery Theming":
                return jQueryTheming();
            case "jQuery Utilities":
                return jQueryUtilities();
            case "jQuery Plugins":
                return jQueryPlugins();
            //Laravel
            case "Laravel Introduction":
                return LaravelIntroduction();
            case "Laravel Routing":
                return LaravelRouting();
            case "Laravel Middleware":
                return LaravelMiddleware();
            case "Laravel Namespaces":
                return LaravelNamespaces();
            case "Laravel Controllers":
                return LaravelControllers();
            case "Laravel Blade Templates":
                return LaravelBladeTemplates();
            case "Laravel Working With Database":
                return LaravelWorkingWithDatabase();
            case "Laravel Sending Email":
                return LaravelSendingEmail();

            default:
                return defaultT();


        }
    }

}
    /*private static List<LearnDetailsModel> LaravelSendingEmail(){
        final List<LearnDetailsModel> list = new ArrayList<>();
        final LearnDetailsModel l1 = new LearnDetailsModel();

        return list;
    }*/